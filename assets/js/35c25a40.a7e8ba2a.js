(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{135:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return a})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(8),l=(n(0),n(357)),s={id:"set-cover",title:"The set_cover module",sidebar_label:"set_cover"},a={unversionedId:"query-modules/python/set-cover",id:"query-modules/python/set-cover",isDocsHomePage:!1,title:"The set_cover module",description:"cpsolve(context, elementvertexes, set_vertexes)",source:"@site/mage/query-modules/python/set-cover.md",slug:"/query-modules/python/set-cover",permalink:"/mage/query-modules/python/set-cover",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/set-cover.md",version:"current",sidebar_label:"set_cover",sidebar:"mage",previous:{title:"The nxalg module",permalink:"/mage/query-modules/python/nxalg"},next:{title:"The tsp module",permalink:"/mage/query-modules/python/tsp"}},i=[{value:"<code>cp_solve(context, element_vertexes, set_vertexes)</code>",id:"cp_solvecontext-element_vertexes-set_vertexes",children:[]},{value:"<code>greedy(context, element_vertexes, set_vertexes)</code>",id:"greedycontext-element_vertexes-set_vertexes",children:[]}],c={toc:i};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"cp_solvecontext-element_vertexes-set_vertexes"},Object(l.b)("inlineCode",{parentName:"h2"},"cp_solve(context, element_vertexes, set_vertexes)")),Object(l.b)("p",null,"This set cover solver method returns 1 filed"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resulting_sets")," is a minimal set of sets in which all the elements have been\ncontained")),Object(l.b)("p",null,"The input arguments consist of"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"element_vertexes")," that is a list of element nodes"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"set_vertexes")," that is a list of set nodes those elements are contained in")),Object(l.b)("p",null,"Element and set equivalents at a certain index come in pairs so mappings between\nsets and elements are consistent."),Object(l.b)("p",null,"The procedure can be invoked in Cypher using the following calls, e.g.: "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},"CALL set_cover.cp_solve([(:Point), (:Point)], [(:Set), (:Set)]) \nYIELD resulting_sets;\n")),Object(l.b)("p",null,"The method uses constraint programming as a solving tool for obtaining a minimal\nset of sets that contain all the elements."),Object(l.b)("h2",{id:"greedycontext-element_vertexes-set_vertexes"},Object(l.b)("inlineCode",{parentName:"h2"},"greedy(context, element_vertexes, set_vertexes)")),Object(l.b)("p",null,"This set cover solver method returns 1 filed"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resulting_sets")," is a minimal set of sets in which all the elements have been\ncontained")),Object(l.b)("p",null,"The input arguments consist of"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"element_vertexes")," that is a list of element nodes"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"set_vertexes")," that is a list of set nodes those elements are contained in")),Object(l.b)("p",null,"Element and set equivalents at a certain index come in pairs so mappings between\nsets and elements are consistent."),Object(l.b)("p",null,"The procedure can be invoked in openCypher using the following calls, e.g.:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},"CALL set_cover.cp_solve([(:Point), (:Point)], [(:Set), (:Set)]) \nYIELD resulting_sets;\n")),Object(l.b)("p",null,"The method uses a greedy method as a solving tool for obtaining a minimal set of\nsets that contain all the elements."))}u.isMDXComponent=!0},357:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),u=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,d=p["".concat(s,".").concat(b)]||p[b]||m[b]||l;return n?o.a.createElement(d,a(a({ref:t},c),{},{components:n})):o.a.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=b;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<l;c++)s[c]=n[c];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);