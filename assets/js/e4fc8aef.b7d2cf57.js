"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[84502],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(n),d=i,u=h["".concat(l,".").concat(d)]||h[d]||m[d]||r;return n?a.createElement(u,s(s({ref:t},p),{},{components:n})):a.createElement(u,s({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},92935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={id:"betweenness-centrality-online-algorithm",title:"Dynamic Betweenness Centrality",sidebar_label:"Dynamic Betweenness Centrality"},s=void 0,o={unversionedId:"algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm",id:"algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm",title:"Dynamic Betweenness Centrality",description:"Description",source:"@site/mage/algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm.md",sourceDirName:"algorithms/dynamic-graph-analytics",slug:"/algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm",permalink:"/docs/mage/algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm.md",tags:[],version:"current",frontMatter:{id:"betweenness-centrality-online-algorithm",title:"Dynamic Betweenness Centrality",sidebar_label:"Dynamic Betweenness Centrality"},sidebar:"mage",previous:{title:"Union Find",permalink:"/docs/mage/algorithms/traditional-graph-analytics/union-find-algorithm"},next:{title:"Dynamic Community Detection",permalink:"/docs/mage/algorithms/dynamic-graph-analytics/community-detection-online-algorithm"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Materials",id:"materials",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Use cases",id:"use-cases",level:2}],p={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Betweenness centrality is among the most common metrics in graph analytics owing\nto its utility in identifying critical vertices of graphs. It is one of the\ntools in ",(0,i.kt)("em",{parentName:"p"},"centrality analysis"),", a set of techniques for measuring the importance\nof nodes in networks."),(0,i.kt)("p",null,"The notion of ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Betweenness_centrality"},"Betweenness\ncentrality")," is based on\nshortest paths: the shortest path between two nodes is the one consisting of the\nfewest edges, or in case of weighted graphs, the one with the smallest total\nedge weight. A node\u2019s betweenness centrality is defined as the share of all\nshortest paths in the graph that run through it."),(0,i.kt)("p",null,"MAGE includes a ",(0,i.kt)("em",{parentName:"p"},"fully dynamic")," betweenness centrality computation tool that\nimplements the\n",(0,i.kt)("a",{parentName:"p",href:"https://repository.kaust.edu.sa/bitstream/handle/10754/625935/08070346.pdf"},"iCentral"),"\n",(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," algorithm. iCentral saves up on computation in two ways: it singles out the\nnodes whose centrality scores could have changed and then incrementally updates\nthe scores, making use of previously calculated data structures where\napplicable."),(0,i.kt)("p",null,"Dynamic algorithms such as iCentral are especially suited for graph streaming\nsolutions such as Memgraph. As updates arrive in a stream, the algorithm avoids\nredundant work by processing only the portion of the graph affected by the\nupdate."),(0,i.kt)("img",{src:n(39563).Z,alt:"betweenness-centrality-online-algorithm-illustration",width:"600"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"After the node in the center is erased, shortest paths run through other nodes\nand their betweenness centrality scores increase. A larger node size signifies\na higher betweenness centrality score.")),(0,i.kt)("h2",{id:"materials"},"Materials"),(0,i.kt)("h3",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/cpp/betweenness_centrality_module/betweenness_centrality_module.cpp"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Betweenness_Centrality_Online-Implementation-FB6E00?style=for-the-badge&logo=github&logoColor=white",alt:"Betweenness Centrality\nOnline"}))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mage/query-modules/cpp/betweenness-centrality-online"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Betweenness_Centrality_Online-Documentation-FCC624?style=for-the-badge&logo=cplusplus&logoColor=white",alt:"Betweenness Centrality\nOnline"}))),(0,i.kt)("p",null,"Dynamic Betweenness Centrality is implemented as part of the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage"},(0,i.kt)("strong",{parentName:"a"},"MAGE"))," project. Be sure to check it out at\nthe link above. \u261d\ufe0f"),(0,i.kt)("h2",{id:"use-cases"},"Use cases"),(0,i.kt)("p",null,"Real-world networks are often dynamic and evolve rapidly. Consequently,\nre-running static algorithms after each update often proves infeasible. Dynamic\nalgorithms avoid redundant work by processing only the portion of the network\naffected by the latest update."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/mage/use-cases/social-media"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Social_Networks-Application-8A477F?style=for-the-badge",alt:"Social\nnetworks"}))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Social networks")," are a quintessential example of rapidly evolving graphs \u2013\npeople step in and out of contact every day, and even a single change can\nsignificantly alter the network of relationships. Furthermore, individual users\u2019\nactivities often come in ",(0,i.kt)("em",{parentName:"p"},"bursts")," of many interactions in short order. With\nreal-time network-aware applications (e.g. finding influential persons, trend\nanalysis), being able to instantly reflect graph changes into centrality values\nis crucial."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/mage/use-cases/transportation"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Logistics-Application-8A477F?style=for-the-badge",alt:"Logistics"}))),(0,i.kt)("p",null,"Another key use case of this algorithm is ",(0,i.kt)("strong",{parentName:"p"},"logistics"),"/",(0,i.kt)("strong",{parentName:"p"},"transportation"),". In\n",(0,i.kt)("a",{parentName:"p",href:"https://www.hindawi.com/journals/jat/2019/9024745/"},"complex transportation\nnetworks"),", measuring\nbetweenness centrality helps identify bottlenecks and chokepoints, as well as\nmonitor how traffic is redistributed as nodes or connections between them become\nopen or close. This can help with applications such as shipping/delivery routes\nor urban traffic grid optimization on both cost and benefit fronts."))}m.isMDXComponent=!0},39563:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/betweenness_centrality_online-e5accb6568a2a65bb521c231ca40f9a2.png"}}]);