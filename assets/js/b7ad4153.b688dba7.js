"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34796],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return d}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),i=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=i(a),d=n,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return a?r.createElement(h,o(o({ref:t},s),{},{components:a})):r.createElement(h,o({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:n,o[1]=u;for(var i=2;i<l;i++)o[i]=a[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3034:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var r=a(87462),n=a(63366),l=(a(67294),a(3905)),o=a(9877),u=a(58215),p=["components"],i={id:"set-or-update-objects",title:"How to set or update objects",sidebar_label:"Set or update objects"},s=void 0,c={unversionedId:"how-to-guides/query-builder/set-or-update-objects",id:"how-to-guides/query-builder/set-or-update-objects",title:"How to set or update objects",description:"The set_() method is used to set or update labels on nodes, and properties on",source:"@site/gqlalchemy/how-to-guides/query-builder/set-or-update-objects.md",sourceDirName:"how-to-guides/query-builder",slug:"/how-to-guides/query-builder/set-or-update-objects",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/set-or-update-objects",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/query-builder/set-or-update-objects.md",tags:[],version:"current",frontMatter:{id:"set-or-update-objects",title:"How to set or update objects",sidebar_label:"Set or update objects"},sidebar:"gqlalchemy",previous:{title:"Delete and remove objects",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/delete-remove-objects"},next:{title:"Kafka streams",permalink:"/docs/gqlalchemy/how-to-guides/streams/manage-kafka-streams"}},m={},d=[{value:"Set or update a property",id:"set-or-update-a-property",level:2},{value:"Set or update multiple properties",id:"set-or-update-multiple-properties",level:2},{value:"Set a label",id:"set-a-label",level:2},{value:"Replace all properties using map",id:"replace-all-properties-using-map",level:2},{value:"Update all properties using map",id:"update-all-properties-using-map",level:2}],h={toc:d};function y(e){var t=e.components,a=(0,n.Z)(e,p);return(0,l.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"set_()")," method is used to set or update labels on nodes, and properties on\nnodes and relationships."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set_(self, item: str, operator: Operator, **kwargs)")," - sets or updates the\nvalue of item to ",(0,l.kt)("inlineCode",{parentName:"li"},"literal")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"expression")," value, depending on the ",(0,l.kt)("inlineCode",{parentName:"li"},"operator"),".")),(0,l.kt)("h2",{id:"set-or-update-a-property"},"Set or update a property"),(0,l.kt)("p",null,"You can assign a value to a node property with the query builder's ",(0,l.kt)("inlineCode",{parentName:"p"},"set_()"),"\nmethod. The used assignment operator is imported from the query builder. You can\nalso use a simple equals sign as a string - ",(0,l.kt)("inlineCode",{parentName:"p"},'"="'),"."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builder import Operator\n\nquery = Match()\n        .node(labels="Country", variable="c", name="Germany")\n        .set_(item="c.population", operator=Operator.ASSIGNMENT, literal=83000001)\n        .return_()\n        .execute()\n'))),(0,l.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'Germany'}) SET c.population = 83000001 RETURN *;\n")))),(0,l.kt)("p",null,"If the node already had the ",(0,l.kt)("inlineCode",{parentName:"p"},"population")," property, it will be updated by setting\nit to a new value."),(0,l.kt)("h2",{id:"set-or-update-multiple-properties"},"Set or update multiple properties"),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Match\nfrom gqlalchemy.query_builder import Operator\n\nquery = Match()\n        .node(variable='n')\n        .where(item='n.name', operator='=', literal='Germany')\n        .set_(item='n.population', operator=Operator.ASSIGNMENT, literal=83000001)\n        .set_(item='n.capital', operator=Operator.ASSIGNMENT, literal='Berlin')\n        .return_()\n        .execute()\n"))),(0,l.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) WHERE n.name = 'Germany' SET n.population = 83000001 SET n.capital = 'Berlin' RETURN *;\n")))),(0,l.kt)("p",null,"If the node already had the ",(0,l.kt)("inlineCode",{parentName:"p"},"population")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"capital")," properties, they will be\nupdated to a new value."),(0,l.kt)("h2",{id:"set-a-label"},"Set a label"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"set()")," method can be used to set a label of a node. If a node already\nhas a label, then it will have both old and new label."),(0,l.kt)(o.Z,{"defaultValu\xdfe":"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builder import Operator\n\nquery = Match()\n        .node(variable="c", name="Germany")\n        .set_(item="c", operator=Operator.LABEL_FILTER, expression="Land")\n        .return_()\n        .execute()\n'))),(0,l.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c {name: 'Germany'}) SET c:Land RETURN *;\n")))),(0,l.kt)("h2",{id:"replace-all-properties-using-map"},"Replace all properties using map"),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"set()")," is used with the ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator.ASSIGNMENT")," (",(0,l.kt)("inlineCode",{parentName:"p"},"="),"), all the properties\nin the map (value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"literal")," argument) that are on the node or\nrelationship will be updated. The properties that are not on the node or\nrelationship but are in the map will be added. The properties that are not in\nthe map will be removed."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Match\nfrom gqlalchemy.query_builder import Operator\n\nquery = Match()\n        .node(variable='c', labels='Country')\n        .where(item='c.name', operator='=', literal='Germany')\n        .set_(item='c', operator=Operator.ASSIGNMENT, literal={'name': 'Germany', 'population': '85000000'})\n        .return_()\n        .execute()\n"))),(0,l.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country) WHERE c.name = 'Germany' SET c = {name: 'Germany', population: '85000000'} RETURN *;\n")))),(0,l.kt)("h2",{id:"update-all-properties-using-map"},"Update all properties using map"),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"set()")," is used with the ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator.INCREMENT")," (",(0,l.kt)("inlineCode",{parentName:"p"},"+="),"), all the properties\nin the map (value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"literal")," argument) that are on the node or\nrelationship will be updated. The properties that are not on the node or\nrelationship but are in the map will be added. Properties that are not present\nin the map will be left as is."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Match\nfrom gqlalchemy.query_builder import Operator\n\nquery = Match()\n        .node(variable='c', labels='Country')\n        .where(item='c.name', operator='=', literal='Germany')\n        .set_(item='c', operator=Operator.INCREMENT, literal={'name': 'Germany', 'population': '85000000'})\n        .return_()\n        .execute()\n"))),(0,l.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country) WHERE c.name = 'Germany' SET c += {name: 'Germany', population: '85000000'} RETURN *;\n")))),(0,l.kt)("p",null,"Hopefully, this guide has taught you how to set or update node label or node and\nrelationship properties. For more information on what you can do with ",(0,l.kt)("inlineCode",{parentName:"p"},"SET"),"\nclause, check out the ",(0,l.kt)("a",{parentName:"p",href:"/cypher-manual/clauses/set"},"Cypher manual"),". If you\nhave any more questions, join our community and ping us on\n",(0,l.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}y.isMDXComponent=!0},58215:function(e,t,a){a.d(t,{Z:function(){return n}});var r=a(67294);function n(e){var t=e.children,a=e.hidden,n=e.className;return r.createElement("div",{role:"tabpanel",hidden:a,className:n},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return s}});var r=a(87462),n=a(67294),l=a(72389),o=a(5979),u=a(86010),p="tabItem_LplD";function i(e){var t,a,l,i=e.lazy,s=e.block,c=e.defaultValue,m=e.values,d=e.groupId,h=e.className,y=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,o.lx)(b,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(t=null!=c?c:null==(a=y.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=y[0])?void 0:l.props.value;if(null!==v&&!b.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,o.UB)(),k=g.tabGroupChoices,T=g.setTabGroupChoices,N=(0,n.useState)(v),w=N[0],q=N[1],E=[],C=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var O=k[d];null!=O&&O!==w&&b.some((function(e){return e.value===O}))&&q(O)}var x=function(e){var t=e.currentTarget,a=E.indexOf(t),r=b[a].value;r!==w&&(C(t),q(r),null!=d&&T(d,r))},j=function(e){var t,a=null;switch(e.key){case"ArrowRight":var r=E.indexOf(e.currentTarget)+1;a=E[r]||E[0];break;case"ArrowLeft":var n=E.indexOf(e.currentTarget)-1;a=E[n]||E[E.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":s},h)},b.map((function(e){var t=e.value,a=e.label,l=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return E.push(e)},onKeyDown:j,onFocus:x,onClick:x},l,{className:(0,u.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":w===t})}),null!=a?a:t)}))),i?(0,n.cloneElement)(y.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function s(e){var t=(0,l.Z)();return n.createElement(i,(0,r.Z)({key:String(t)},e))}}}]);