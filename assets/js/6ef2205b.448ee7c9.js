"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77297],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var l=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=l.createContext({}),s=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=s(e.components);return l.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||a;return n?l.createElement(k,u(u({ref:t},p),{},{components:n})):l.createElement(k,u({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,u=new Array(a);u[0]=c;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:i,u[1]=r;for(var s=2;s<a;s++)u[s]=n[s];return l.createElement.apply(null,u)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85325:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>p,assets:()=>o,contentTitle:()=>u,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var l=n(87462),i=(n(67294),n(3905));n(74866),n(85162),n(83523);const a={id:"collections",title:"collections",sidebar_label:"collections"},u=void 0,r={unversionedId:"query-modules/cpp/collections",id:"query-modules/cpp/collections",title:"collections",description:"The collections module is a collection manipulation module that offers functions to work with lists in Cypher queries, allowing operations like filtering, sorting, and modification for efficient data handling.",source:"@site/mage/query-modules/cpp/collections.md",sourceDirName:"query-modules/cpp",slug:"/query-modules/cpp/collections",permalink:"/docs/mage/query-modules/cpp/collections",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/cpp/collections.md",tags:[],version:"current",frontMatter:{id:"collections",title:"collections",sidebar_label:"collections"},sidebar:"mage",previous:{title:"bridges",permalink:"/docs/mage/query-modules/cpp/bridges"},next:{title:"community_detection",permalink:"/docs/mage/query-modules/cpp/community-detection"}},o={},s=[{value:"Procedures",id:"procedures",level:3},{value:"<code>remove_all(input_list, to_remove_list)</code>",id:"remove_allinput_list-to_remove_list",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"<code>sum(input_list)</code>",id:"suminput_list",level:3},{value:"Input:",id:"input-1",level:4},{value:"Output:",id:"output-1",level:4},{value:"Usage:",id:"usage-1",level:4},{value:"<code>union(input_list1, input_list2)</code>",id:"unioninput_list1-input_list2",level:3},{value:"Input:",id:"input-2",level:4},{value:"Output:",id:"output-2",level:4},{value:"Usage:",id:"usage-2",level:4},{value:"<code>sort(input_list)</code>",id:"sortinput_list",level:3},{value:"Input:",id:"input-3",level:4},{value:"Output:",id:"output-3",level:4},{value:"Usage:",id:"usage-3",level:4},{value:"<code>contains_sorted(input_list, element)</code>",id:"contains_sortedinput_list-element",level:3},{value:"Input:",id:"input-4",level:4},{value:"Output:",id:"output-4",level:4},{value:"Usage:",id:"usage-4",level:4},{value:"<code>max(input_list)</code>",id:"maxinput_list",level:3},{value:"Input:",id:"input-5",level:4},{value:"Output:",id:"output-5",level:4},{value:"Usage:",id:"usage-5",level:4},{value:"<code>pairs(input_list)</code>",id:"pairsinput_list",level:3},{value:"Input:",id:"input-6",level:4},{value:"Output:",id:"output-6",level:4},{value:"Usage:",id:"usage-6",level:4},{value:"<code>contains(list, value)</code>",id:"containslist-value",level:3},{value:"Input:",id:"input-7",level:4},{value:"Output:",id:"output-7",level:4},{value:"Usage:",id:"usage-7",level:4},{value:"<code>min(list)</code>",id:"minlist",level:3},{value:"Input:",id:"input-8",level:4},{value:"Output:",id:"output-8",level:4},{value:"Usage:",id:"usage-8",level:4},{value:"<code>unionAll(list1, list2)</code>",id:"unionalllist1-list2",level:3},{value:"Input:",id:"input-9",level:4},{value:"Output:",id:"output-9",level:4},{value:"Usage:",id:"usage-9",level:4},{value:"<code>to_set(list)</code>",id:"to_setlist",level:3},{value:"Input:",id:"input-10",level:4},{value:"Output:",id:"output-10",level:4},{value:"Usage:",id:"usage-10",level:4},{value:"<code>partition(list, partition_size)</code>",id:"partitionlist-partition_size",level:3},{value:"Input:",id:"input-11",level:4},{value:"Output:",id:"output-11",level:4},{value:"Usage:",id:"usage-11",level:4},{value:"<code>sum_longs(numbers)</code>",id:"sum_longsnumbers",level:3},{value:"Input:",id:"input-12",level:4},{value:"Output:",id:"output-12",level:4},{value:"Usage:",id:"usage-12",level:4},{value:"<code>avg(numbers)</code>",id:"avgnumbers",level:3},{value:"Input:",id:"input-13",level:4},{value:"Output:",id:"output-13",level:4},{value:"Usage:",id:"usage-13",level:4},{value:"<code>contains_all(collection, values)</code>",id:"contains_allcollection-values",level:3},{value:"Input:",id:"input-14",level:4},{value:"Output:",id:"output-14",level:4},{value:"Usage:",id:"usage-14",level:4},{value:"<code>intersection(first, second)</code>",id:"intersectionfirst-second",level:3},{value:"Input:",id:"input-15",level:4},{value:"Output:",id:"output-15",level:4},{value:"Usage:",id:"usage-15",level:4}],p=e=>{let{children:t,color:n}=e;return(0,i.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},d={toc:s,Highlight:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The collections module is a collection manipulation module that offers functions to work with lists in Cypher queries, allowing operations like filtering, sorting, and modification for efficient data handling."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/tree/main/cpp/collections_module"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-collections-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Trait"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Module type")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(p,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"algorithm")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Implementation")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(p,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"C++")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Graph direction")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(p,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"undirected")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Edge weights")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(p,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"unweighted")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Parallelism")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(p,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"sequential")))))),(0,i.kt)("h3",{id:"procedures"},"Procedures"),(0,i.kt)("h3",{id:"remove_allinput_list-to_remove_list"},(0,i.kt)("inlineCode",{parentName:"h3"},"remove_all(input_list, to_remove_list)")),(0,i.kt)("p",null,"Removes elements from the input list. If a non-existent element is passed, it will be ignored."),(0,i.kt)("h4",{id:"input"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list: List[Any]")," \u27a1 the list from which elements are to be removed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to_remove_list: List[Any]")," \u27a1 the list of elements to be removed.")),(0,i.kt)("h4",{id:"output"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"removed: List[Any]")," \u27a1 the input list after removing the specified elements.")),(0,i.kt)("h4",{id:"usage"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.remove_all([1, 2, 3, 4, 5], [1, 2, 3, 7]) YIELD removed RETURN removed;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+----------------------------+\n| removed                    |\n+----------------------------+\n| [4, 5]                     |\n+----------------------------+\n")),(0,i.kt)("h3",{id:"suminput_list"},(0,i.kt)("inlineCode",{parentName:"h3"},"sum(input_list)")),(0,i.kt)("p",null,"Calculates the sum of list elements if they are of the same type and can be summed (numeric). If the types are not the same, an exception is thrown. "),(0,i.kt)("h4",{id:"input-1"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list: List[Any]")," \u27a1 list of elements to be summed up.")),(0,i.kt)("h4",{id:"output-1"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sum: double")," \u27a1 the sum of all elements in the input list.")),(0,i.kt)("h4",{id:"usage-1"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:A {id:5});\nMATCH (a:A) CALL collections.sum([1, 2.3, -4, a.id]) YIELD sum RETURN sum;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+----------------------------+\n| sum                        |\n+----------------------------+\n| 4.3                        |\n+----------------------------+\n")),(0,i.kt)("h3",{id:"unioninput_list1-input_list2"},(0,i.kt)("inlineCode",{parentName:"h3"},"union(input_list1, input_list2)")),(0,i.kt)("p",null,"Unites two lists into one, eliminating duplicates."),(0,i.kt)("h4",{id:"input-2"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list1: List[Any]")," \u27a1 the first list of elements to be united with another list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list2: List[Any]")," \u27a1 the second list of elements to be united with another list.")),(0,i.kt)("h4",{id:"output-2"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"union: List[Any]")," \u27a1 the union of the inputed lists.")),(0,i.kt)("h4",{id:"usage-2"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.union([0, 1, 2, 3], [2, 2, 3, 4, 5]) YIELD union RETURN union;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+----------------------------+\n| union                      |\n+----------------------------+\n| [0, 1, 2, 3, 4, 5]         |\n+----------------------------+\n")),(0,i.kt)("h3",{id:"sortinput_list"},(0,i.kt)("inlineCode",{parentName:"h3"},"sort(input_list)")),(0,i.kt)("p",null,"Sorts the elements of an input list if they are of the same type. If they are not of the same type, an exception is thrown."),(0,i.kt)("h4",{id:"input-3"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list: List[Any]")," \u27a1 list of elements to be sorted.")),(0,i.kt)("h4",{id:"output-3"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sorted: List[Any]")," \u27a1 list with sorted elements.")),(0,i.kt)("h4",{id:"usage-3"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.sort([1, 4, 2.3, -5]) YIELD sorted RETURN sorted;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+----------------------------+\n| sorted                     |\n+----------------------------+\n| [-5, 1, 2.3, 4]            |\n+----------------------------+\n")),(0,i.kt)("h3",{id:"contains_sortedinput_list-element"},(0,i.kt)("inlineCode",{parentName:"h3"},"contains_sorted(input_list, element)")),(0,i.kt)("p",null,"Verifies the presence of a certain element in a sorted list. If an unsorted list is passed, there is no guarantee that the result will be correct. For the input list to be sorted, its elements must be comparable and of the same type."),(0,i.kt)("h4",{id:"input-4"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list: List[Any]")," \u27a1 the target list for element search."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"element: Any")," \u27a1 the element being searched for.")),(0,i.kt)("h4",{id:"output-4"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contains: bool")," \u27a1 ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the element was found, ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,i.kt)("h4",{id:"usage-4"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.contains_sorted([1, 2, 3.3, 4.4, 5], 2) YIELD contains RETURN contains;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+----------------------------+\n| contains                   |\n+----------------------------+\n| true                       |\n+----------------------------+\n")),(0,i.kt)("h3",{id:"maxinput_list"},(0,i.kt)("inlineCode",{parentName:"h3"},"max(input_list)")),(0,i.kt)("p",null,"Finds the maximum element in an input list. List elements must be comparable, therefore the same type."),(0,i.kt)("h4",{id:"input-5"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list: List[Any]")," \u27a1 the list for finding the maximum element.")),(0,i.kt)("h4",{id:"output-5"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max: Any")," \u27a1 the maximum element of the input list.")),(0,i.kt)("h4",{id:"usage-5"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.max([-1, -2, -3.3]) YIELD max RETURN max;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+----------------------------+\n| max                        |\n+----------------------------+\n| -1                         |\n+----------------------------+\n")),(0,i.kt)("h3",{id:"pairsinput_list"},(0,i.kt)("inlineCode",{parentName:"h3"},"pairs(input_list)")),(0,i.kt)("p",null,"Creates pairs from the input list."),(0,i.kt)("h4",{id:"input-6"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_list: List[Any]")," \u27a1 the list used to create pairs.")),(0,i.kt)("h4",{id:"output-6"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pairs: List[Any]")," \u27a1 the list containing pairs of elements from the input list.")),(0,i.kt)("h4",{id:"usage-6"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL collections.pairs([3, "s", 4.4, [1, 2]]) YIELD pairs RETURN pairs;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},'+---------------------------------------------------------+\n| pairs                                                   |\n+---------------------------------------------------------+\n| [[3, "s"], ["s", 4.4], [4.4, [1, 2]], [[1, 2], null]]   |\n+---------------------------------------------------------+\n')),(0,i.kt)("h3",{id:"containslist-value"},(0,i.kt)("inlineCode",{parentName:"h3"},"contains(list, value)")),(0,i.kt)("p",null,"Verifies if the input value exists in the input list."),(0,i.kt)("h4",{id:"input-7"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list: List[Any]")," \u27a1 the input list on which ",(0,i.kt)("inlineCode",{parentName:"li"},"contains")," is called."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value: Any")," \u27a1 the input value that is being searched for in the list.")),(0,i.kt)("h4",{id:"output-7"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"output: boolean")," \u27a1 ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the value is present in the list, otherwise ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("h4",{id:"usage-7"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL collections.contains([1,2,3], "e") YIELD output RETURN output;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| output                                                  |\n+---------------------------------------------------------+\n| false                                                   |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"minlist"},(0,i.kt)("inlineCode",{parentName:"h3"},"min(list)")),(0,i.kt)("p",null,"Returns the minimum value within the list. Throws an exception if the elements in the list are not of a uniform data type or if the data type does not support comparison operations."),(0,i.kt)("h4",{id:"input-8"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list: List[Any]")," \u27a1 the input list on which the ",(0,i.kt)("inlineCode",{parentName:"li"},"min")," function is called.")),(0,i.kt)("h4",{id:"output-8"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min: Any")," \u27a1 the minimum value of the list.")),(0,i.kt)("h4",{id:"usage-8"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.min([1,2,3]) YIELD min RETURN min;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| min                                                     |\n+---------------------------------------------------------+\n| 1                                                       |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"unionalllist1-list2"},(0,i.kt)("inlineCode",{parentName:"h3"},"unionAll(list1, list2)")),(0,i.kt)("p",null,"Returns the union of two input lists, including duplicates."),(0,i.kt)("h4",{id:"input-9"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list1: List[Any]")," \u27a1 the first list to be used in the ",(0,i.kt)("inlineCode",{parentName:"li"},"unionAll")," operation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list2: List[Any]")," \u27a1 the second list to be used in the ",(0,i.kt)("inlineCode",{parentName:"li"},"unionAll")," operation.")),(0,i.kt)("h4",{id:"output-9"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"return_list: List[Any]")," \u27a1 the union of two lists, including duplicates.")),(0,i.kt)("h4",{id:"usage-9"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL collections.unionAll([1,1,2,3],[3,"a","b","c"]) YIELD return_list RETURN return_list;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},'+---------------------------------------------------------+\n| return_list                                             |\n+---------------------------------------------------------+\n| [1,1,2,3,3,"a","b","c"]                                 |\n+---------------------------------------------------------+\n')),(0,i.kt)("h3",{id:"to_setlist"},(0,i.kt)("inlineCode",{parentName:"h3"},"to_set(list)")),(0,i.kt)("p",null,"Converts the input list to a set."),(0,i.kt)("h4",{id:"input-10"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list: List[Any]")," \u27a1 the list that is to be converted into a set.")),(0,i.kt)("h4",{id:"output-10"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"result: List[Any]")," \u27a1 the set returned as an ",(0,i.kt)("inlineCode",{parentName:"li"},"mgp::List")," data type.")),(0,i.kt)("h4",{id:"usage-10"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.to_set([1,2,1,2,3]) YIELD result RETURN result;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| result                                                  |\n+---------------------------------------------------------+\n| [3,2,1]                                                 |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"partitionlist-partition_size"},(0,i.kt)("inlineCode",{parentName:"h3"},"partition(list, partition_size)")),(0,i.kt)("p",null,"Partitions the input list into sub-lists of the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"partition_size"),"."),(0,i.kt)("h4",{id:"input-11"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list: List[Any]")," \u27a1 the list that is to be partitioned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"partition_size: integer")," \u27a1 the size of the sub-lists.")),(0,i.kt)("h4",{id:"output-11"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"result: List[Any]")," \u27a1 the partitioned sub-lists.")),(0,i.kt)("h4",{id:"usage-11"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.partition([1,2,3,4,5,6],2) YIELD result RETURN result;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| result                                                  |\n+---------------------------------------------------------+\n| [1,2]                                                   |\n+---------------------------------------------------------+\n| [3,4]                                                   |\n+---------------------------------------------------------+\n| [5,6]                                                   |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"sum_longsnumbers"},(0,i.kt)("inlineCode",{parentName:"h3"},"sum_longs(numbers)")),(0,i.kt)("p",null,"Calculates the sum of list elements casted to integers. The initial list elements have to be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Numeric"),", or an exception is thrown."),(0,i.kt)("h4",{id:"input-12"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numbers: List[Any]")," \u27a1 list of numbers.")),(0,i.kt)("h4",{id:"output-12"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sum: integer")," \u27a1 sum of list elements.")),(0,i.kt)("h4",{id:"usage-12"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.sum_longs([1.9, 1.9]) YIELD sum RETURN sum;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| sum                                                     |\n+---------------------------------------------------------+\n| 2                                                       |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"avgnumbers"},(0,i.kt)("inlineCode",{parentName:"h3"},"avg(numbers)")),(0,i.kt)("p",null,"Calculates the average of list elements."),(0,i.kt)("h4",{id:"input-13"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numbers: List[Any]")," \u27a1 list of numbers.")),(0,i.kt)("h4",{id:"output-13"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"average: double")," \u27a1 average of list elements.")),(0,i.kt)("h4",{id:"usage-13"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.avg([5, 5, 6, 7, -5]) YIELD average RETURN average;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| average                                                 |\n+---------------------------------------------------------+\n| 3.6                                                     |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"contains_allcollection-values"},(0,i.kt)("inlineCode",{parentName:"h3"},"contains_all(collection, values)")),(0,i.kt)("p",null,"Checks if a list contains all the values from another list."),(0,i.kt)("h4",{id:"input-14"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"collection: List[Any]")," \u27a1 the target list for value search."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"values: List[Any]")," \u27a1 values being searched for in the target list.")),(0,i.kt)("h4",{id:"output-14"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contained: boolean")," \u27a1 true if all elements of ",(0,i.kt)("inlineCode",{parentName:"li"},"values")," are contained in the ",(0,i.kt)("inlineCode",{parentName:"li"},"collection"),".")),(0,i.kt)("h4",{id:"usage-14"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL collections.contains_all([1, 2, 3, "pero"], [1, 1, 1, 1, 2, 3]) YIELD contained RETURN contained;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| contained                                               |\n+---------------------------------------------------------+\n| true                                                    |\n+---------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"intersectionfirst-second"},(0,i.kt)("inlineCode",{parentName:"h3"},"intersection(first, second)")),(0,i.kt)("p",null,"Returns the unique intersection of two lists."),(0,i.kt)("h4",{id:"input-15"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"first: List[Any]")," \u27a1 the first list being used in ",(0,i.kt)("inlineCode",{parentName:"li"},"intersection"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"second: List[Any]")," \u27a1 the first list being used in ",(0,i.kt)("inlineCode",{parentName:"li"},"intersection"),".")),(0,i.kt)("h4",{id:"output-15"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"intersection: List[Any]")," \u27a1 unique intersection of the two lists.")),(0,i.kt)("h4",{id:"usage-15"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL collections.intersection([1, 1, 2, 3, 4, 5], [1, 1, 3, 5, 7, 9]) YIELD intersection RETURN intersection;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------------------------------------------+\n| intersection                                            |\n+---------------------------------------------------------+\n| [3, 5, 1]                                               |\n+---------------------------------------------------------+\n")))}c.isMDXComponent=!0},83523:(e,t,n)=>{n.d(t,{ZP:()=>u});var l=n(87462),i=(n(67294),n(3905));const a={toc:[]};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,l.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,i.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}u.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>u});var l=n(67294),i=n(86010);const a="tabItem_Ymn6";function u(e){let{children:t,hidden:n,className:u}=e;return l.createElement("div",{role:"tabpanel",className:(0,i.Z)(a,u),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var l=n(87462),i=n(67294),a=n(86010),u=n(12466),r=n(16550),o=n(91980),s=n(67392),p=n(50012);function d(e){return function(e){var t;return(null==(t=i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:l,default:i}}=e;return{value:t,label:n,attributes:l,default:i}}))}function c(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const l=(0,r.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(a),(0,i.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(l.location.search);t.set(a,e),l.replace({...l.location,search:t.toString()})}),[a,l])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:l}=e,a=c(e),[u,r]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:t,tabValues:a}))),[o,s]=k({queryString:n,groupId:l}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[l,a]=(0,p.Nk)(n);return[l,(0,i.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:l}),g=(()=>{const e=o??d;return m({value:e,tabValues:a})?e:null})();(0,i.useLayoutEffect)((()=>{g&&r(g)}),[g]);return{selectedValue:u,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);r(e),s(e),h(e)}),[s,h,a]),tabValues:a}}var g=n(72389);const v="tabList__CuJ",N="tabItem_LNqP";function f(e){let{className:t,block:n,selectedValue:r,selectValue:o,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,u.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),l=s[n].value;l!==r&&(d(t),o(l))},m=e=>{var t;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}null==(t=n)||t.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:u}=e;return i.createElement("li",(0,l.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},u,{className:(0,a.Z)("tabs__item",N,null==u?void 0:u.className,{"tabs__item--active":r===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:l}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===l));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==l}))))}function b(e){const t=h(e);return i.createElement("div",{className:(0,a.Z)("tabs-container",v)},i.createElement(f,(0,l.Z)({},e,t)),i.createElement(y,(0,l.Z)({},e,t)))}function C(e){const t=(0,g.Z)();return i.createElement(b,(0,l.Z)({key:String(t)},e))}}}]);