"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27434],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return m}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),c=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return n?t.createElement(g,l(l({ref:r},s),{},{components:n})):t.createElement(g,l({ref:r},s))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var u={};for(var i in r)hasOwnProperty.call(r,i)&&(u[i]=r[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,l[1]=u;for(var c=2;c<a;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9170:function(e,r,n){n.r(r),n.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),l=n(23082),u=n(95707),i=["components"],c={id:"calling-procedures",title:"How to call MAGE procedures?",sidebar_label:"Calling procedures"},s=void 0,p={unversionedId:"usage/calling-procedures",id:"usage/calling-procedures",title:"How to call MAGE procedures?",description:"Once the MAGE query modules, or any custom modules you developed have been",source:"@site/mage/usage/calling-procedures.md",sourceDirName:"usage",slug:"/usage/calling-procedures",permalink:"/docs/mage/usage/calling-procedures",editUrl:"https://github.com/memgraph/docs/tree/master/mage/usage/calling-procedures.md",tags:[],version:"current",frontMatter:{id:"calling-procedures",title:"How to call MAGE procedures?",sidebar_label:"Calling procedures"},sidebar:"mage",previous:{title:"Loading query modules",permalink:"/docs/mage/usage/loading-modules"},next:{title:"Available query modules",permalink:"/docs/mage/query-modules/available-queries"}},d={},m=[{value:"Calling query modules",id:"calling-query-modules",level:2},{value:"Controlling procedure memory usage",id:"controlling-procedure-memory-usage",level:2}],g={toc:m};function h(e){var r=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},g,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once the MAGE query modules, or any custom modules you developed have been\nloaded into Memgraph, you can start executing them by calling them."),(0,a.kt)("h2",{id:"calling-query-modules"},"Calling query modules"),(0,a.kt)(l.ZP,{mdxType:"Calling"}),(0,a.kt)("h2",{id:"controlling-procedure-memory-usage"},"Controlling procedure memory usage"),(0,a.kt)(u.ZP,{mdxType:"Controlling"}))}h.isMDXComponent=!0},23082:function(e,r,n){n.d(r,{ZP:function(){return i}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),l=["components"],u={toc:[]};function i(e){var r=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once the MAGE query modules or any custom modules you developed have been\nloaded into Memgraph, you can call them within queries using the following Cypher\nsyntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL module.procedure([optional parameter], arg1, "string_argument", ...) YIELD res1, res2, ...;\n')),(0,a.kt)("p",null,"Every procedure has a first optional parameter and the rest of them depend on the procedure you are trying to call. The optional parameter must be result of the aggregation function ",(0,a.kt)("a",{parentName:"p",href:"/cypher-manual/functions#aggregation-functions"},(0,a.kt)("inlineCode",{parentName:"a"},"project()")),". If such a parameter is provided, ",(0,a.kt)("strong",{parentName:"p"},"all")," operations will be executed on a projected graph. Otherwise, you will work on the whole graph stored inside Memgraph. "),(0,a.kt)("p",null,"Each procedure returns zero or more records, where each record contains named\nfields. The ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause is used to select fields you are interested in or all\nof them (*). If you are not interested in any fields, omit the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause.\nThe procedure will still run, but the record fields will not be stored in\nvariables. If you are trying to ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," fields that are not a part of the\nproduced record, the query will result in an error."),(0,a.kt)("p",null,"Procedures can be standalone as in the example above, or a part of a larger\nquery when we want the procedure to work on data the query is\nproducing. "),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(node) YIELD result RETURN *;\n")),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause is a part of a larger query, results from the query are\nreturned using the ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," clause. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause is followed by a clause\nthat only updates the data and doesn't read it, ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," is unnecessary. It is\nthe Cypher convention that read-only queries need to end with a ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN"),", while\nqueries that update something don't need to ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," anything."),(0,a.kt)("p",null,"Also, if the procedure itself writes into the database, all the rest of the\nclauses in the query can only read from the database, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause can\nonly be followed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," clause. "),(0,a.kt)("p",null,"If a procedure returns a record with the same field name as some variable we\nalready have in the query, that field name can be aliased with some other name\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"AS")," sub-clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (result) CALL module.procedure(42) YIELD result AS procedure_result RETURN *;\n")))}i.isMDXComponent=!0},95707:function(e,r,n){n.d(r,{ZP:function(){return i}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),l=["components"],u={toc:[]};function i(e){var r=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When running a procedure, Memgraph controls the maximum memory usage that the\nprocedure may consume during its execution.  By default, the upper memory limit\nwhen running a procedure is ",(0,a.kt)("inlineCode",{parentName:"p"},"100 MB"),".  If your query procedure requires more\nmemory to yield its results, you can increase the memory limit using the\nfollowing syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 KB YIELD result;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 MB YIELD result;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY UNLIMITED YIELD result;\n")),(0,a.kt)("p",null,"The limit can either be specified to a specific value (either in ",(0,a.kt)("inlineCode",{parentName:"p"},"KB")," or in\n",(0,a.kt)("inlineCode",{parentName:"p"},"MB"),"), or it can be set to unlimited."))}i.isMDXComponent=!0}}]);