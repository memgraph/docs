"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34177],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(r),m=a,g=h["".concat(s,".").concat(m)]||h[m]||p[m]||o;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},93451:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],l={id:"graph-algorithms",title:"Graph algorithms",sidebar_label:"Graph algorithms"},s=void 0,u={unversionedId:"graph-algorithms",id:"graph-algorithms",title:"Graph algorithms",description:"The real power of graph databases comes from graph algorithms. In Memgraph,",source:"@site/cypher-manual/graph-algorithms.md",sourceDirName:".",slug:"/graph-algorithms",permalink:"/docs/cypher-manual/graph-algorithms",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/graph-algorithms.md",tags:[],version:"current",frontMatter:{id:"graph-algorithms",title:"Graph algorithms",sidebar_label:"Graph algorithms"},sidebar:"cypher_manual",previous:{title:"Functions",permalink:"/docs/cypher-manual/functions"},next:{title:"Query modules",permalink:"/docs/cypher-manual/query-modules"}},c={},p=[],h={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The real power of graph databases comes from graph algorithms. In Memgraph,\nseveral algorithms are part of the query engine. This means that you can use\nthem directly in your Cypher queries. You can use them within\n",(0,o.kt)("a",{parentName:"p",href:"/docs/cypher-manual/clauses/match"},(0,o.kt)("inlineCode",{parentName:"a"},"MATCH"))," clause to obtain data from the database."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/built-in-graph-algorithms"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=Reference%20Guide&color=yellow&style=for-the-badge",alt:"Related - Reference\nGuide"}))),(0,o.kt)("p",null,"The built-in algorithms are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Filtering Variable Length Paths")," - you can filter the data through lambda\nfunctions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Breadth First Search")," - you can use it for searching the shortest path\nbetween nodes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Weighted Shortest Path")," - you can use it for searching the weighted\nshortest path between nodes")),(0,o.kt)("p",null,"Take a look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/built-in-graph-algorithms"},"Graph algorithms in our reference\nmanual")," for code examples. "),(0,o.kt)("p",null,"If Memgraph's built-in algorithms are not enough for you, don't worry, we've got\nyou covered. We have developed ",(0,o.kt)("a",{parentName:"p",href:"/mage"},"MAGE")," - a graph library that extends\nMemgraph with additional algorithms and utility modules. Be sure to check it\nout!"))}m.isMDXComponent=!0}}]);