"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81505],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},64869:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const l={sidebar_label:"memgraph_query_builder",title:"gqlalchemy.query_builders.memgraph_query_builder"},i=void 0,o={unversionedId:"reference/query_builders/memgraph_query_builder",id:"reference/query_builders/memgraph_query_builder",title:"gqlalchemy.query_builders.memgraph_query_builder",description:"QueryBuilder Objects",source:"@site/gqlalchemy/reference/query_builders/memgraph_query_builder.md",sourceDirName:"reference/query_builders",slug:"/reference/query_builders/memgraph_query_builder",permalink:"/docs/gqlalchemy/reference/query_builders/memgraph_query_builder",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/query_builders/memgraph_query_builder.md",tags:[],version:"current",frontMatter:{sidebar_label:"memgraph_query_builder",title:"gqlalchemy.query_builders.memgraph_query_builder"},sidebar:"gqlalchemy",previous:{title:"declarative_base",permalink:"/docs/gqlalchemy/reference/query_builders/declarative_base"},next:{title:"graph_transporter",permalink:"/docs/gqlalchemy/reference/transformations/export/graph_transporter"}},p={},s=[{value:"QueryBuilder Objects",id:"querybuilder-objects",level:2},{value:"load_csv",id:"load_csv",level:4},{value:"call",id:"call",level:4},{value:"ProjectPartialQuery Objects",id:"projectpartialquery-objects",level:2},{value:"construct_query",id:"construct_query",level:4}],u={toc:s};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"querybuilder-objects"},"QueryBuilder Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class QueryBuilder(DeclarativeBase)\n")),(0,a.kt)("h4",{id:"load_csv"},"load","_","csv"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def load_csv(path: str, header: bool, row: str) -> "DeclarativeBase"\n')),(0,a.kt)("p",null,"Load data from a CSV file by executing a Cypher query for each row."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path")," - A string representing the path to the CSV file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"header")," - A bool indicating if the CSV file starts with a header row."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"row")," - A string representing the name of the variable for iterating\nover each row.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A ",(0,a.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples"),":"),(0,a.kt)("p",null,"  Load CSV with header:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"load_csv(path=&quot;path/to/my/file.csv&quot;, header=True, row=&quot;row&quot;).return_().execute()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD CSV FROM &#x27;path/to/my/file.csv&#x27; WITH HEADER AS row RETURN *;")),(0,a.kt)("p",{parentName:"li"},"Load CSV without header:")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"load_csv(path=&#x27;path/to/my/file.csv&#x27;, header=False, row=&#x27;row&#x27;).return_().execute()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD CSV FROM &#x27;path/to/my/file.csv&#x27; NO HEADER AS row RETURN *;")))),(0,a.kt)("h4",{id:"call"},"call"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def call(procedure: str,\n         arguments: Optional[Union[str, Tuple[Union[str, int, float]]]] = None,\n         node_labels: Optional[Union[str, List[List[str]]]] = None,\n         relationship_types: Optional[Union[str, List[List[str]]]] = None,\n         relationship_directions: Optional[\n             Union[RelationshipDirection,\n                   List[RelationshipDirection]]] = RelationshipDirection.RIGHT,\n         subgraph_path: str = None) -> "DeclarativeBase"\n')),(0,a.kt)("p",null,"Override of base class method to support Memgraph","'","s subgraph functionality."),(0,a.kt)("p",null,"Method can be called with node labels and relationship types, both being optional, which are used to construct\na subgraph, or if neither is provided, a subgraph query is used, which can be passed as a string representing a\nCypher query defining the MATCH clause which selects the nodes and relationships to use."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"procedure")," - A string representing the name of the procedure in the\nformat ",(0,a.kt)("inlineCode",{parentName:"li"},"query_module.procedure"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arguments")," - A string representing the arguments of the procedure in\ntext format."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node_labels")," - Either a string, which is then used as the label for all nodes, or\na list of lists defining all labels for every node"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"relationship_types")," - Types of relationships to be used in the subgraph. Either a\nsingle type or a list of lists defining all types for every relationship"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"relationship_directions")," - Directions of the relationships."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subgraph_path")," - Optional way to define the subgraph via a Cypher MATCH clause.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A ",(0,a.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Python")," - `call(","'","export_util.json","'",", ","'","/home/user","'",", ",'"',"LABEL",'"',", ",'["',"TYPE1",'"',", ",'"',"TYPE2",'"]',").execute()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"MATCH p=(a)-[:TYPE1 | :TYPE2]-&gt;(b) WHERE (a:LABEL) AND (b:LABEL)\nWITH project(p) AS graph CALL export_util.json(graph, &#x27;/home/user&#x27;)")),(0,a.kt)("p",{parentName:"li"},"or")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Python")," - `call(","'","export_util.json","'",", ","'","/home/user","'",", subgraph_path=",'"',"(:LABEL)-","[:TYPE]","-",">","(:LABEL)",'"',").execute()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"MATCH p=(:LABEL)-[:TYPE1]-&gt;(:LABEL) WITH project(p) AS graph\nCALL export_util.json(graph, &#x27;/home/user&#x27;)")))),(0,a.kt)("h2",{id:"projectpartialquery-objects"},"ProjectPartialQuery Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ProjectPartialQuery(PartialQuery)\n")),(0,a.kt)("h4",{id:"construct_query"},"construct","_","query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,a.kt)("p",null,"Constructs a Project partial querty."),(0,a.kt)("p",null,"Given path part of a query (e.g. (:LABEL)-","[:TYPE]","-",">","(:LABEL2)),\nadds MATCH, a path identifier and appends the WITH clause."))}c.isMDXComponent=!0}}]);