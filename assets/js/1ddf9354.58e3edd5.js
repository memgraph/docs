(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1158],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},24183:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return i},default:function(){return s}});var r=n(22122),a=n(19756),l=(n(67294),n(3905)),o={id:"distance-calculator",title:"The distance_calculator module",sidebar_label:"distance_calculator"},c={unversionedId:"query-modules/python/distance-calculator",id:"query-modules/python/distance-calculator",isDocsHomePage:!1,title:"The distance_calculator module",description:"single(context, start, end, metrics)",source:"@site/mage/query-modules/python/distance-calculator.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/distance-calculator",permalink:"/mage/query-modules/python/distance-calculator",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/distance-calculator.md",version:"current",sidebar_label:"distance_calculator",frontMatter:{id:"distance-calculator",title:"The distance_calculator module",sidebar_label:"distance_calculator"},sidebar:"mage",previous:{title:"How to call MAGE procedures?",permalink:"/mage/usage/calling-procedures"},next:{title:"The graph_analyzer module",permalink:"/mage/query-modules/python/graph-analyzer"}},i=[{value:"<code>single(context, start, end, metrics)</code>",id:"singlecontext-start-end-metrics",children:[]},{value:"<code>multiple(context, start_points, end_points, metrics)</code>",id:"multiplecontext-start_points-end_points-metrics",children:[]}],u={toc:i};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"singlecontext-start-end-metrics"},(0,l.kt)("inlineCode",{parentName:"h2"},"single(context, start, end, metrics)")),(0,l.kt)("p",null,"This distance calculator procedure  for one entry returns 1 field."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"distance")," is the final result obtained by calculating distance (in meters)\nbetween the 2 points who each have its latitude and longitude.")),(0,l.kt)("p",null,"The procedure can be invoked in Cypher using the following calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL distance_calculator.single((:Point {lat:1, lng:2}), (:Point {lat:2, lng:3.5})) \nYIELD distance;\nMATCH (n1:Point), (n2:Point) \nCALL distance_calculator.procedure(n, 1) \nYIELD * \nRETURN *;\n")),(0,l.kt)("h2",{id:"multiplecontext-start_points-end_points-metrics"},(0,l.kt)("inlineCode",{parentName:"h2"},"multiple(context, start_points, end_points, metrics)")),(0,l.kt)("p",null,"This distance calculator procedure  for multiple entries returns 1 field."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"distances")," is the final result obtained by calculating distances (in meters)\nbetween pairs of points who each have its latitude and longitude")),(0,l.kt)("p",null,"The procedure can be invoked in openCypher using the following calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL distance_calculator.multiple([(:Point {lat:1, lng:2})]), [(:Point {lat:3,lng:4.5})])) \nYIELD distances;\n")))}s.isMDXComponent=!0}}]);