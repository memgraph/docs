"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},h=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,_=u["".concat(s,".").concat(c)]||u[c]||d[c]||i;return n?r.createElement(_,l(l({ref:t},h),{},{components:n})):r.createElement(_,l({ref:t},h))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_label:"integrated_algorithms",title:"gqlalchemy.graph_algorithms.integrated_algorithms"},l=void 0,o={unversionedId:"reference/graph_algorithms/integrated_algorithms",id:"reference/graph_algorithms/integrated_algorithms",title:"gqlalchemy.graph_algorithms.integrated_algorithms",description:"IntegratedAlgorithm Objects",source:"@site/gqlalchemy/reference/graph_algorithms/integrated_algorithms.md",sourceDirName:"reference/graph_algorithms",slug:"/reference/graph_algorithms/integrated_algorithms",permalink:"/docs/gqlalchemy/reference/graph_algorithms/integrated_algorithms",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/graph_algorithms/integrated_algorithms.md",tags:[],version:"current",frontMatter:{sidebar_label:"integrated_algorithms",title:"gqlalchemy.graph_algorithms.integrated_algorithms"},sidebar:"gqlalchemy",previous:{title:"utilities",permalink:"/docs/gqlalchemy/reference/utilities"},next:{title:"query_builder",permalink:"/docs/gqlalchemy/reference/graph_algorithms/query_builder"}},s={},p=[{value:"IntegratedAlgorithm Objects",id:"integratedalgorithm-objects",level:2},{value:"__str__",id:"__str__",level:4},{value:"to_cypher_lambda",id:"to_cypher_lambda",level:4},{value:"BreadthFirstSearch Objects",id:"breadthfirstsearch-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"__str__",id:"__str__-1",level:4},{value:"to_cypher_bounds",id:"to_cypher_bounds",level:4},{value:"DepthFirstSearch Objects",id:"depthfirstsearch-objects",level:2},{value:"__init__",id:"__init__-1",level:4},{value:"__str__",id:"__str__-2",level:4},{value:"to_cypher_bounds",id:"to_cypher_bounds-1",level:4},{value:"WeightedShortestPath Objects",id:"weightedshortestpath-objects",level:2},{value:"__init__",id:"__init__-2",level:4}],h={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"integratedalgorithm-objects"},"IntegratedAlgorithm Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class IntegratedAlgorithm(ABC)\n")),(0,a.kt)("p",null,"Abstract class modeling Memgraph","'","s built-in graph algorithms."),(0,a.kt)("p",null,"These algorithms are integrated into Memgraph","'","s codebase and are called\nwithin a relationship part of a query. For instance:\nMATCH p = (:City {name: ",'"',"Paris",'"',"})\n-","[:Road * bfs (r, n | r.length ","<","= 200 AND n.name != ",'"',"Metz",'"',")]","-",">","\n(:City {name: ",'"',"Berlin",'"',"})"),(0,a.kt)("h4",{id:"__str__"},"_","_","str","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef __str__() -> str\n")),(0,a.kt)("p",null,"Instance of IntegratedAlgorithm subclass is used as a string"),(0,a.kt)("h4",{id:"to_cypher_lambda"},"to","_","cypher","_","lambda"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef to_cypher_lambda(expression: str) -> str\n")),(0,a.kt)("p",null,"Method for creating a general lambda expression."),(0,a.kt)("p",null,"Variables ",(0,a.kt)("inlineCode",{parentName:"p"},"r")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," stand for relationship and node. The expression is\nused e.g. for a filter lambda, to use only relationships of length less\nthan 200:\nexpression=",'"',"r.length ","<"," 200",'"',"\nwith the filter lambda being:\n(r, n | r.length ","<"," 200)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expression")," - Lambda conditions or statements.")),(0,a.kt)("h2",{id:"breadthfirstsearch-objects"},"BreadthFirstSearch Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class BreadthFirstSearch(IntegratedAlgorithm)\n")),(0,a.kt)("p",null,"Build a BFS call for a Cypher query."),(0,a.kt)("p",null,"The Breadth-first search can be called in Memgraph with Cypher queries such\nas: ",(0,a.kt)("inlineCode",{parentName:"p"},"MATCH (a {id: 723})-[*BFS ..10 (r, n | r.x &gt; 12 AND n.y &lt; 3)]-() RETURN *;"),"\nIt is called inside the relationship clause, ",(0,a.kt)("inlineCode",{parentName:"p"},"*BFS")," naming the algorithm,\n",(0,a.kt)("inlineCode",{parentName:"p"},"..10")," specifying depth bounds, and ",(0,a.kt)("inlineCode",{parentName:"p"},"(r, n | &lt;expression&gt;)")," is a filter\nlambda."),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(lower_bound: int = None, upper_bound: int = None, condition: str = None) -> None\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lower_bound")," - Lower bound for path depth. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"upper_bound")," - Upper bound for path depth. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"condition")," - Filter through nodes and relationships that pass this\ncondition. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),".")),(0,a.kt)("h4",{id:"__str__-1"},"_","_","str","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,a.kt)("p",null,"Get a Cypher query string for this algorithm."),(0,a.kt)("h4",{id:"to_cypher_bounds"},"to","_","cypher","_","bounds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_bounds() -> str\n")),(0,a.kt)("p",null,"If bounds are specified, returns them in grammar-defined form."),(0,a.kt)("h2",{id:"depthfirstsearch-objects"},"DepthFirstSearch Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class DepthFirstSearch(IntegratedAlgorithm)\n")),(0,a.kt)("p",null,"Build a DFS call for a Cypher query.\nThe Depth-First Search can be called in Memgraph with Cypher queries\nsuch as:\nMATCH (a {id: 723})-","[* ..10 (r, n | r.x ",">"," 12 AND n.y ","<"," 3)]","-() RETURN ",(0,a.kt)("em",{parentName:"p"},";\nIt is called inside the relationship clause, ",'"'),'"'," naming the algorithm\n(",'"',"*",'"'," without ",'"',"DFS",'"'," because it is defined like such in openCypher),\n",'"',"..10",'"'," specifying depth bounds, and ",'"',"(r, n | ","<","expression",">",")",'"'," is a filter\nlambda."),(0,a.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(lower_bound: int = None, upper_bound: int = None, condition: str = None) -> None\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lower_bound")," - Lower bound for path depth. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"upper_bound")," - Upper bound for path depth. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"condition")," - Filter through nodes and relationships that pass this\ncondition. Defaults to None.")),(0,a.kt)("h4",{id:"__str__-2"},"_","_","str","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,a.kt)("p",null,"get Cypher query string for this algorithm."),(0,a.kt)("h4",{id:"to_cypher_bounds-1"},"to","_","cypher","_","bounds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_bounds() -> str\n")),(0,a.kt)("p",null,"If bounds are specified, returns them in grammar-defined form."),(0,a.kt)("h2",{id:"weightedshortestpath-objects"},"WeightedShortestPath Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class WeightedShortestPath(IntegratedAlgorithm)\n")),(0,a.kt)("p",null,"Build a Djikstra shortest path call for a Cypher query\nThe weighted shortest path algorithm can be called in Memgraph with Cypher\nqueries such as:\n",'"'," MATCH (a {id: 723})-","[r *WSHORTEST 10 (r, n | r.weight) weight_sum\n(r, n | r.x ",">"," 12 AND r.y ","<"," 3)]","-(b {id: 882}) RETURN ",(0,a.kt)("em",{parentName:"p"}," ",'"',"\nIt is called inside the relationship clause, ",'"'),"WSHORTEST",'"'," naming the\nalgorithm, ",'"',"10",'"'," specifying search depth bounds, and ",'"',"(r, n | ","<","expression",">",")",'"',"\nis a filter lambda, used to filter which relationships and nodes to use."),(0,a.kt)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(upper_bound: int = None, condition: str = None, total_weight_var: str = DEFAULT_TOTAL_WEIGHT, weight_property: str = DEFAULT_WEIGHT_PROPERTY) -> None\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"upper_bound")," - Upper bound for path depth. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"condition")," - Filter through nodes and relationships that pass this\ncondition. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"total_weight_var")," - Variable defined as the sum of all weights on\npath being returned. Defaults to ",'"',"total_weight",'"',"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"weight_property")," - property being used as weight. Defaults to\n",'"',"r.weight",'"',".")))}d.isMDXComponent=!0}}]);