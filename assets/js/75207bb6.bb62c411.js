"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60717],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),g=s(r),u=a,m=g["".concat(p,".").concat(u)]||g[u]||l[u]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},16058:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={id:"set-up-triggers",title:"How to set up triggers",sidebar_label:"Set up triggers"},i=void 0,d={unversionedId:"how-to-guides/set-up-triggers",id:"version-2.4.2/how-to-guides/set-up-triggers",title:"How to set up triggers",description:"Memgraph supports database triggers that can be executed if a particular",source:"@site/memgraph_versioned_docs/version-2.4.2/how-to-guides/set-up-triggers.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/set-up-triggers",permalink:"/docs/memgraph/2.4.2/how-to-guides/set-up-triggers",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.4.2/how-to-guides/set-up-triggers.md",tags:[],version:"2.4.2",frontMatter:{id:"set-up-triggers",title:"How to set up triggers",sidebar_label:"Set up triggers"},sidebar:"memgraph",previous:{title:"Work with indexes",permalink:"/docs/memgraph/2.4.2/how-to-guides/indexes"},next:{title:"Manage authentication and authorization",permalink:"/docs/memgraph/2.4.2/how-to-guides/manage-users-using-ldap"}},p={},s=[{value:"How to create a trigger?",id:"how-to-create-a-trigger",level:2},{value:"Trigger execution upon node creation",id:"trigger-execution-upon-node-creation",level:3},{value:"Trigger execution upon node update",id:"trigger-execution-upon-node-update",level:3},{value:"Trigger execution upon node or relationship creation",id:"trigger-execution-upon-node-or-relationship-creation",level:3},{value:"How to create a trigger for Python query module?",id:"how-to-create-a-trigger-for-python-query-module",level:2},{value:"How to create a trigger for dynamic algorithms?",id:"how-to-create-a-trigger-for-dynamic-algorithms",level:2}],c={toc:s};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Memgraph supports ",(0,a.kt)("strong",{parentName:"p"},"database triggers")," that can be executed if a particular\ntype of event occurs. Events are related to changes in data, such as created,\nupdated, and deleted nodes or relationships. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.4.2/reference-guide/triggers"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=Reference%20Guide&color=yellow&style=for-the-badge",alt:"Related - Reference Guide"}))," "),(0,a.kt)("h2",{id:"how-to-create-a-trigger"},"How to create a trigger?"),(0,a.kt)("p",null,"You can create a trigger by executing Cypher clauses. Creating a trigger will\nensure that some procedural code is executed on a certain type of event. All\ncreated triggers are persisted on the disk, which means they will be active on\ndatabase reruns and no information is ever lost."),(0,a.kt)("h3",{id:"trigger-execution-upon-node-creation"},"Trigger execution upon node creation"),(0,a.kt)("p",null,"Node creation is the most common event your Memgraph database can react to. For\nexample, you need to update some values on a created node. If you need a trigger\nafter the node (vertex) has been created, you can set up the following trigger: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER createVertex\nON () CREATE AFTER COMMIT EXECUTE\nUNWIND createdVertices AS createdVertex\nSET createdVertex.created = timestamp()\n")),(0,a.kt)("p",null,"Here the trigger's name is ",(0,a.kt)("inlineCode",{parentName:"p"},"createdVertex")," and should be unique. Cypher clause\n",(0,a.kt)("inlineCode",{parentName:"p"},"ON CREATE")," defines on what event will trigger be executed. ",(0,a.kt)("inlineCode",{parentName:"p"},"AFTER COMMIT\nEXECUTE")," means the trigger will be executed after changes have been committed to\nthe database. For the sake of ease of use, triggers have a set of ",(0,a.kt)("strong",{parentName:"p"},"predefined\nvariables"),". One of them is ",(0,a.kt)("inlineCode",{parentName:"p"},"createdVertices"),", a list of all created nodes\n(vertices). In this example, the list is unwound by a Cypher clause ",(0,a.kt)("inlineCode",{parentName:"p"},"UNWIND"),". To\nfind a complete list of predefined variables, supported operations, and\nconfiguration details, look at triggers ",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.4.2/reference-guide/triggers"},"reference\nguide"),"."),(0,a.kt)("p",null,"In this trigger, a node is getting a timestamp upon creation via the ",(0,a.kt)("inlineCode",{parentName:"p"},"SET\ncreatedVertex.created = timestamp()")," Cypher clause."),(0,a.kt)("h3",{id:"trigger-execution-upon-node-update"},"Trigger execution upon node update"),(0,a.kt)("p",null,"Node property updates are common in graphs, in order to react to them, you can\ncreate a trigger for that type of event: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER updateVertex\nON () UPDATE AFTER COMMIT EXECUTE\nUNWIND updatedVertices AS updatedVertex\nSET updatedVertex.updated_at = timestamp()\n\n")),(0,a.kt)("p",null,"The trigger for node updates is almost the same as node creation. Notice\ndifferent predefined variable ",(0,a.kt)("inlineCode",{parentName:"p"},"updatedVertices")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ON UPDATE")," Cypher clause."),(0,a.kt)("p",null,"In this trigger, a node is getting a new updated timestamp via ",(0,a.kt)("inlineCode",{parentName:"p"},"SET\nupdatedVertex.updated_at = timestamp()")," Cypher clause."),(0,a.kt)("h3",{id:"trigger-execution-upon-node-or-relationship-creation"},"Trigger execution upon node or relationship creation"),(0,a.kt)("p",null,"You can also set up a trigger for multiple events, such as node or relationship\ncreation. It doesn't matter what will be created, a node or relationship, but\nthe event will execute the trigger. A sample query for that kind of trigger: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER exampleTrigger\nON CREATE AFTER COMMIT EXECUTE\nUNWIND createdObjects AS createdObject\nWITH CASE\n        WHEN createdObject.vertex IS NOT null THEN createdObject.vertex\n        WHEN createdObject.edge IS NOT null THEN createdObject.edge\n    END AS object\nSET object.created_at = timestamp();\n")),(0,a.kt)("p",null,"A predefined variable ",(0,a.kt)("inlineCode",{parentName:"p"},"createdObjects")," is a list of dictionaries. Each\ndictionary contains information about the created object, which can be either a\nnode or a relationship. The object's key ",(0,a.kt)("inlineCode",{parentName:"p"},"event_type")," is set based on the\ndictionary and information within it, and the value of the key ",(0,a.kt)("inlineCode",{parentName:"p"},"vertex")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"edge"),"\n(depending on the type of object) is set to that created object."),(0,a.kt)("p",null,"In this trigger, the node or relationships property ",(0,a.kt)("inlineCode",{parentName:"p"},"created_at")," is set to the\ncurrent timestamp value via ",(0,a.kt)("inlineCode",{parentName:"p"},"SET object.created_at = timestamp();")," Cypher\nclause. "),(0,a.kt)("h2",{id:"how-to-create-a-trigger-for-python-query-module"},"How to create a trigger for Python query module?"),(0,a.kt)("p",null,"If you want a trigger to be activated by executing code from a Python query\nmodule, you can call the query module from the trigger. In the example below,\nthe trigger will call ",(0,a.kt)("inlineCode",{parentName:"p"},"query_module.new_edge(edge)")," each time a new relationship\n(edge) is created:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER newEdge\nON CREATE BEFORE COMMIT EXECUTE\nUNWIND createdEdges AS edge\nCALL query_module.new_edge(edge) YIELD *;\n")),(0,a.kt)("p",null,"Make sure your function accepts the proper Memgraph type, ",(0,a.kt)("inlineCode",{parentName:"p"},"mgp.Edge")," in this\ncase. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def new_edge(\n    context: mgp.ProcCtx,\n    edge: mgp.Edge\n)\n")),(0,a.kt)("p",null,"Memgraph Python API is defined by ",(0,a.kt)("inlineCode",{parentName:"p"},"mgp.py")," script, and in it, you can find all\nsupported types such as ",(0,a.kt)("inlineCode",{parentName:"p"},"mgp.Edge"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mgp.Vertex")," etc. If you want to explore the\nAPI further, feel free to check the reference guide on ",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.4.2/reference-guide/query-modules/api/python-api"},"Python\nAPI"),"."),(0,a.kt)("h2",{id:"how-to-create-a-trigger-for-dynamic-algorithms"},"How to create a trigger for dynamic algorithms?"),(0,a.kt)("p",null,"Dynamic algorithms are often designed for dataset updates. With a trigger, you\ncan ensure that any dataset is up to date and consistent. In the sample code\nbelow, a trigger is set to use MAGE ",(0,a.kt)("inlineCode",{parentName:"p"},"pagerank_online")," algorithm. For more\ndetails on dynamic algorithms, visit ",(0,a.kt)("a",{parentName:"p",href:"/mage/query-modules/available-queries"},"MAGE\ndocs"),". In this\ncase, all created or deleted objects are passed from the database transaction to\nthe trigger. After each transaction that has created or deleted objects, the\ntrigger will automatically execute the PageRank algorithm and update the rank\nproperty. This will ensure data consistency and lead to performance benefits. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER pagerank_trigger \nBEFORE COMMIT \nEXECUTE CALL pagerank_online.update(createdVertices, createdEdges, deletedVertices, deletedEdges) \nYIELD node, rank\nSET node.rank = rank;\n")))}l.isMDXComponent=!0}}]);