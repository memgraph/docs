"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[97114],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},63996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i={id:"gss-variables",title:"Graph Style Script built-in variables",sidebar_label:"GSS variables"},l=void 0,o={unversionedId:"style-script/gss-variables",id:"style-script/gss-variables",title:"Graph Style Script built-in variables",description:"Graph Style Script has a few built-in variables that you can use.",source:"@site/lab/style-script/gss-variables.md",sourceDirName:"style-script",slug:"/style-script/gss-variables",permalink:"/docs/memgraph-lab/style-script/gss-variables",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/lab/style-script/gss-variables.md",tags:[],version:"current",frontMatter:{id:"gss-variables",title:"Graph Style Script built-in variables",sidebar_label:"GSS variables"},sidebar:"lab",previous:{title:"GSS functions",permalink:"/docs/memgraph-lab/style-script/gss-functions"},next:{title:"EdgeStyle directive properties",permalink:"/docs/memgraph-lab/style-script/gss-edgestyle-directive"}},p={},d=[{value:"<code>node</code>",id:"node",level:2},{value:"<code>edge</code>",id:"edge",level:2},{value:"<code>graph</code>",id:"graph",level:2}],s={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Graph Style Script has a few built-in variables that you can use."),(0,a.kt)("h2",{id:"node"},(0,a.kt)("inlineCode",{parentName:"h2"},"node")),(0,a.kt)("p",null,"The variable ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," is bound to the graph node for which the style directive\n",(0,a.kt)("inlineCode",{parentName:"p"},"@NodeStyle")," is being evaluated. Graph node is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Map")," and has all\ninformation about the node (",(0,a.kt)("inlineCode",{parentName:"p"},"properties"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"labels"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),")."),(0,a.kt)("p",null,"In the following example, you can see the usage of the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," within\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"@NodeStyle")," directive."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'@NodeStyle {\n  label: Property(node, "name")\n  size: Mul(Size(Edges(node)), 5)\n}\n')),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," is used outside ",(0,a.kt)("inlineCode",{parentName:"p"},"@NodeStyle")," directive, a compile error will be\nthrown."),(0,a.kt)("h2",{id:"edge"},(0,a.kt)("inlineCode",{parentName:"h2"},"edge")),(0,a.kt)("p",null,"The variable ",(0,a.kt)("inlineCode",{parentName:"p"},"edge")," is bound to the graph relationship for which the style\ndirective ",(0,a.kt)("inlineCode",{parentName:"p"},"@EdgeStyle")," is being evaluated. Graph relationship is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Map"),"\nand has all information about the relationship (",(0,a.kt)("inlineCode",{parentName:"p"},"properties"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"start"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"end"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),")."),(0,a.kt)("p",null,"In the following example, you can see the usage of the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"edge")," within\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"@EdgeStyle")," directive."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'@EdgeStyle {\n  label: Format("From node {}", Property(StartNode(edge), "name"))\n  size: AsNumber(Property(edge, "importance"))\n}\n')),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"edge")," is used outside ",(0,a.kt)("inlineCode",{parentName:"p"},"@EdgeStyle")," directive, a compile error will be\nthrown."),(0,a.kt)("h2",{id:"graph"},(0,a.kt)("inlineCode",{parentName:"h2"},"graph")),(0,a.kt)("p",null,"The variable ",(0,a.kt)("inlineCode",{parentName:"p"},"graph")," is bound to the overall graph that contains nodes and\nedges. It can be useful to get the total count of nodes and edges with the\nfollowing functions: ",(0,a.kt)("inlineCode",{parentName:"p"},"NodeCount(graph)")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"EdgeCount(graph)"),"."),(0,a.kt)("p",null,"In the following example, you can see the usage of the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"graph"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@NodeStyle {\n  size: Sqrt(NodeCount(graph))\n}\n\n@EdgeStyle {\n  width: If(Greater(EdgeCount(graph), 1000), 1, 2)\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"graph")," variable is not bound to any of the directives (",(0,a.kt)("inlineCode",{parentName:"p"},"@NodeStyle"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"@EdgeStyle"),") so you can use it wherever you want in the Graph Style Script\ncode."))}c.isMDXComponent=!0}}]);