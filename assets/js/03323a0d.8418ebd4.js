"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13736],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),d=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,f=c["".concat(u,".").concat(m)]||c[m]||p[m]||o;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},42910:function(e,t,n){n.r(t),n.d(t,{Highlight:function(){return f},assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=n(9877),l=n(58215),u=["components"],d={id:"union-find",title:"union_find",sidebar_label:"union_find"},s=void 0,p={unversionedId:"query-modules/python/union-find",id:"query-modules/python/union-find",title:"union_find",description:"docs-source",source:"@site/mage/query-modules/python/union-find.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/union-find",permalink:"/docs/mage/query-modules/python/union-find",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/union-find.md",tags:[],version:"current",frontMatter:{id:"union-find",title:"union_find",sidebar_label:"union_find"},sidebar:"mage",previous:{title:"tsp",permalink:"/docs/mage/query-modules/python/tsp"},next:{title:"uuid_generator",permalink:"/docs/mage/query-modules/cpp/uuid-generator"}},c={},m=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>connected(nodes1, nodes2, mode, update)</code>",id:"connectednodes1-nodes2-mode-update",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"Example",id:"example",level:2}],f=function(e){var t=e.children,n=e.color;return(0,o.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},h={toc:m,Highlight:f};function g(e){var t=e.components,d=(0,r.Z)(e,u);return(0,o.kt)("wrapper",(0,a.Z)({},h,d,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/union_find.py"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-union_find-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,o.kt)("h2",{id:"abstract"},"Abstract"),(0,o.kt)("p",null,"Analysis of connected components is a common task in graph analytics."),(0,o.kt)("p",null,"By using a disjoint-set data structure that keeps track of them, the algorithm implemented in this module enables the user to quickly check whether a pair of given nodes is in the same or different connected component.\nA check on a pair of nodes is effectively executed in O(1) time."),(0,o.kt)("p",null,"The implementation of the disjoint-set data structure and its operations uses the ",(0,o.kt)("em",{parentName:"p"},"union by rank")," and ",(0,o.kt)("em",{parentName:"p"},"path splitting"),' optimizations described in "',(0,o.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/10.1145/62.2160"},"Worst-case Analysis of Set Union Algorithms"),'" ',(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),", and presented with examples ",(0,o.kt)("a",{parentName:"p",href:"https://www.cs.princeton.edu/~rs/AlgsDS07/01UnionFind.pdf"},"here"),"."),(0,o.kt)("p",null,(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," ",(0,o.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/10.1145/62.2160"},"Worst-case Analysis of Set Union Algorithms"),", Robert E. Tarjan and Jan van Leeuwen"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Trait"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Module type")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(f,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"module")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Implementation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(f,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"Python")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Graph direction")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(f,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"undirected")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Edge weights")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(f,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"unweighted")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Parallelism")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(f,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"sequential")))))),(0,o.kt)("h2",{id:"procedures"},"Procedures"),(0,o.kt)("h3",{id:"connectednodes1-nodes2-mode-update"},(0,o.kt)("inlineCode",{parentName:"h3"},"connected(nodes1, nodes2, mode, update)")),(0,o.kt)("h4",{id:"input"},"Input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nodes1: Union[Vertex, List[Vertex]]")," \u27a1 First value (or list thereof) in connectedness calculation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nodes2: Union[Vertex, List[Vertex]]")," \u27a1 Second value (or list thereof) in connectedness calculation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'mode: str("pairwise")')," \u27a1 Mode of combining ",(0,o.kt)("inlineCode",{parentName:"li"},"nodes1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"nodes2"),". Can be ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"p"))," or ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"pairwise"))," for a pairwise product, or ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"c"))," or ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"cartesian"))," for a Cartesian product of the arguments. Pairwise by default."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"update: bool(True)")," \u27a1 Specifies whether the disjoint-set data structure should be reinitialized. Enabled by default. If the graph has been modified since the previous call of this procedure, turning ",(0,o.kt)("inlineCode",{parentName:"li"},"update")," off ensures that the changes are not visible in the output.")),(0,o.kt)("h4",{id:"output"},"Output:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node1: Vertex")," \u27a1 Node in ",(0,o.kt)("inlineCode",{parentName:"li"},"nodes1"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node2: Vertex")," \u27a1 Node in ",(0,o.kt)("inlineCode",{parentName:"li"},"nodes2"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"connected: bool")," \u27a1 ",(0,o.kt)("inlineCode",{parentName:"li"},"True")," if the above nodes are in the same connected component of the graph.")),(0,o.kt)("h4",{id:"usage"},"Usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (m:Node)\nWITH collect(m) AS nodes1\nMATCH (n:Node)\nWITH collect(n) AS nodes2, nodes1\nCALL union_find.connected(nodes1, nodes2) YIELD *\nRETURN node1, node2, connected;\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)(i.Z,{groupId:"example",defaultValue:"visualization",values:[{label:"Step 1: Input graph",value:"visualization"},{label:"Step 2: Cypher load commands",value:"cypher"},{label:"Step 3: Running command",value:"run"},{label:"Step 4: Results",value:"result"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"visualization",mdxType:"TabItem"},(0,o.kt)("img",{src:n(23678).Z})),(0,o.kt)(l.Z,{value:"cypher",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MERGE (a:Node {id: 0}) MERGE (b:Node {id: 1}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 1}) MERGE (b:Node {id: 2}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 2}) MERGE (b:Node {id: 0}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 3}) MERGE (b:Node {id: 3}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 3}) MERGE (b:Node {id: 4}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 3}) MERGE (b:Node {id: 5}) CREATE (a)-[:RELATION]->(b);\n"))),(0,o.kt)(l.Z,{value:"run",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (m:Node)\nWHERE m.id = 0 OR m.id = 1\nWITH collect(m) AS nodes1\nMATCH (n:Node)\nWHERE n.id = 2 OR n.id = 3\nWITH collect(n) AS nodes2, nodes1\nCALL union_find.connected(nodes1, nodes2) YIELD *\nRETURN node1, node2, connected;\n"))),(0,o.kt)(l.Z,{value:"result",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"+-----------------+-----------------+-----------------+\n| node1           | node2           | connected       |\n+-----------------+-----------------+-----------------+\n| (:Node {id: 0}) | (:Node {id: 2}) | false           |\n| (:Node {id: 1}) | (:Node {id: 3}) | false           |\n+-----------------+-----------------+-----------------+\n")))))}g.isMDXComponent=!0},58215:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(67294);function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(87462),r=n(67294),o=n(72389),i=n(5979),l=n(86010),u="tabItem_LplD";function d(e){var t,n,o,d=e.lazy,s=e.block,p=e.defaultValue,c=e.values,m=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=c?c:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,i.lx)(g,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===p?p:null!=(t=null!=p?p:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==N&&!g.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,i.UB)(),v=b.tabGroupChoices,y=b.setTabGroupChoices,E=(0,r.useState)(N),T=E[0],x=E[1],C=[],O=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var w=v[m];null!=w&&w!==T&&g.some((function(e){return e.value===w}))&&x(w)}var R=function(e){var t=e.currentTarget,n=C.indexOf(t),a=g[n].value;a!==T&&(O(t),x(a),null!=m&&y(m,a))},A=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;n=C[a]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;n=C[r]||C[C.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},f)},g.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return C.push(e)},onKeyDown:A,onFocus:R,onClick:R},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),d?(0,r.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function s(e){var t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},23678:function(e,t,n){t.Z=n.p+"assets/images/union-find-1-179c7651963fee64816cc1689a12dff4.png"}}]);