(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1847],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(r),d=a,h=c["".concat(l,".").concat(d)]||c[d]||u[d]||i;return r?n.createElement(h,s(s({ref:t},p),{},{components:r})):n.createElement(h,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var m=2;m<i;m++)s[m]=r[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},71434:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return p},default:function(){return c}});var n=r(22122),a=r(19756),i=(r(67294),r(3905)),s=["components"],o={id:"overview",title:"Streams",sidebar_label:"Overview",slug:"/reference-guide/streams"},l=void 0,m={unversionedId:"reference-guide/streams/overview",id:"reference-guide/streams/overview",isDocsHomePage:!1,title:"Streams",description:"Memgraph can connect to existing Kafka streams. To use streams, a user",source:"@site/docs/reference-guide/streams/overview.md",sourceDirName:"reference-guide/streams",slug:"/reference-guide/streams",permalink:"/memgraph/next/reference-guide/streams",editUrl:"https://github.com/memgraph/docs/tree/master/docs/reference-guide/streams/overview.md",version:"current",frontMatter:{id:"overview",title:"Streams",sidebar_label:"Overview",slug:"/reference-guide/streams"},sidebar:"memgraph",previous:{title:"Replication",permalink:"/memgraph/next/reference-guide/replication"},next:{title:"Overview",permalink:"/memgraph/next/reference-guide/streams/transformation-modules"}},p=[{value:"Creating a stream",id:"creating-a-stream",children:[]},{value:"Deleting a stream",id:"deleting-a-stream",children:[]},{value:"Start a stream",id:"start-a-stream",children:[]},{value:"Stop a stream",id:"stop-a-stream",children:[]},{value:"Show",id:"show",children:[]},{value:"Check stream",id:"check-stream",children:[]}],u={toc:p};function c(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Memgraph can connect to existing Kafka streams. To use streams, a user\nmust"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Manage a stream via a query"),(0,i.kt)("li",{parentName:"ul"},"Provide a user-defined transformation module")),(0,i.kt)("p",null,"More information about transformation modules can be found\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/memgraph/next/reference-guide/streams/transformation-modules"},"here")),".\nThe rest of this section describes how to manage streams with Memgraph."),(0,i.kt)("h2",{id:"creating-a-stream"},"Creating a stream"),(0,i.kt)("p",null,"The general syntax for creating a stream is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE STREAM <stream name>\n  TOPICS (['<topic1>', '<topic2>'])\n  TRANSFORM <transform procedure>\n  [CONSUMER_GROUP <consumer group name>]\n  [BATCH_INTERVAL <milliseconds>]\n  [BATCH_SIZE <size>];\n")),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"STREAM")," with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<stream name>")," that consumes messages from\n",(0,i.kt)("inlineCode",{parentName:"p"},"TOPICS")," with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<topic1>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<topic2>"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"TRANSFORM")," denotes the user-defined\ntransformation with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<transform procedure>"),"."),(0,i.kt)("p",null,"Additionally, the user can provide the following optional parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CONSUMER_GROUP")," with name ",(0,i.kt)("inlineCode",{parentName:"li"},"<consumer group name>"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BATCH_INTERVAL")," denotes the maximum wait time interval for consuming message(s)\nbefore calling the transformation procedure with the already received message(s).\nThis value must be greater than zero and is defaulted to 100."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BATCH_SIZE")," denotes the total number of messages to wait before calling\nthe transformation procedure with the already received message(s).\nIt must be greater than zero and is defaulted to 1000.")),(0,i.kt)("p",null,"The transformation procedure is called if either the ",(0,i.kt)("inlineCode",{parentName:"p"},"BATCH_INTERVAL")," or the\n",(0,i.kt)("inlineCode",{parentName:"p"},"BATCH_SIZE")," is reached and there is at least one received message.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"BATCH_INTERVAL")," starts when the:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the stream is started"),(0,i.kt)("li",{parentName:"ul"},"the processing of the previous batch is completed"),(0,i.kt)("li",{parentName:"ul"},"the previous batch interval ended without receiving any messages")),(0,i.kt)("h2",{id:"deleting-a-stream"},"Deleting a stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"DROP STREAM <stream name>;\n")),(0,i.kt)("p",null,"Drops a stream with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<stream name>"),"."),(0,i.kt)("h2",{id:"start-a-stream"},"Start a stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"START STREAM <stream name> [LIMIT <count> BATCHES];\nSTART ALL STREAMS;\n")),(0,i.kt)("p",null,"Starts a stream (or all streams) with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<stream name>"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<count>")," denotes the total number of processed batches."),(0,i.kt)("p",null,"When a stream is started, it should resume from the last committed\noffset."),(0,i.kt)("h2",{id:"stop-a-stream"},"Stop a stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"STOP STREAM <stream name>;\nSTOP ALL STREAMS;\n")),(0,i.kt)("p",null,"Stops a stream (or all streams) with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<stream name>"),"."),(0,i.kt)("h2",{id:"show"},"Show"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW STREAMS;\n")),(0,i.kt)("p",null,"Shows a list of existing streams with the following information:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"stream name"),(0,i.kt)("li",{parentName:"ul"},"list of topics"),(0,i.kt)("li",{parentName:"ul"},"transformation procedure name"),(0,i.kt)("li",{parentName:"ul"},"status"),(0,i.kt)("li",{parentName:"ul"},"consumer group id"),(0,i.kt)("li",{parentName:"ul"},"batch interval"),(0,i.kt)("li",{parentName:"ul"},"batch size")),(0,i.kt)("h2",{id:"check-stream"},"Check stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CHECK STREAM <stream name> [LIMIT <count> BATCHES] [TIMEOUT <milliseconds>] ;\n")),(0,i.kt)("p",null,"Checks the stream with name ",(0,i.kt)("inlineCode",{parentName:"p"},"<stream name>")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"<count>")," number of batches.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"<count>")," is unspecified, its default value is 1.\nAfter ",(0,i.kt)("inlineCode",{parentName:"p"},"<count>")," batches are processed, the transformation result is returned.\nThe result can be empty if the batch interval is reached.\n",(0,i.kt)("inlineCode",{parentName:"p"},"TIMEOUT")," is measured in milliseconds, and it's defaulted to 30000."))}c.isMDXComponent=!0}}]);