"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[46918],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var r=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=r.createContext({}),m=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=m(a),c=o,d=u["".concat(l,".").concat(c)]||u[c]||h[c]||n;return a?r.createElement(d,p(p({ref:t},s),{},{components:a})):r.createElement(d,p({ref:t},s))}));function c(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,p=new Array(n);p[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,p[1]=i;for(var m=2;m<n;m++)p[m]=a[m];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},30124:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>m});var r=a(87462),o=(a(67294),a(3905));const n={id:"import-data",title:"Import data",sidebar_label:"Import data",slug:"/import-data"},p=void 0,i={unversionedId:"import-data",id:"import-data",title:"Import data",description:"You can import data in the following formats:",source:"@site/gqlalchemy/import-data.md",sourceDirName:".",slug:"/import-data",permalink:"/docs/gqlalchemy/import-data",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/import-data.md",tags:[],version:"current",frontMatter:{id:"import-data",title:"Import data",sidebar_label:"Import data",slug:"/import-data"},sidebar:"gqlalchemy",previous:{title:"Installation",permalink:"/docs/gqlalchemy/installation"},next:{title:"How-to guides overview",permalink:"/docs/gqlalchemy/how-to-guides"}},l={},m=[{value:"CSV",id:"csv",level:2},{value:"JSON",id:"json",level:2},{value:"Parquet, ORC or IPC/Feather/Arrow",id:"parquet-orc-or-ipcfeatherarrow",level:2},{value:"Python graphs - NetworkX, PyG or DGL graph",id:"python-graphs---networkx-pyg-or-dgl-graph",level:2},{value:"Kafka, RedPanda or Pulsar data stream",id:"kafka-redpanda-or-pulsar-data-stream",level:2},{value:"Learn more",id:"learn-more",level:2}],s={toc:m};function h(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can import data in the following formats:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#csv"},(0,o.kt)("strong",{parentName:"a"},"CSV"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#json"},(0,o.kt)("strong",{parentName:"a"},"JSON"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#parquet-orc-or-ipcfeatherarrow"},(0,o.kt)("strong",{parentName:"a"},"Parquet, ORC or IPC/Feather/Arrow"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#python-graphs---networkx-pyg-or-dgl-graph"},(0,o.kt)("strong",{parentName:"a"},"Python graphs - NetworkX, PyG or DGL graph"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#kafka-redpanda-or-pulsar-data-stream"},(0,o.kt)("strong",{parentName:"a"},"Kafka, RedPanda or Pulsar data stream")))),(0,o.kt)("p",null,"Besides that, you can create data directly from code using the ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/ogm"},(0,o.kt)("strong",{parentName:"a"},"object graph mapper"))," or ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/query-builder"},(0,o.kt)("strong",{parentName:"a"},"query builder")),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The fastest way to import data into Memgraph is by using the ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/import-data/load-csv-clause"},"LOAD CSV clause"),". It's recommended to first ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/next/how-to-guides/indexes"},"create indexes")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"CREATE INDEX")," clause. You can create them by ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/python"},"executing the Cypher query")," or using ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/ogm#create-indexes"},"object graph mapper"),".")),(0,o.kt)("h2",{id:"csv"},"CSV"),(0,o.kt)("p",null,"To import CSV file into Memgraph via GQLAlchemy, you can use the ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/import-data/load-csv-clause"},(0,o.kt)("inlineCode",{parentName:"a"},"LOAD CSV")," clause"),". That clause can be used by ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/python"},"executing the Cypher query")," or by ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/query-builder#load-csv-file"},"building the query with the query builder"),". Another way of importing CSV data into Memgraph is by ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/table-to-graph-importer"},"translating it into a graph"),"."),(0,o.kt)("h2",{id:"json"},"JSON"),(0,o.kt)("p",null,"To import JSON files into Memgraph via GQLAlchemy, you can call procedures from the ",(0,o.kt)("a",{parentName:"p",href:"/mage/query-modules/python/json-util"},(0,o.kt)("inlineCode",{parentName:"a"},"json_util")," module")," available in MAGE library. If the JSON data is formatted in a particular style, you can call the ",(0,o.kt)("a",{parentName:"p",href:"/mage/query-modules/python/import-util#jsonpath"},(0,o.kt)("inlineCode",{parentName:"a"},"import_util.json()")," procedure")," from MAGE. The procedures can be called by ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/python"},"executing Cypher queries")," or ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/query-builder#call-procedures"},"using the query builder"),"."),(0,o.kt)("h2",{id:"parquet-orc-or-ipcfeatherarrow"},"Parquet, ORC or IPC/Feather/Arrow"),(0,o.kt)("p",null,"To import Parquet, ORC or IPC/Feather/Arrow file into Memgraph via GQLAlchemy, ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/table-to-graph-importer"},"transform table data from a file into a graph"),". "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you want to read from a file system not currently supported by GQLAlchemy, or use a file type currently not readable, you can implement your own by ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/custom-file-system-importer"},"making a custom file system importer"),".")),(0,o.kt)("h2",{id:"python-graphs---networkx-pyg-or-dgl-graph"},"Python graphs - NetworkX, PyG or DGL graph"),(0,o.kt)("p",null,"To import NetworkX, PyG or DGL graph into Memgraph via GQLAlchemy, ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/networkx"},"transform the source graph into Memgraph graph"),"."),(0,o.kt)("h2",{id:"kafka-redpanda-or-pulsar-data-stream"},"Kafka, RedPanda or Pulsar data stream"),(0,o.kt)("p",null,"To consume Kafka, RedPanda or Pulsar data stream, you can write a ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/import-data/data-streams/manage-streams"},"appropriate Cypher queries")," and ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/python"},"execute")," them, or use GQLAlchemy stream manager for ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/streams/manage-kafka-streams"},"Kafka, RedPanda")," or ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/streams/manage-pulsar-streams"},"Pulsar")," streams."),(0,o.kt)("h2",{id:"learn-more"},"Learn more"),(0,o.kt)("p",null,"To learn how to utilize the GQLAlchemy library with Memgraph, check out the ",(0,o.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides"},"how-to guides")," or sign up for the ",(0,o.kt)("a",{parentName:"p",href:"https://app.livestorm.co/memgraph/getting-started-with-memgraph-and-python-on-demand"},"Getting started with Memgraph and Python course"),"."))}h.isMDXComponent=!0}}]);