"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70767],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),y=s(r),m=a,d=y["".concat(p,".").concat(m)]||y[m]||u[m]||l;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},32795:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const l={sidebar_label:"utilities",title:"gqlalchemy.utilities"},o=void 0,i={unversionedId:"reference/utilities",id:"reference/utilities",title:"gqlalchemy.utilities",description:"to\\cypher\\value",source:"@site/gqlalchemy/reference/utilities.md",sourceDirName:"reference",slug:"/reference/utilities",permalink:"/docs/gqlalchemy/reference/utilities",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/utilities.md",tags:[],version:"current",frontMatter:{sidebar_label:"utilities",title:"gqlalchemy.utilities"},sidebar:"gqlalchemy",previous:{title:"nx_translator",permalink:"/docs/gqlalchemy/reference/transformations/translators/nx_translator"},next:{title:"integrated_algorithms",permalink:"/docs/gqlalchemy/reference/graph_algorithms/integrated_algorithms"}},p={},s=[{value:"to_cypher_value",id:"to_cypher_value",level:4},{value:"to_cypher_properties",id:"to_cypher_properties",level:4},{value:"to_cypher_labels",id:"to_cypher_labels",level:4},{value:"to_cypher_qm_arguments",id:"to_cypher_qm_arguments",level:4},{value:"PropertyVariable Objects",id:"propertyvariable-objects",level:2}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"to_cypher_value"},"to","_","cypher","_","value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_value(value: Any, config: NetworkXCypherConfig = None) -> str\n")),(0,a.kt)("p",null,"Converts value to a valid Cypher type."),(0,a.kt)("h4",{id:"to_cypher_properties"},"to","_","cypher","_","properties"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_properties(properties: Optional[Dict[str, Any]] = None, config=None) -> str\n")),(0,a.kt)("p",null,"Converts properties to a Cypher key-value properties."),(0,a.kt)("h4",{id:"to_cypher_labels"},"to","_","cypher","_","labels"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_labels(labels: Union[str, List[str], None]) -> str\n")),(0,a.kt)("p",null,"Converts labels to a Cypher label definition."),(0,a.kt)("h4",{id:"to_cypher_qm_arguments"},"to","_","cypher","_","qm","_","arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_qm_arguments(arguments: Optional[Union[str, Tuple[Union[str, int, float]]]]) -> str\n")),(0,a.kt)("p",null,"Converts query module arguments to a valid Cypher string of query module arguments."),(0,a.kt)("h2",{id:"propertyvariable-objects"},"PropertyVariable Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class PropertyVariable()\n")),(0,a.kt)("p",null,"Class for support of using a variable as a node or edge property. Used\nto avoid the quotes given to property values."))}u.isMDXComponent=!0}}]);