"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[16610],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),l=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(r),h=n,f=m["".concat(u,".").concat(h)]||m[h]||c[h]||o;return r?a.createElement(f,s(s({ref:t},p),{},{components:r})):a.createElement(f,s({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},32800:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var a=r(87462),n=r(63366),o=(r(67294),r(3905)),s=["components"],i={id:"mage-faq",title:"MAGE - Frequently asked questions",sidebar_label:"MAGE",slug:"/faq/mage"},u=void 0,l={unversionedId:"faq/mage-faq",id:"faq/mage-faq",title:"MAGE - Frequently asked questions",description:"What is Memgraph?",source:"@site/help-center/faq/mage-faq.md",sourceDirName:"faq",slug:"/faq/mage",permalink:"/docs/help-center/faq/mage",editUrl:"https://github.com/memgraph/docs/tree/master/help-center/faq/mage-faq.md",tags:[],version:"current",frontMatter:{id:"mage-faq",title:"MAGE - Frequently asked questions",sidebar_label:"MAGE",slug:"/faq/mage"},sidebar:"hel_center",previous:{title:"Memgraph Lab",permalink:"/docs/help-center/faq/memgraph-lab"}},p=[{value:"What is Memgraph?",id:"what-is-memgraph",children:[],level:3},{value:"What is MAGE?",id:"what-is-mage",children:[],level:3},{value:"What are query modules?",id:"what-are-query-modules",children:[],level:3},{value:"What is Cypher?",id:"what-is-cypher",children:[],level:3}],c={toc:p};function m(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"what-is-memgraph"},"What is Memgraph?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/memgraph"},"Memgraph"))," is a native in-memory graph streaming\nplatform built to handle real-time use-cases at enterprise scale. Memgraph\nsupports strongly-consistent ACID transactions and uses the standardized\n",(0,o.kt)("strong",{parentName:"p"},"Cypher")," query language for structuring, manipulating, and exploring data. You\ncan ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/import-data/kafka"},"connect to Kafka")," and use Memgraph to wrangle\nyour graph data source."),(0,o.kt)("h3",{id:"what-is-mage"},"What is MAGE?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/mage"},"MAGE"))," stands for ",(0,o.kt)("strong",{parentName:"p"},"Memgraph Advanced Graph Extensions"),". It\u2019s an\nopen-source project started by Memgraph that encourages developers to share\ninnovative and useful ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/mage/query-modules/available-queries"},"query modules")),"\n(custom Cypher procedures) so the whole community can benefit from them."),(0,o.kt)("h3",{id:"what-are-query-modules"},"What are query modules?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/mage/query-modules/available-queries"},"Query modules"))," are essentially\ncollections of custom Cypher procedures that extend the basic functionalities of\nthe Cypher query language. Each query module consists of procedures that are\nconnected by a common theme (community detection for example). You can ",(0,o.kt)("a",{parentName:"p",href:"/mage/usage/loading-modules"},"implement\nquery modules")," using Python or C API."),(0,o.kt)("h3",{id:"what-is-cypher"},"What is Cypher?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/cypher-manual"},"Cypher"))," is a ",(0,o.kt)("strong",{parentName:"p"},"graph query language")," that allows users to store and retrieve\ndata from a graph database."))}m.isMDXComponent=!0}}]);