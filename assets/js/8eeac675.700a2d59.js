"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8773],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return d}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=t.createContext({}),l=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(p.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},s=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=l(n),d=o,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||i;return n?t.createElement(f,a(a({ref:r},u),{},{components:n})):t.createElement(f,a({ref:r},u))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=s;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},31378:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return s}});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={id:"cypherl",title:"Importing Cypher queries (.cypherl format)",sidebar_label:"Cypher queries (.cypherl format)"},p=void 0,l={unversionedId:"reference-guide/import-data/cypherl",id:"version-2.1.0/reference-guide/import-data/cypherl",title:"Importing Cypher queries (.cypherl format)",description:"When Memgraph is running, cypher queries are imported by running",source:"@site/memgraph_versioned_docs/version-2.1.0/reference-guide/import-data/cypherl.md",sourceDirName:"reference-guide/import-data",slug:"/reference-guide/import-data/cypherl",permalink:"/docs/memgraph/2.1.0/reference-guide/import-data/cypherl",editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/reference-guide/import-data/cypherl.md",tags:[],version:"2.1.0",frontMatter:{id:"cypherl",title:"Importing Cypher queries (.cypherl format)",sidebar_label:"Cypher queries (.cypherl format)"},sidebar:"version-2.1.0/memgraph",previous:{title:"LOAD CSV Cypher clause",permalink:"/docs/memgraph/2.1.0/reference-guide/import-data/load-csv-clause"},next:{title:"Indexing",permalink:"/docs/memgraph/2.1.0/reference-guide/indexing"}},u=[],m={toc:u};function s(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},m,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When Memgraph is running, cypher queries are imported by running\n",(0,i.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/connect-to-memgraph/methods/mgconsole"},"mgconsole")," in non-interactive mode.\nThe user can import queries saved in e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"queries.cypherl")," by issuing the\nfollowing shell command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"mgconsole < queries.cypherl\n")),(0,i.kt)("p",null,"If you installed the Memgraph image using Docker, you will need to run the\nclient using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"docker run -i --entrypoint=mgconsole memgraph --host HOST < queries.cypherl\n")),(0,i.kt)("p",null,"Remember to replace ",(0,i.kt)("inlineCode",{parentName:"p"},"HOST")," with valid IP of the container (see ",(0,i.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/how-to-work-with-docker#docker-container-ip-address"},"Note for Docker\nusers"),")."),(0,i.kt)("p",null,"For more information about ",(0,i.kt)("inlineCode",{parentName:"p"},"mgconsole")," options run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"mgconsole --help\n")))}s.isMDXComponent=!0}}]);