"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[36742],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=m(a),k=l,d=c["".concat(p,".").concat(k)]||c[k]||u[k]||r;return a?n.createElement(d,i(i({ref:t},s),{},{components:a})):n.createElement(d,i({ref:t},s))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},40497:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(87462),l=(a(67294),a(3905));const r={sidebar_label:"loaders",title:"gqlalchemy.loaders"},i=void 0,o={unversionedId:"reference/loaders",id:"reference/loaders",title:"gqlalchemy.loaders",description:"ForeignKeyMapping Objects",source:"@site/gqlalchemy/reference/loaders.md",sourceDirName:"reference",slug:"/reference/loaders",permalink:"/docs/gqlalchemy/reference/loaders",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/loaders.md",tags:[],version:"current",frontMatter:{sidebar_label:"loaders",title:"gqlalchemy.loaders"},sidebar:"gqlalchemy",previous:{title:"instance_runner",permalink:"/docs/gqlalchemy/reference/instance_runner"},next:{title:"models",permalink:"/docs/gqlalchemy/reference/models"}},p={},m=[{value:"ForeignKeyMapping Objects",id:"foreignkeymapping-objects",level:2},{value:"OneToManyMapping Objects",id:"onetomanymapping-objects",level:2},{value:"ManyToManyMapping Objects",id:"manytomanymapping-objects",level:2},{value:"TableMapping Objects",id:"tablemapping-objects",level:2},{value:"NameMappings Objects",id:"namemappings-objects",level:2},{value:"NameMapper Objects",id:"namemapper-objects",level:2},{value:"get_label",id:"get_label",level:4},{value:"get_property_name",id:"get_property_name",level:4},{value:"FileSystemHandler Objects",id:"filesystemhandler-objects",level:2},{value:"get_path",id:"get_path",level:4},{value:"S3FileSystemHandler Objects",id:"s3filesystemhandler-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"get_path",id:"get_path-1",level:4},{value:"AzureBlobFileSystemHandler Objects",id:"azureblobfilesystemhandler-objects",level:2},{value:"__init__",id:"__init__-1",level:4},{value:"get_path",id:"get_path-2",level:4},{value:"LocalFileSystemHandler Objects",id:"localfilesystemhandler-objects",level:2},{value:"__init__",id:"__init__-2",level:4},{value:"get_path",id:"get_path-3",level:4},{value:"DataLoader Objects",id:"dataloader-objects",level:2},{value:"__init__",id:"__init__-3",level:4},{value:"load_data",id:"load_data",level:4},{value:"PyArrowFileTypeEnum Objects",id:"pyarrowfiletypeenum-objects",level:2},{value:"PyArrowDataLoader Objects",id:"pyarrowdataloader-objects",level:2},{value:"__init__",id:"__init__-4",level:4},{value:"load_data",id:"load_data-1",level:4},{value:"TableToGraphImporter Objects",id:"tabletographimporter-objects",level:2},{value:"__init__",id:"__init__-5",level:4},{value:"translate",id:"translate",level:4},{value:"PyArrowImporter Objects",id:"pyarrowimporter-objects",level:2},{value:"__init__",id:"__init__-6",level:4},{value:"PyArrowS3Importer Objects",id:"pyarrows3importer-objects",level:2},{value:"__init__",id:"__init__-7",level:4},{value:"PyArrowAzureBlobImporter Objects",id:"pyarrowazureblobimporter-objects",level:2},{value:"__init__",id:"__init__-8",level:4},{value:"PyArrowLocalFileSystemImporter Objects",id:"pyarrowlocalfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-9",level:4},{value:"ParquetS3FileSystemImporter Objects",id:"parquets3filesystemimporter-objects",level:2},{value:"__init__",id:"__init__-10",level:4},{value:"CSVS3FileSystemImporter Objects",id:"csvs3filesystemimporter-objects",level:2},{value:"__init__",id:"__init__-11",level:4},{value:"ORCS3FileSystemImporter Objects",id:"orcs3filesystemimporter-objects",level:2},{value:"__init__",id:"__init__-12",level:4},{value:"FeatherS3FileSystemImporter Objects",id:"feathers3filesystemimporter-objects",level:2},{value:"__init__",id:"__init__-13",level:4},{value:"ParquetAzureBlobFileSystemImporter Objects",id:"parquetazureblobfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-14",level:4},{value:"CSVAzureBlobFileSystemImporter Objects",id:"csvazureblobfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-15",level:4},{value:"ORCAzureBlobFileSystemImporter Objects",id:"orcazureblobfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-16",level:4},{value:"FeatherAzureBlobFileSystemImporter Objects",id:"featherazureblobfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-17",level:4},{value:"ParquetLocalFileSystemImporter Objects",id:"parquetlocalfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-18",level:4},{value:"CSVLocalFileSystemImporter Objects",id:"csvlocalfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-19",level:4},{value:"ORCLocalFileSystemImporter Objects",id:"orclocalfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-20",level:4},{value:"FeatherLocalFileSystemImporter Objects",id:"featherlocalfilesystemimporter-objects",level:2},{value:"__init__",id:"__init__-21",level:4}],s={toc:m};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"foreignkeymapping-objects"},"ForeignKeyMapping Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True)\nclass ForeignKeyMapping()\n")),(0,l.kt)("p",null,"Class that contains the full description of a single foreign key in a table."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column_name")," - Column name that holds the foreign key."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reference_table")," - Name of a table from which the foreign key is taken."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reference_key")," - Column name in the referenced table from which the foreign key is taken.")),(0,l.kt)("h2",{id:"onetomanymapping-objects"},"OneToManyMapping Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True)\nclass OneToManyMapping()\n")),(0,l.kt)("p",null,"Class that holds the full description of a single one to many mapping in a table."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"foreign_key")," - Foreign key used for mapping."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"label")," - Label which will be applied to the relationship created from this object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from_entity")," - Direction of the relationship created from the mapping object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parameters")," - Parameters that will be added to the relationship created from this object (Optional).")),(0,l.kt)("h2",{id:"manytomanymapping-objects"},"ManyToManyMapping Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True)\nclass ManyToManyMapping()\n")),(0,l.kt)("p",null,"Class that holds the full description of a single many to many mapping in a table.\nMany to many mapping is intended to be used in case of associative tables."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"foreign_key_from")," - Describes the source of the relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"foreign_key_to")," - Describes the destination of the relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"label")," - Label to be applied to the newly created relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parameters")," - Parameters that will be added to the relationship created from this object (Optional).")),(0,l.kt)("h2",{id:"tablemapping-objects"},"TableMapping Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass TableMapping()\n")),(0,l.kt)("p",null,"Class that holds the full description of all of the mappings for a single table."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"table_name")," - Name of the table."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mapping")," - All of the mappings in the table (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"indices")," - List of the indices to be created for this table (Optional).")),(0,l.kt)("h2",{id:"namemappings-objects"},"NameMappings Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True)\nclass NameMappings()\n")),(0,l.kt)("p",null,"Class that contains new label name and all of the column name mappings for a single table."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"label")," - New label (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column_names_mapping")," - Dictionary containing key-value pairs in form (",'"',"column name",'"',", ",'"',"property name",'"',") (Optional).")),(0,l.kt)("h2",{id:"namemapper-objects"},"NameMapper Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class NameMapper()\n")),(0,l.kt)("p",null,"Class that holds all name mappings for all of the collections."),(0,l.kt)("h4",{id:"get_label"},"get","_","label"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_label(collection_name: str) -> str\n")),(0,l.kt)("p",null,"Returns label for given collection."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Original collection name.")),(0,l.kt)("h4",{id:"get_property_name"},"get","_","property","_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_property_name(collection_name: str, column_name: str) -> str\n")),(0,l.kt)("p",null,"Returns property name for column from collection."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Original collection name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column_name")," - Original column name.")),(0,l.kt)("h2",{id:"filesystemhandler-objects"},"FileSystemHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class FileSystemHandler(ABC)\n")),(0,l.kt)("p",null,"Abstract class for defining FileSystemHandler."),(0,l.kt)("p",null,"Inherit this class, define a custom data source and initialize the\nconnection."),(0,l.kt)("h4",{id:"get_path"},"get","_","path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_path(collection_name: str) -> str\n")),(0,l.kt)("p",null,"Returns complete path in specific file system. Used to read the file system\nfor a specific file."),(0,l.kt)("h2",{id:"s3filesystemhandler-objects"},"S3FileSystemHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class S3FileSystemHandler(FileSystemHandler)\n")),(0,l.kt)("p",null,"Handles connection to Amazon S3 service via PyArrow."),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(bucket_name: str, **kwargs)\n")),(0,l.kt)("p",null,"Initializes connection and data bucket."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"bucket_name")," - Name of the bucket on S3 from which to read the data"),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"access_key")," - S3 access key.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"secret_key")," - S3 secret key.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"region")," - S3 region.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"session_token")," - S3 session token (Optional)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"KeyError")," - kwargs doesn","'","t contain necessary fields.")),(0,l.kt)("h4",{id:"get_path-1"},"get","_","path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_path(collection_name: str) -> str\n")),(0,l.kt)("p",null,"Get file path in file system."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Name of the file to read.")),(0,l.kt)("h2",{id:"azureblobfilesystemhandler-objects"},"AzureBlobFileSystemHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class AzureBlobFileSystemHandler(FileSystemHandler)\n")),(0,l.kt)("p",null,"Handles connection to Azure Blob service via adlfs package."),(0,l.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(container_name: str, **kwargs) -> None\n")),(0,l.kt)("p",null,"Initializes connection and data container."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"container_name")," - Name of the Blob container storing data."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"account_name")," - Account name from Azure Blob.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"account_key")," - Account key for Azure Blob (Optional - if using sas_token).")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"sas_token")," - Shared access signature token for authentification (Optional)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"KeyError")," - kwargs doesn","'","t contain necessary fields.")),(0,l.kt)("h4",{id:"get_path-2"},"get","_","path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_path(collection_name: str) -> str\n")),(0,l.kt)("p",null,"Get file path in file system."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Name of the file to read.")),(0,l.kt)("h2",{id:"localfilesystemhandler-objects"},"LocalFileSystemHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class LocalFileSystemHandler(FileSystemHandler)\n")),(0,l.kt)("p",null,"Handles a local filesystem."),(0,l.kt)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(path: str) -> None\n")),(0,l.kt)("p",null,"Initializes an fsspec local file system and sets path to data."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - path to the local storage location.")),(0,l.kt)("h4",{id:"get_path-3"},"get","_","path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_path(collection_name: str) -> str\n")),(0,l.kt)("p",null,"Get file path in the local file system."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Name of the file to read.")),(0,l.kt)("h2",{id:"dataloader-objects"},"DataLoader Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class DataLoader(ABC)\n")),(0,l.kt)("p",null,"Implements loading of a data type from file system service to TableToGraphImporter."),(0,l.kt)("h4",{id:"__init__-3"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(file_extension: str, file_system_handler: FileSystemHandler) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_extension")," - File format to be read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_system_handler")," - Object for handling of the file system service.")),(0,l.kt)("h4",{id:"load_data"},"load","_","data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef load_data(collection_name: str, is_cross_table: bool = False) -> None\n")),(0,l.kt)("p",null,"Override this method in the derived class. Intended to be used for reading data from data format."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Name of the file to read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"is_cross_table")," - Indicate whether or not the collection contains associative table (default=False).")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NotImplementedError")," - The method is not implemented in the extended class.")),(0,l.kt)("h2",{id:"pyarrowfiletypeenum-objects"},"PyArrowFileTypeEnum Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class PyArrowFileTypeEnum(Enum)\n")),(0,l.kt)("p",null,"Enumerates file types supported by PyArrow"),(0,l.kt)("h2",{id:"pyarrowdataloader-objects"},"PyArrowDataLoader Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class PyArrowDataLoader(DataLoader)\n")),(0,l.kt)("p",null,"Loads data using PyArrow."),(0,l.kt)("p",null,"PyArrow currently supports ",'"',"parquet",'"',", ",'"',"ipc",'"',"/",'"',"arrow",'"',"/",'"',"feather",'"',", ",'"',"csv",'"',",\nand ",'"',"orc",'"',", see pyarrow.dataset.dataset for up-to-date info.\nds.dataset in load_data accepts any fsspec subclass, making this DataLoader\ncompatible with fsspec-compatible filesystems."),(0,l.kt)("h4",{id:"__init__-4"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(file_extension_enum: PyArrowFileTypeEnum, file_system_handler: FileSystemHandler) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_extension_enum")," - The file format to be read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_system_handler")," - Object for handling of the file system service.")),(0,l.kt)("h4",{id:"load_data-1"},"load","_","data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def load_data(collection_name: str, is_cross_table: bool = False, columns: Optional[List[str]] = None) -> None\n")),(0,l.kt)("p",null,"Generator for loading data."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collection_name")," - Name of the file to read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"is_cross_table")," - Flag signifying whether it is a cross table."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"columns")," - Table columns to read.")),(0,l.kt)("h2",{id:"tabletographimporter-objects"},"TableToGraphImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TableToGraphImporter()\n")),(0,l.kt)("p",null,"Implements translation of table data to graph data, and imports it to Memgraph."),(0,l.kt)("h4",{id:"__init__-5"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(data_loader: DataLoader, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_loader")," - Object for loading data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional).")),(0,l.kt)("h4",{id:"translate"},"translate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def translate(drop_database_on_start: bool = True) -> None\n")),(0,l.kt)("p",null,"Performs the translations."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"drop_database_on_start")," - Indicate whether or not the database should be dropped prior to the start of the translations.")),(0,l.kt)("h2",{id:"pyarrowimporter-objects"},"PyArrowImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class PyArrowImporter(TableToGraphImporter)\n")),(0,l.kt)("p",null,"TableToGraphImporter wrapper for use with PyArrow for reading data."),(0,l.kt)("h4",{id:"__init__-6"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(file_system_handler: str, file_extension_enum: PyArrowFileTypeEnum, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_system_handler")," - File system to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_extension_enum")," - File format to be read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional).")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ValueError")," - PyArrow doesn","'","t support ORC on Windows.")),(0,l.kt)("h2",{id:"pyarrows3importer-objects"},"PyArrowS3Importer Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class PyArrowS3Importer(PyArrowImporter)\n")),(0,l.kt)("p",null,"PyArrowImporter wrapper for use with the Amazon S3 File System."),(0,l.kt)("h4",{id:"__init__-7"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(bucket_name: str, file_extension_enum: PyArrowFileTypeEnum, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs, ,) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bucket_name")," - Name of the bucket in S3 to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_extension_enum")," - File format to be read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for S3FileSystem.")),(0,l.kt)("h2",{id:"pyarrowazureblobimporter-objects"},"PyArrowAzureBlobImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class PyArrowAzureBlobImporter(PyArrowImporter)\n")),(0,l.kt)("p",null,"PyArrowImporter wrapper for use with the Azure Blob File System."),(0,l.kt)("h4",{id:"__init__-8"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(container_name: str, file_extension_enum: PyArrowFileTypeEnum, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs, ,) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container_name")," - Name of the container in Azure Blob to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_extension_enum")," - File format to be read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for AzureBlobFileSystem.")),(0,l.kt)("h2",{id:"pyarrowlocalfilesystemimporter-objects"},"PyArrowLocalFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class PyArrowLocalFileSystemImporter(PyArrowImporter)\n")),(0,l.kt)("p",null,"PyArrowImporter wrapper for use with the Local File System."),(0,l.kt)("h4",{id:"__init__-9"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(path: str, file_extension_enum: PyArrowFileTypeEnum, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - Full path to the directory to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_extension_enum")," - File format to be read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional).")),(0,l.kt)("h2",{id:"parquets3filesystemimporter-objects"},"ParquetS3FileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ParquetS3FileSystemImporter(PyArrowS3Importer)\n")),(0,l.kt)("p",null,"PyArrowS3Importer wrapper for use with the S3 file system and the parquet file type."),(0,l.kt)("h4",{id:"__init__-10"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(bucket_name: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bucket_name")," - Name of the bucket in S3 to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for S3FileSystem.")),(0,l.kt)("h2",{id:"csvs3filesystemimporter-objects"},"CSVS3FileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class CSVS3FileSystemImporter(PyArrowS3Importer)\n")),(0,l.kt)("p",null,"PyArrowS3Importer wrapper for use with the S3 file system and the CSV file type."),(0,l.kt)("h4",{id:"__init__-11"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(bucket_name: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bucket_name")," - Name of the bucket in S3 to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for S3FileSystem.")),(0,l.kt)("h2",{id:"orcs3filesystemimporter-objects"},"ORCS3FileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ORCS3FileSystemImporter(PyArrowS3Importer)\n")),(0,l.kt)("p",null,"PyArrowS3Importer wrapper for use with the S3 file system and the ORC file type."),(0,l.kt)("h4",{id:"__init__-12"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(bucket_name: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bucket_name")," - Name of the bucket in S3 to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for S3FileSystem.")),(0,l.kt)("h2",{id:"feathers3filesystemimporter-objects"},"FeatherS3FileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class FeatherS3FileSystemImporter(PyArrowS3Importer)\n")),(0,l.kt)("p",null,"PyArrowS3Importer wrapper for use with the S3 file system and the feather file type."),(0,l.kt)("h4",{id:"__init__-13"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(bucket_name: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bucket_name")," - Name of the bucket in S3 to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for S3FileSystem.")),(0,l.kt)("h2",{id:"parquetazureblobfilesystemimporter-objects"},"ParquetAzureBlobFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ParquetAzureBlobFileSystemImporter(PyArrowAzureBlobImporter)\n")),(0,l.kt)("p",null,"PyArrowAzureBlobImporter wrapper for use with the Azure Blob file system and the parquet file type."),(0,l.kt)("h4",{id:"__init__-14"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(container_name: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container_name")," - Name of the container in Azure Blob storage to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for AzureBlobFileSystem.")),(0,l.kt)("h2",{id:"csvazureblobfilesystemimporter-objects"},"CSVAzureBlobFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class CSVAzureBlobFileSystemImporter(PyArrowAzureBlobImporter)\n")),(0,l.kt)("p",null,"PyArrowAzureBlobImporter wrapper for use with the Azure Blob file system and the CSV file type."),(0,l.kt)("h4",{id:"__init__-15"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(container_name: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container_name")," - Name of the container in Azure Blob storage to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for AzureBlobFileSystem.")),(0,l.kt)("h2",{id:"orcazureblobfilesystemimporter-objects"},"ORCAzureBlobFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ORCAzureBlobFileSystemImporter(PyArrowAzureBlobImporter)\n")),(0,l.kt)("p",null,"PyArrowAzureBlobImporter wrapper for use with the Azure Blob file system and the CSV file type."),(0,l.kt)("h4",{id:"__init__-16"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(container_name, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container_name")," - Name of the container in Blob storage to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for AzureBlobFileSystem.")),(0,l.kt)("h2",{id:"featherazureblobfilesystemimporter-objects"},"FeatherAzureBlobFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class FeatherAzureBlobFileSystemImporter(PyArrowAzureBlobImporter)\n")),(0,l.kt)("p",null,"PyArrowAzureBlobImporter wrapper for use with the Azure Blob file system and the Feather file type."),(0,l.kt)("h4",{id:"__init__-17"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(container_name, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None, **kwargs) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container_name")," - Name of the container in Blob storage to read from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for AzureBlobFileSystem.")),(0,l.kt)("h2",{id:"parquetlocalfilesystemimporter-objects"},"ParquetLocalFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ParquetLocalFileSystemImporter(PyArrowLocalFileSystemImporter)\n")),(0,l.kt)("p",null,"PyArrowLocalFileSystemImporter wrapper for use with the local file system and the parquet file type."),(0,l.kt)("h4",{id:"__init__-18"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(path: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - Full path to directory."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for LocalFileSystem.")),(0,l.kt)("h2",{id:"csvlocalfilesystemimporter-objects"},"CSVLocalFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class CSVLocalFileSystemImporter(PyArrowLocalFileSystemImporter)\n")),(0,l.kt)("p",null,"PyArrowLocalFileSystemImporter wrapper for use with the local file system and the CSV file type."),(0,l.kt)("h4",{id:"__init__-19"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(path: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - Full path to directory."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for LocalFileSystem.")),(0,l.kt)("h2",{id:"orclocalfilesystemimporter-objects"},"ORCLocalFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ORCLocalFileSystemImporter(PyArrowLocalFileSystemImporter)\n")),(0,l.kt)("p",null,"PyArrowLocalFileSystemImporter wrapper for use with the local file system and the ORC file type."),(0,l.kt)("h4",{id:"__init__-20"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(path: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - Full path to directory."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for LocalFileSystem.")),(0,l.kt)("h2",{id:"featherlocalfilesystemimporter-objects"},"FeatherLocalFileSystemImporter Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class FeatherLocalFileSystemImporter(PyArrowLocalFileSystemImporter)\n")),(0,l.kt)("p",null,"PyArrowLocalFileSystemImporter wrapper for use with the local file system and the Feather/IPC/Arrow file type."),(0,l.kt)("h4",{id:"__init__-21"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(path: str, data_configuration: Dict[str, Any], memgraph: Optional[Memgraph] = None) -> None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - Full path to directory."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_configuration")," - Configuration for the translations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memgraph")," - Connection to Memgraph (Optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Specified for LocalFileSystem.")))}u.isMDXComponent=!0}}]);