"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7596],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},95772:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const l={sidebar_label:"translator",title:"gqlalchemy.transformations.translators.translator"},o=void 0,s={unversionedId:"reference/transformations/translators/translator",id:"reference/transformations/translators/translator",title:"gqlalchemy.transformations.translators.translator",description:"Translator Objects",source:"@site/gqlalchemy/reference/transformations/translators/translator.md",sourceDirName:"reference/transformations/translators",slug:"/reference/transformations/translators/translator",permalink:"/docs/gqlalchemy/reference/transformations/translators/translator",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/transformations/translators/translator.md",tags:[],version:"current",frontMatter:{sidebar_label:"translator",title:"gqlalchemy.transformations.translators.translator"},sidebar:"gqlalchemy",previous:{title:"pyg_translator",permalink:"/docs/gqlalchemy/reference/transformations/translators/pyg_translator"},next:{title:"database_client",permalink:"/docs/gqlalchemy/reference/vendors/database_client"}},i={},c=[{value:"Translator Objects",id:"translator-objects",level:2},{value:"to_cypher_queries",id:"to_cypher_queries",level:4},{value:"get_instance",id:"get_instance",level:4},{value:"validate_features",id:"validate_features",level:4},{value:"get_all_edges_from_db",id:"get_all_edges_from_db",level:4},{value:"get_all_isolated_nodes_from_db",id:"get_all_isolated_nodes_from_db",level:4}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"translator-objects"},"Translator Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Translator(ABC)\n")),(0,a.kt)("h4",{id:"to_cypher_queries"},"to","_","cypher","_","queries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef to_cypher_queries(graph)\n")),(0,a.kt)("p",null,"Abstract method which doesn","'","t know how to produce cypher queries for a specific graph type and thus needs to be overriden."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graph")," - Can be of any type supported by the derived Translator object.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NotImplementedError")," - The method must be override by a specific translator.")),(0,a.kt)("h4",{id:"get_instance"},"get","_","instance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_instance()\n")),(0,a.kt)("p",null,"Abstract method which doesn","'","t know how to create the concrete instance so it needs to be overriden."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NotImplementedError")," - The method must be override by a specific translator.")),(0,a.kt)("h4",{id:"validate_features"},"validate","_","features"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef validate_features(cls, features: List, expected_num: int)\n")),(0,a.kt)("p",null,"Return true if features are okay to be set on all nodes/features."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"features")," - To be set on all nodes. It can be anything that can be converted to torch tensor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expected_num")," - This can be number of nodes or number of edges depending on whether features will be set on nodes or edges.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  None if features cannot be set or tensor of same features."),(0,a.kt)("h4",{id:"get_all_edges_from_db"},"get","_","all","_","edges","_","from","_","db"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_all_edges_from_db()\n")),(0,a.kt)("p",null,"Returns all edges from the database."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Query results when finding all edges."),(0,a.kt)("h4",{id:"get_all_isolated_nodes_from_db"},"get","_","all","_","isolated","_","nodes","_","from","_","db"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_all_isolated_nodes_from_db()\n")),(0,a.kt)("p",null,"Returns all isolated nodes from the database."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Query results for finding all isolated nodes."))}d.isMDXComponent=!0}}]);