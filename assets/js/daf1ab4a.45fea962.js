"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[29802],{3905:function(e,n,r){r.d(n,{Zo:function(){return l},kt:function(){return g}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function m(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),i=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):m(m({},n),e)),r},l=function(e){var n=i(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=i(r),g=a,d=u["".concat(s,".").concat(g)]||u[g]||c[g]||o;return r?t.createElement(d,m(m({ref:n},l),{},{components:r})):t.createElement(d,m({ref:n},l))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,m=new Array(o);m[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,m[1]=p;for(var i=2;i<o;i++)m[i]=r[i];return t.createElement.apply(null,m)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},90954:function(e,n,r){r.r(n),r.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return p},metadata:function(){return i},toc:function(){return c}});var t=r(87462),a=r(63366),o=(r(67294),r(3905)),m=["components"],p={id:"kubernetes",title:"Memgraph Helm Chart",sidebar_label:"Kubernetes"},s=void 0,i={unversionedId:"reference-guide/deployment/kubernetes",id:"version-2.3.1/reference-guide/deployment/kubernetes",title:"Memgraph Helm Chart",description:"If you need Memgraph as a part of your Kubernetes cluster, you can use the below Helm Chart for a simple setup. The Helm Chart is a collection of files that describe a related set of Kubernetes resources. Memgraph is a stateful application because it saves data to persistent disk storage for the server, clients, and other applications. The apiVersion is set to apps/v1, which means the below chart supports Helm version 3 or less.",source:"@site/memgraph_versioned_docs/version-2.3.1/reference-guide/deployment/kubernetes.md",sourceDirName:"reference-guide/deployment",slug:"/reference-guide/deployment/kubernetes",permalink:"/docs/memgraph/reference-guide/deployment/kubernetes",editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.3.1/reference-guide/deployment/kubernetes.md",tags:[],version:"2.3.1",frontMatter:{id:"kubernetes",title:"Memgraph Helm Chart",sidebar_label:"Kubernetes"},sidebar:"memgraph",previous:{title:"Docker",permalink:"/docs/memgraph/reference-guide/deployment/docker"},next:{title:"Import data overview",permalink:"/docs/memgraph/reference-guide/import-data/overview"}},l={},c=[],u={toc:c};function g(e){var n=e.components,r=(0,a.Z)(e,m);return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you need Memgraph as a part of your ",(0,o.kt)("strong",{parentName:"p"},"Kubernetes")," cluster, you can use the below ",(0,o.kt)("strong",{parentName:"p"},"Helm Chart")," for a simple setup. The Helm Chart is a collection of files that describe a related set of Kubernetes resources. Memgraph is a ",(0,o.kt)("strong",{parentName:"p"},"stateful application")," because it saves data to persistent disk storage for the server, clients, and other applications. The ",(0,o.kt)("inlineCode",{parentName:"p"},"apiVersion")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"apps/v1"),", which means the below chart supports Helm version 3 or less."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# StatefulSet\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: memgraph\n  labels:\n    app.kubernetes.io/name: memgraph\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  serviceName: memgraph-svc\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: memgraph\n  podManagementPolicy: OrderedReady\n  updateStrategy:\n        type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: memgraph\n    spec:\n      containers:\n        - name: memgraph\n          image: "memgraph/memgraph:latest"\n          imagePullPolicy: Never\n          ports:\n            - name: memgraph\n              containerPort: 7687\n          volumeMounts:\n            - name: memgraph-lib-storage\n              mountPath: /var/lib/memgraph\n            - name: memgraph-log-storage\n              mountPath: /var/log/memgraph\n            - name: memgraph-etc-config\n              mountPath: /etc/memgraph/memgraph.conf\n              subPath: memgraph.conf\n      volumes:\n        - name: memgraph-lib-storage\n          persistentVolumeClaim:\n            claimName: memgraph-lib-pv-claim\n        - name: memgraph-log-storage\n          persistentVolumeClaim:\n            claimName: memgraph-log-pv-claim\n        - name: memgraph-etc-config\n          configMap:\n            name: memgraph-config\n---\n# Service\napiVersion: v1\nkind: Service\nmetadata:\n  name: memgraph-svc\n  labels:\n    app.kubernetes.io/name: memgraph\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 7687\n      targetPort: 7687\n      protocol: TCP\n      name: bolt\n  selector:\n    app.kubernetes.io/name: memgraph\n')))}g.isMDXComponent=!0}}]);