"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[71274],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=d(t),u=r,f=h["".concat(l,".").concat(u)]||h[u]||c[u]||o;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},60592:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],s={sidebar_label:"neo4j",title:"gqlalchemy.vendors.neo4j"},l=void 0,d={unversionedId:"reference/vendors/neo4j",id:"reference/vendors/neo4j",title:"gqlalchemy.vendors.neo4j",description:"Neo4j Objects",source:"@site/gqlalchemy/reference/vendors/neo4j.md",sourceDirName:"reference/vendors",slug:"/reference/vendors/neo4j",permalink:"/docs/gqlalchemy/reference/vendors/neo4j",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/vendors/neo4j.md",tags:[],version:"current",frontMatter:{sidebar_label:"neo4j",title:"gqlalchemy.vendors.neo4j"},sidebar:"gqlalchemy",previous:{title:"memgraph",permalink:"/docs/gqlalchemy/reference/vendors/memgraph"},next:{title:"Changelog",permalink:"/docs/gqlalchemy/changelog"}},p={},c=[{value:"Neo4j Objects",id:"neo4j-objects",level:2},{value:"get_indexes",id:"get_indexes",level:4},{value:"ensure_indexes",id:"ensure_indexes",level:4},{value:"get_constraints",id:"get_constraints",level:4},{value:"new_connection",id:"new_connection",level:4},{value:"save_node",id:"save_node",level:4},{value:"load_node",id:"load_node",level:4},{value:"load_relationship",id:"load_relationship",level:4},{value:"save_relationship",id:"save_relationship",level:4}],h={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"neo4j-objects"},"Neo4j Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Neo4j(DatabaseClient)\n")),(0,o.kt)("h4",{id:"get_indexes"},"get","_","indexes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_indexes() -> List[Neo4jIndex]\n")),(0,o.kt)("p",null,"Returns a list of all database indexes (label and label-property types)."),(0,o.kt)("h4",{id:"ensure_indexes"},"ensure","_","indexes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def ensure_indexes(indexes: List[Neo4jIndex]) -> None\n")),(0,o.kt)("p",null,"Ensures that database indexes match input indexes."),(0,o.kt)("h4",{id:"get_constraints"},"get","_","constraints"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_constraints() -> List[Union[Neo4jConstraintExists, Neo4jConstraintUnique]]\n")),(0,o.kt)("p",null,"Returns a list of all database constraints (label and label-property types)."),(0,o.kt)("h4",{id:"new_connection"},"new","_","connection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def new_connection() -> Connection\n")),(0,o.kt)("p",null,"Creates new Neo4j connection."),(0,o.kt)("h4",{id:"save_node"},"save","_","node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def save_node(node: Node) -> Node\n")),(0,o.kt)("p",null,"Saves node to the database.\nIf the node._id is not None it fetches the node with the same id from\nthe database and updates it","'","s fields.\nIf the node has unique fields it fetches the nodes with the same unique\nfields from the database and updates it","'","s fields.\nOtherwise it creates a new node with the same properties.\nNull properties are ignored."),(0,o.kt)("h4",{id:"load_node"},"load","_","node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def load_node(node: Node) -> Optional[Node]\n")),(0,o.kt)("p",null,"Loads a node from the database.\nIf the node._id is not None it fetches the node from the database with that\ninternal id.\nIf the node has unique fields it fetches the node from the database with\nthose unique fields set.\nOtherwise it tries to find any node in the database that has all properties\nset to exactly the same values.\nIf no node is found or no properties are set it raises a GQLAlchemyError."),(0,o.kt)("h4",{id:"load_relationship"},"load","_","relationship"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,o.kt)("p",null,"Returns a relationship loaded from the database.\nIf the relationship._id is not None it fetches the relationship from\nthe database that has the same internal id.\nOtherwise it returns the relationship whose relationship._start_node_id\nand relationship._end_node_id and all relationship properties that\nare not None match the relationship in the database.\nIf there is no relationship like that in the database, or if there are\nmultiple relationships like that in the database, throws GQLAlchemyError."),(0,o.kt)("h4",{id:"save_relationship"},"save","_","relationship"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,o.kt)("p",null,"Saves a relationship to the database.\nIf relationship._id is not None it finds the relationship in the database\nand updates it","'","s properties with the values in ",(0,o.kt)("inlineCode",{parentName:"p"},"relationship"),".\nIf relationship._id is None, it creates a new relationship.\nIf you want to set a relationship._id instead of creating a new\nrelationship, use ",(0,o.kt)("inlineCode",{parentName:"p"},"load_relationship")," first."))}u.isMDXComponent=!0}}]);