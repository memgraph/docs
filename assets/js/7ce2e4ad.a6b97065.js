"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2210],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(t),m=r,c=h["".concat(p,".").concat(m)]||h[m]||u[m]||i;return t?a.createElement(c,o(o({ref:n},d),{},{components:t})):a.createElement(c,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},52220:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),o=["components"],s={id:"map-nodes-and-relationships",title:"How to map nodes and relationships",sidebar_label:"Map nodes and relationships"},p=void 0,l={unversionedId:"how-to-guides/ogm/map-nodes-and-relationships",id:"how-to-guides/ogm/map-nodes-and-relationships",title:"How to map nodes and relationships",description:"Through this guide, you will learn how to map Python classes to nodes and",source:"@site/gqlalchemy/how-to-guides/ogm/map-nodes-and-relationships.md",sourceDirName:"how-to-guides/ogm",slug:"/how-to-guides/ogm/map-nodes-and-relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/map-nodes-and-relationships",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/ogm/map-nodes-and-relationships.md",tags:[],version:"current",frontMatter:{id:"map-nodes-and-relationships",title:"How to map nodes and relationships",sidebar_label:"Map nodes and relationships"},sidebar:"gqlalchemy",previous:{title:"How-to guides overview",permalink:"/docs/gqlalchemy/how-to-guides"},next:{title:"Save nodes and relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/save-nodes-and-relationships"}},d={},u=[],h={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Through this guide, you will learn how to map Python classes to nodes and\nrelationships in a graph database. "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Make sure you have a running Memgraph instance. If you're not sure how to run\nMemgraph, check out the Memgraph ",(0,i.kt)("a",{parentName:"p",href:"/memgraph/#quick-start"},"Quick start"),".")),(0,i.kt)("p",null,"First, do all necessary imports and create an instance of the database:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Memgraph, Node, Relationship, Field\nfrom typing import Optional\n")),(0,i.kt)("p",null,"After that, you instantiate Memgraph and create classes representing the nodes\nand relationships. You are creating ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer")," nodes, where every\n",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer")," is also a ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),", but not every ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"db = Memgraph()\n\nclass User(Node, index=True, db=db):\n    id: str = Field(index=True, exist=True, unique=True, db=db)\n\nclass Streamer(User):\n    id: str = Field(index=True, exist=True, unique=True, db=db)\n    username: Optional[str] = Field(index=True, exist=True, unique=True, db=db)\n    url: Optional[str] = Field()\n    followers: Optional[int] = Field()\n    createdAt: Optional[str] = Field()\n    totalViewCount: Optional[int] = Field()\n    description: Optional[str] = Field()\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Node")," is a Python class which maps to a graph object in Memgraph. ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer")," are classes which inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," and they map to a label in the\ngraph database. Class ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," maps to a single ",(0,i.kt)("inlineCode",{parentName:"p"},":User")," label, while class\n",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer")," maps to multiple labels ",(0,i.kt)("inlineCode",{parentName:"p"},":Streamer:User"),", since it inherits from the\n",(0,i.kt)("inlineCode",{parentName:"p"},"User")," class. Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," argument in class definition is set to\n",(0,i.kt)("inlineCode",{parentName:"p"},"True"),". That means that you have created a label index on the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," label. If\nyou create a node with the label ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),", that node has a property ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", which is\nalso indexed (label-property index) and a unique string. With the help of\n",(0,i.kt)("inlineCode",{parentName:"p"},"Field()"),", you can define those constraints on the properties and define to\nwhich database that property will be saved. Argument ",(0,i.kt)("inlineCode",{parentName:"p"},"index=True")," is added to\nthe property ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", which is both in the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer")," class. Because\n",(0,i.kt)("inlineCode",{parentName:"p"},"Streamer")," inherits from ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),", the property ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," will be indexed on nodes\nlabeled with ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),". In the Cypher query language, that means the query ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE\nINDEX ON :User(id);")," will be executed."),(0,i.kt)("p",null,"In a similar way, you can create a relationship:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class ChatsWith(Relationship, type="CHATS_WITH"):\n    lastChatted: Optional[str] = Field()\n')),(0,i.kt)("p",null,"Now you have created a relationship of type ",(0,i.kt)("inlineCode",{parentName:"p"},"CHATS_WITH"),". This relationship has\nthe property ",(0,i.kt)("inlineCode",{parentName:"p"},"lastChatted"),", which is optional. If you want to create a\nrelationship without any properties, you can do that with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class ChatsWith(Relationship, type="CHATS_WITH"):\n    pass\n')),(0,i.kt)("p",null,"Hopefully this guide has taught you how to map nodes and relationships. If you\nhave any more questions, join our community and ping us on\n",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}m.isMDXComponent=!0}}]);