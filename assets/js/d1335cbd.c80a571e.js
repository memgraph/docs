"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[29300],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),i=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),u=i(a),h=n,d=u["".concat(l,".").concat(h)]||u[h]||c[h]||s;return a?r.createElement(d,o(o({ref:t},p),{},{components:a})):r.createElement(d,o({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:n,o[1]=m;for(var i=2;i<s;i++)o[i]=a[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},64974:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>m,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=a(87462),n=(a(67294),a(3905)),s=a(93996);const o={id:"kafka-streams",title:"How to manage Kafka streams",sidebar_label:"Kafka streams",slug:"/how-to-guides/streams/manage-kafka-streams"},m=void 0,l={unversionedId:"how-to-guides/streams/kafka-streams",id:"how-to-guides/streams/kafka-streams",title:"How to manage Kafka streams",description:"The stream functionality enables Memgraph to connect to a Kafka, Pulsar or",source:"@site/gqlalchemy/how-to-guides/streams/kafka-streams.md",sourceDirName:"how-to-guides/streams",slug:"/how-to-guides/streams/manage-kafka-streams",permalink:"/docs/gqlalchemy/how-to-guides/streams/manage-kafka-streams",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/streams/kafka-streams.md",tags:[],version:"current",frontMatter:{id:"kafka-streams",title:"How to manage Kafka streams",sidebar_label:"Kafka streams",slug:"/how-to-guides/streams/manage-kafka-streams"},sidebar:"gqlalchemy",previous:{title:"Use object graph mapper",permalink:"/docs/gqlalchemy/how-to-guides/ogm"},next:{title:"Pulsar streams",permalink:"/docs/gqlalchemy/how-to-guides/streams/manage-pulsar-streams"}},i={},p=[{value:"1. Create a Kafka stream in Memgraph",id:"1-create-a-kafka-stream-in-memgraph",level:2},{value:"2. Start the stream",id:"2-start-the-stream",level:2},{value:"3. Check the status of the stream",id:"3-check-the-status-of-the-stream",level:2},{value:"4. Delete the stream",id:"4-delete-the-stream",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The stream functionality enables Memgraph to connect to a Kafka, Pulsar or\nRedpanda cluster and run graph analytics on the data stream."),(0,n.kt)(s.ZP,{mdxType:"Neo4jWarning"}),(0,n.kt)("h2",{id:"1-create-a-kafka-stream-in-memgraph"},"1. Create a Kafka stream in Memgraph"),(0,n.kt)("p",null,"To set up the streams, first, create a ",(0,n.kt)("inlineCode",{parentName:"p"},"MemgraphKafkaStream")," object with all the\nrequired arguments:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name: str")," \u27a1 The name of the stream."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"topics: List[str]")," \u27a1 List of topic names."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"transform: str")," \u27a1 The transformation procedure for mapping incoming messages\nto Cypher queries."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"consumer_group: str")," \u27a1 Name of the consumer group in Memgraph."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"batch_interval: str = None")," \u27a1 Maximum wait time in milliseconds for consuming\nmessages before calling the transform procedure."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"batch_size: str = None")," \u27a1 Maximum number of messages to wait for before\ncalling the transform procedure."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bootstrap_servers: str = None")," \u27a1 Comma-separated list of bootstrap servers.")),(0,n.kt)("p",null,"Now you just have to call the ",(0,n.kt)("inlineCode",{parentName:"p"},"create_stream()")," method with the newly created\n",(0,n.kt)("inlineCode",{parentName:"p"},"MemgraphKafkaStream")," object:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import MemgraphKafkaStream\n\nstream = MemgraphKafkaStream(name="ratings_stream", topics=["ratings"], transform="movielens.rating", bootstrap_servers="localhost:9093")\ndb.create_stream(stream)\n')),(0,n.kt)("h2",{id:"2-start-the-stream"},"2. Start the stream"),(0,n.kt)("p",null,"To start the stream, just call the ",(0,n.kt)("inlineCode",{parentName:"p"},"start_stream()")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"db.start_stream(stream)\n")),(0,n.kt)("h2",{id:"3-check-the-status-of-the-stream"},"3. Check the status of the stream"),(0,n.kt)("p",null,"To check the status of the stream in Memgraph, just run the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"check = db.get_streams()\n")),(0,n.kt)("h2",{id:"4-delete-the-stream"},"4. Delete the stream"),(0,n.kt)("p",null,"You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"drop_stream()")," method to delete a stream:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"check = db.drop_stream(stream)\n")))}u.isMDXComponent=!0},93996:(e,t,a)=>{a.d(t,{ZP:()=>o});var r=a(87462),n=(a(67294),a(3905));const s={toc:[]};function o(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{type:"important"},(0,n.kt)("p",{parentName:"admonition"},"This feature only works with Memgraph. Neo4j is not supported.")))}o.isMDXComponent=!0}}]);