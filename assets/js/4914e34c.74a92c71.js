"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[31914],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return f}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),y=c(t),f=a,m=y["".concat(p,".").concat(f)]||y[f]||u[f]||o;return t?n.createElement(m,l(l({ref:r},s),{},{components:t})):n.createElement(m,l({ref:r},s))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=y;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},37754:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var n=t(87462),a=t(63366),o=(t(67294),t(3905)),l=["components"],i={sidebar_label:"transformations",title:"gqlalchemy.transformations"},p=void 0,c={unversionedId:"reference/transformations",id:"reference/transformations",title:"gqlalchemy.transformations",description:"nx\\to\\cypher",source:"@site/gqlalchemy/reference/transformations.md",sourceDirName:"reference",slug:"/reference/transformations",permalink:"/docs/gqlalchemy/reference/transformations",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/transformations.md",tags:[],version:"current",frontMatter:{sidebar_label:"transformations",title:"gqlalchemy.transformations"},sidebar:"gqlalchemy",previous:{title:"query_builder",permalink:"/docs/gqlalchemy/reference/query_builder"},next:{title:"utilities",permalink:"/docs/gqlalchemy/reference/utilities"}},s={},u=[{value:"nx_to_cypher",id:"nx_to_cypher",level:4},{value:"nx_graph_to_memgraph_parallel",id:"nx_graph_to_memgraph_parallel",level:4},{value:"NetworkXCypherBuilder Objects",id:"networkxcypherbuilder-objects",level:2},{value:"yield_queries",id:"yield_queries",level:4},{value:"yield_query_groups",id:"yield_query_groups",level:4}],y={toc:u};function f(e){var r=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},y,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"nx_to_cypher"},"nx","_","to","_","cypher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def nx_to_cypher(graph: nx.Graph, config: NetworkXCypherConfig = None) -> Iterator[str]\n")),(0,o.kt)("p",null,"Generates a Cypher query for creating a graph."),(0,o.kt)("h4",{id:"nx_graph_to_memgraph_parallel"},"nx","_","graph","_","to","_","memgraph","_","parallel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def nx_graph_to_memgraph_parallel(graph: nx.Graph, host: str = "127.0.0.1", port: int = 7687, username: str = "", password: str = "", encrypted: bool = False, config: NetworkXCypherConfig = None) -> None\n')),(0,o.kt)("p",null,"Generates Cypher queries and inserts data into Memgraph in parallel."),(0,o.kt)("h2",{id:"networkxcypherbuilder-objects"},"NetworkXCypherBuilder Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class NetworkXCypherBuilder()\n")),(0,o.kt)("h4",{id:"yield_queries"},"yield","_","queries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def yield_queries(graph: nx.Graph) -> Iterator[str]\n")),(0,o.kt)("p",null,"Generates Cypher queries for creating a graph."),(0,o.kt)("h4",{id:"yield_query_groups"},"yield","_","query","_","groups"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def yield_query_groups(graph: nx.Graph) -> List[Iterator[str]]\n")),(0,o.kt)("p",null,"Generates Cypher queries for creating a graph by query groups."))}f.isMDXComponent=!0}}]);