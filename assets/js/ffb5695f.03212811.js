"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9583],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>c});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),s=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=s(e.components);return r.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(t),c=n,h=d["".concat(i,".").concat(c)]||d[c]||u[c]||l;return t?r.createElement(h,o(o({ref:a},m),{},{components:t})):r.createElement(h,o({ref:a},m))}));function c(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=d;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},65513:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>p,metadata:()=>s,toc:()=>u});var r=t(87462),n=(t(67294),t(3905)),l=t(74866),o=t(85162);const p={title:"How to use query builder",sidebar_label:"Use query builder"},i=void 0,s={unversionedId:"how-to-guides/query-builder",id:"how-to-guides/query-builder",title:"How to use query builder",description:"Through this guide, you will learn how to use GQLAlchemy query builder to:",source:"@site/gqlalchemy/how-to-guides/query-builder.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/query-builder",permalink:"/docs/gqlalchemy/how-to-guides/query-builder",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/query-builder.md",tags:[],version:"current",frontMatter:{title:"How to use query builder",sidebar_label:"Use query builder"},sidebar:"gqlalchemy",previous:{title:"Use object graph mapper",permalink:"/docs/gqlalchemy/how-to-guides/ogm"},next:{title:"Kafka streams",permalink:"/docs/gqlalchemy/how-to-guides/streams/manage-kafka-streams"}},m={},u=[{value:"Create nodes and relationships",id:"create-nodes-and-relationships",level:2},{value:"Create a node",id:"create-a-node",level:3},{value:"Create a relationship",id:"create-a-relationship",level:3},{value:"Merge nodes and relationships",id:"merge-nodes-and-relationships",level:2},{value:"Merge a node",id:"merge-a-node",level:3},{value:"Merge a relationship",id:"merge-a-relationship",level:3},{value:"Set or update properties and labels",id:"set-or-update-properties-and-labels",level:2},{value:"Set a property",id:"set-a-property",level:3},{value:"Set a label",id:"set-a-label",level:3},{value:"Replace all properties",id:"replace-all-properties",level:3},{value:"Update all properties",id:"update-all-properties",level:3},{value:"Filter data",id:"filter-data",level:2},{value:"Filter data by property comparison",id:"filter-data-by-property-comparison",level:3},{value:"Filter data by property value",id:"filter-data-by-property-value",level:3},{value:"Filter data by label",id:"filter-data-by-label",level:3},{value:"Return results",id:"return-results",level:2},{value:"Return all variables from a query",id:"return-all-variables-from-a-query",level:3},{value:"Return specific variables from a query",id:"return-specific-variables-from-a-query",level:3},{value:"Limit the number of returned results",id:"limit-the-number-of-returned-results",level:3},{value:"Order the returned results",id:"order-the-returned-results",level:3},{value:"Order by a list of values",id:"order-by-a-list-of-values",level:3},{value:"Delete and remove objects",id:"delete-and-remove-objects",level:2},{value:"Delete a node",id:"delete-a-node",level:3},{value:"Delete a relationship",id:"delete-a-relationship",level:3},{value:"Remove properties",id:"remove-properties",level:3},{value:"Call procedures",id:"call-procedures",level:2},{value:"Call procedure with no arguments",id:"call-procedure-with-no-arguments",level:3},{value:"Call procedure with arguments",id:"call-procedure-with-arguments",level:3},{value:"Full code example",id:"full-code-example",level:2}],d={toc:u};function c(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Through this guide, you will learn how to use GQLAlchemy query builder to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-nodes-and-relationships"},(0,n.kt)("strong",{parentName:"a"},"Create nodes and relationships")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-a-node"},(0,n.kt)("strong",{parentName:"a"},"Create a node"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-a-relationship"},(0,n.kt)("strong",{parentName:"a"},"Create a relationship"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#merge-nodes-and-relationships"},(0,n.kt)("strong",{parentName:"a"},"Merge nodes and relationships")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#merge-a-node"},(0,n.kt)("strong",{parentName:"a"},"Merge a node"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#merge-a-relationship"},(0,n.kt)("strong",{parentName:"a"},"Merge a relationship"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#set-or-update-properties-and-labels"},(0,n.kt)("strong",{parentName:"a"},"Set or update properties and labels")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#set-a-property"},(0,n.kt)("strong",{parentName:"a"},"Set a property"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#set-a-label"},(0,n.kt)("strong",{parentName:"a"},"Set a label"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#replace-all-properties"},(0,n.kt)("strong",{parentName:"a"},"Replace all properties"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#update-all-properties"},(0,n.kt)("strong",{parentName:"a"},"Update all properties"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data"},(0,n.kt)("strong",{parentName:"a"},"Filter data")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data-by-property-comparison"},(0,n.kt)("strong",{parentName:"a"},"Filter data by property comparison"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data-by-property-value"},(0,n.kt)("strong",{parentName:"a"},"Filter data by property value"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data-by-label"},(0,n.kt)("strong",{parentName:"a"},"Filter data by label"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#return-results"},(0,n.kt)("strong",{parentName:"a"},"Return results")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#return-all-variables-from-a-query"},(0,n.kt)("strong",{parentName:"a"},"Return all variables from a query"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#return-specific-variables-from-a-query"},(0,n.kt)("strong",{parentName:"a"},"Return specific variables from a query"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#limit-the-number-of-returned-results"},(0,n.kt)("strong",{parentName:"a"},"Limit the number of returned results"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#order-the-returned-results"},(0,n.kt)("strong",{parentName:"a"},"Order the returned results"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#order-by-a-list-of-values"},(0,n.kt)("strong",{parentName:"a"},"Order by a list of values"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#delete-and-remove-objects"},(0,n.kt)("strong",{parentName:"a"},"Delete and remove objects")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#delete-a-node"},(0,n.kt)("strong",{parentName:"a"},"Delete a node"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#delete-a-relationship"},(0,n.kt)("strong",{parentName:"a"},"Delete a relationship"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#remove-properties"},(0,n.kt)("strong",{parentName:"a"},"Remove properties"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#call-procedures"},(0,n.kt)("strong",{parentName:"a"},"Call procedures")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#call-procedure-with-no-arguments"},(0,n.kt)("strong",{parentName:"a"},"Call procedure with no arguments"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#call-procedure-with-arguments"},(0,n.kt)("strong",{parentName:"a"},"Call procedure with arguments")))))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Hopefully, this guide will teach you how to properly use GQLAlchemy query builder. If you\nhave any more questions, join our community and ping us on ",(0,n.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),".")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"To test the above features, you must install ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/installation"},"GQLAlchemy")," and have a running Memgraph instance. If you're unsure how to run Memgraph, check out the Memgraph ",(0,n.kt)("a",{parentName:"p",href:"/memgraph/#quick-start"},"Quick start"),".")),(0,n.kt)("h2",{id:"create-nodes-and-relationships"},"Create nodes and relationships"),(0,n.kt)("p",null,"Methods ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#create"},(0,n.kt)("inlineCode",{parentName:"a"},"create()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#merge"},(0,n.kt)("inlineCode",{parentName:"a"},"merge()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#match"},(0,n.kt)("inlineCode",{parentName:"a"},"match()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#node"},(0,n.kt)("inlineCode",{parentName:"a"},"node()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#to"},(0,n.kt)("inlineCode",{parentName:"a"},"to()"))," and ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#from_"},(0,n.kt)("inlineCode",{parentName:"a"},"from_()"))," are most often used when building a query to create or merge nodes and relationships."),(0,n.kt)("h3",{id:"create-a-node"},"Create a node"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"create a node")," with label ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," and a property ",(0,n.kt)("inlineCode",{parentName:"p"},"name"),' of value "Ron", run the following code:'),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import create\n\nquery = create().node(labels="Person", name="Ron").execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:Person {name: 'Ron'});\n")))),(0,n.kt)("h3",{id:"create-a-relationship"},"Create a relationship"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"create a relationship")," of type ",(0,n.kt)("inlineCode",{parentName:"p"},"FRIENDS_WITH")," with property ",(0,n.kt)("inlineCode",{parentName:"p"},"since")," from one ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," node to another, run the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import create\n\nquery = (\n    create()\n    .node(labels="Person", name="Leslie")\n    .to(relationship_type="FRIENDS_WITH", since="2023-02-16")\n    .node(labels="Person", name="Ron")\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:Person {name: 'Leslie'})-[:FRIENDS_WITH {since: '2023-02-16'}]->(:Person {name: 'Ron'});\n")))),(0,n.kt)("p",null,"Since you are creating a relationship between two nodes, without first matching the existing nodes or merging the relationships, the nodes will be created too."),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"create a relationship")," of type ",(0,n.kt)("inlineCode",{parentName:"p"},"FRIENDS_WITH")," from one ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," node to another ",(0,n.kt)("strong",{parentName:"p"},"in an opposite direction"),", run the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import create\n\nquery = (\n    create()\n    .node(labels="Person", name="Leslie")\n    .from(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", name="Ron")\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:Person {name: 'Leslie'})<-[:FRIENDS_WITH]-(:Person {name: 'Ron'});\n")))),(0,n.kt)("p",null,"Again, since you are creating a relationship between two nodes, without first matching the existing nodes or merging the relationships, the nodes will be created too."),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"create a relationship between existing nodes"),", first match the existing nodes and then create a relationship by running the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import create, match\n\nquery = (\n    match()\n    .node(labels="Person", name="Leslie", variable="leslie")\n    .match()\n    .node(labels="Person", name="Ron", variable="ron")\n    create()\n    .node(variable="leslie")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(variable="ron")\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (leslie:Person {name: 'Leslie'})\nMATCH (ron:Person {name: 'Ron'})\nCREATE (leslie)-[:FRIENDS_WITH]->(ron);\n")))),(0,n.kt)("p",null,"Read more about ",(0,n.kt)("inlineCode",{parentName:"p"},"CREATE")," clause in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/cypher-manual/clauses/create"},"Cypher manual"),"."),(0,n.kt)("h2",{id:"merge-nodes-and-relationships"},"Merge nodes and relationships"),(0,n.kt)("h3",{id:"merge-a-node"},"Merge a node"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"merge a node"),", run the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import merge\n\nquery = merge().node(labels="Person", name="Leslie").execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MERGE (:Person {name: 'Leslie'});\n")))),(0,n.kt)("h3",{id:"merge-a-relationship"},"Merge a relationship"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"merge a relationship"),", first match the existing nodes and then merge the relationship by running the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match, merge\n\nquery = (\n    match()\n    .node(labels="Person", name="Leslie", variable="leslie")\n    .match()\n    .node(labels="Person", name="Ron", variable="ron")\n    .merge()\n    .node(variable="leslie")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(variable="ron")\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (leslie:Person {name: 'Leslie'})\nMATCH (ron:Person {name: 'Ron'})\nMERGE (leslie)-[:FRIENDS_WITH]->(ron);\n")))),(0,n.kt)("p",null,"Read more about ",(0,n.kt)("inlineCode",{parentName:"p"},"MERGE")," clause in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/cypher-manual/clauses/merge"},"Cypher manual"),"."),(0,n.kt)("h2",{id:"set-or-update-properties-and-labels"},"Set or update properties and labels"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#set_"},(0,n.kt)("inlineCode",{parentName:"a"},"set_()"))," method is used to set labels on nodes, and properties on nodes and relationships. When being set, labels and properties can be updated or created, depending on the operator used as the argument of ",(0,n.kt)("inlineCode",{parentName:"p"},"set_()")," method."),(0,n.kt)("h3",{id:"set-a-property"},"Set a property"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"set a property")," of a graph object use the ",(0,n.kt)("strong",{parentName:"p"},"assignment operator")," from the query builder or a simple equals sign as a string - ",(0,n.kt)("inlineCode",{parentName:"p"},'"="'),"."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = (\n    create()\n    .node(labels="Country", variable="c", name="Germany")\n    .set_(item="c.population", operator=Operator.ASSIGNMENT, literal=83000001)\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (c:Country {name: 'Germany'}) SET c.population = 83000001;\n")))),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"Operator")," is an enumeration class defined in the\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/blob/main/gqlalchemy/query_builders/declarative_base.py#L84-L94"},(0,n.kt)("inlineCode",{parentName:"a"},"declarative_base.py")),". It can be imported from ",(0,n.kt)("inlineCode",{parentName:"p"},"gqlalchemy.query_builders.memgraph_query_builder"),". "),(0,n.kt)("p",{parentName:"admonition"},"If you don't want to import it, you can use strings ",(0,n.kt)("inlineCode",{parentName:"p"},'"="'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'">="'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'">"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"<>"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'":"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"<"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"<="'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"!="')," or ",(0,n.kt)("inlineCode",{parentName:"p"},'"+="')," instead.")),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"set a property of already existing node"),", first match the node and then set its property. "),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = (\n    match()\n    .node(labels="Country", variable="c", name="Germany")\n    .set_(item="c.population", operator=Operator.ASSIGNMENT, literal=10000)\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'Germany'}) SET c.population = 10000;\n")))),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"set multiple properties of a node"),", run the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = (\n    match()\n    .node(variable="n")\n    .where(item="n.name", operator="=", literal="Germany")\n    .set_(item="n.population", operator=Operator.ASSIGNMENT, literal=83000001)\n    .set_(item="n.capital", operator=Operator.ASSIGNMENT, literal="Berlin")\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) WHERE n.name = 'Germany' SET n.population = 83000001 SET n.capital = 'Berlin';\n")))),(0,n.kt)("p",null,"If a node already has the properties we are setting, they will be updated to a new value. Otherwise, the properties will be created and their value will be set."),(0,n.kt)("h3",{id:"set-a-label"},"Set a label"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"set a label of a node"),", run the following code:"),(0,n.kt)(l.Z,{"defaultValu\xdfe":"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = Match()\n        .node(variable="c", name="Germany")\n        .set_(item="c", operator=Operator.LABEL_FILTER, expression="Land")\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c {name: 'Germany'}) SET c:Land RETURN *;\n")))),(0,n.kt)("p",null,"If a node already has a label, then it will have both old and new label. "),(0,n.kt)("h3",{id:"replace-all-properties"},"Replace all properties"),(0,n.kt)("p",null,"With Cypher, it is possible to ",(0,n.kt)("strong",{parentName:"p"},"replace all properties using a map")," within a ",(0,n.kt)("inlineCode",{parentName:"p"},"SET")," clause. Here is how to do it with query builder:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = (\n    match()\n    .node(variable="c", labels="Country")\n    .where(item="c.name", operator="=", literal="Germany")\n    .set_(\n        item="c",\n        operator=Operator.ASSIGNMENT,\n        literal={"country_name": "Germany", "population": 85000000},\n    )\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country) WHERE c.name = 'Germany' SET c = {country_name: 'Germany', population: 85000000};\n")))),(0,n.kt)("p",null,"The properties that are not a part of the graph objects, but are in the map, will be set. The properties that are not in the map, but are a part of the graph objects, will be removed. If a property is both in map and a graph object property, it will be updated to a new value set in map."),(0,n.kt)("h3",{id:"update-all-properties"},"Update all properties"),(0,n.kt)("p",null,"With Cypher, it is also possible to ",(0,n.kt)("strong",{parentName:"p"},"update all properties using a map")," within a ",(0,n.kt)("inlineCode",{parentName:"p"},"SET")," clause by  using the ",(0,n.kt)("strong",{parentName:"p"},"increment operator")," (",(0,n.kt)("inlineCode",{parentName:"p"},"+="),"). Here is how to do it with query builder:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = (\n    match()\n    .node(variable="c", labels="Country")\n    .where(item="c.country_name", operator="=", literal="Germany")\n    .set_(\n        item="c",\n        operator=Operator.INCREMENT,\n        literal={"population": "85000000"},\n    )\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country) WHERE c.country_name = 'Germany' SET c += {population: '85000000'};\n")))),(0,n.kt)("p",null,"All the properties in the map (value of the ",(0,n.kt)("inlineCode",{parentName:"p"},"literal")," argument) that are on a graph object will be updated. The properties that are not on a graph object but are in the map will be added. Properties that are not present in the map will be left as is."),(0,n.kt)("h2",{id:"filter-data"},"Filter data"),(0,n.kt)("p",null,"You can use the methods ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#where"},(0,n.kt)("inlineCode",{parentName:"a"},"where()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#where_not"},(0,n.kt)("inlineCode",{parentName:"a"},"where_not()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#or_where"},(0,n.kt)("inlineCode",{parentName:"a"},"or_where()")),",\n",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#or_where_node"},(0,n.kt)("inlineCode",{parentName:"a"},"or_where_not()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#and_where"},(0,n.kt)("inlineCode",{parentName:"a"},"and_where()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#and_where_not"},(0,n.kt)("inlineCode",{parentName:"a"},"and_where_not()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#xor_where"},(0,n.kt)("inlineCode",{parentName:"a"},"xor_where()"))," and\n",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#xor_where_not"},(0,n.kt)("inlineCode",{parentName:"a"},"xor_where_not()"))," to construct queries that will filter data."),(0,n.kt)("h3",{id:"filter-data-by-property-comparison"},"Filter data by property comparison"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"filter data by comparing properties")," of two nodes, run the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", variable="p2")\n    .where(item="p1.name", operator=Operator.LESS_THAN, expression="p2.name")\n    .return_()\n    .execute()\n)\n\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE p1.name < p2.name RETURN *;\n")))),(0,n.kt)("p",null,"Keyword arguments that can be used in filtering methods are ",(0,n.kt)("inlineCode",{parentName:"p"},"literal")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"expression"),". Usually we use ",(0,n.kt)("inlineCode",{parentName:"p"},"literal")," for property values and ",(0,n.kt)("inlineCode",{parentName:"p"},"expression")," for property names and labels. That is because property names and labels shouldn't be quoted in Cypher statements. "),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"You will probably see the ",(0,n.kt)("inlineCode",{parentName:"p"},"GQLAlchemySubclassNotFoundWarning")," warning. This happens if you did not define a Python class which maps to a graph object in the database. To do that, check the ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides/ogm"},"object graph mapper how-to guide"),". To ignore such warnings, you can do the following before query execution:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import models\n\nmodels.IGNORE_SUBCLASSNOTFOUNDWARNING = True\n"))),(0,n.kt)("p",null,"Standard boolean operators like ",(0,n.kt)("inlineCode",{parentName:"p"},"NOT"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"AND"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"OR")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"XOR")," are used in the\nCypher query language. To have ",(0,n.kt)("inlineCode",{parentName:"p"},"NOT")," within ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," clause, you need to use\n",(0,n.kt)("inlineCode",{parentName:"p"},"where_not()")," method."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", variable="p2")\n    .where_not(item="p1.name", operator=Operator.LESS_THAN, expression="p2.name")\n    .return_()\n    .execute()\n)\n\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE NOT p1.name < p2.name RETURN *;\n")))),(0,n.kt)("p",null,"In a similar way, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"AND")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"AND NOT")," clauses which correspond to\nthe methods ",(0,n.kt)("inlineCode",{parentName:"p"},"and_where()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"and_not_where()"),". Using the query below you can\nfind all persons with the same ",(0,n.kt)("inlineCode",{parentName:"p"},"address")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"last_name"),", but different\n",(0,n.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", variable="p2")\n    .where(item="p1.address", operator=Operator.EQUAL, expression="p2.address")\n    .and_where(item="p1.last_name", operator=Operator.EQUAL, expression="p2.last_name")\n    .and_not_where(item="p1.name", operator=Operator.EQUAL, expression="p2.name")\n    .return_()\n    .execute()\n)\n\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person)\nWHERE p1.address = p2.address\nAND p1.last_name = p2.last_name\nAND NOT p1.name = p2.name\nRETURN *;\n")))),(0,n.kt)("p",null,"The same goes for the ",(0,n.kt)("inlineCode",{parentName:"p"},"OR"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"OR NOT"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"XOR")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"XOR NOT")," clauses, which\ncorrespond to the methods ",(0,n.kt)("inlineCode",{parentName:"p"},"or_where()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"or_not_where()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"xor_where()")," and\n",(0,n.kt)("inlineCode",{parentName:"p"},"xor_not_where()"),"."),(0,n.kt)("h3",{id:"filter-data-by-property-value"},"Filter data by property value"),(0,n.kt)("p",null,"You can ",(0,n.kt)("strong",{parentName:"p"},"filter data by comparing the property of a graph object to some value")," (a\nliteral). Below you can see how to compare ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," property of a node to the\ninteger."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p")\n    .where(item="p.age", operator=Operator.GREATER_THAN, literal=18)\n    .return_()\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) WHERE p.age > 18 RETURN *;\n")))),(0,n.kt)("p",null,"The third keyword argument is ",(0,n.kt)("inlineCode",{parentName:"p"},"literal")," since we wanted the property ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," to be saved as an integer. If we used ",(0,n.kt)("inlineCode",{parentName:"p"},"expression")," keyword argument instead of ",(0,n.kt)("inlineCode",{parentName:"p"},"literal"),", then the ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," property would be a string (it would be quoted in Cypher query). Instead of ",(0,n.kt)("inlineCode",{parentName:"p"},"Operator.GREATER_THAN"),", a simple string of value ",(0,n.kt)("inlineCode",{parentName:"p"},'">"')," can be used."),(0,n.kt)("p",null,"Just like in ",(0,n.kt)("a",{parentName:"p",href:"#filter-data-by-property-comparison"},"property comparison"),", it is possible to use different boolean operators to further filter the data."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p")\n    .where(item="p.age", operator=Operator.GREATER_THAN, literal=18)\n    .or_where(item="p.name", operator=Operator.EQUAL, literal="John")\n    .return_()\n    .execute()\n)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (p:Person) WHERE p.age > 18 OR p.name = "John" RETURN *;\n')))),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"literal")," keyword is used again since you want ",(0,n.kt)("inlineCode",{parentName:"p"},"John")," to be quoted in the\nCypher query (to be saved as a string in the database)."),(0,n.kt)("h3",{id:"filter-data-by-label"},"Filter data by label"),(0,n.kt)("p",null,"Nodes can be filtered by their label using the ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," clause instead of\nspecifying it directly in the ",(0,n.kt)("inlineCode",{parentName:"p"},"MATCH")," clause. You have to use ",(0,n.kt)("inlineCode",{parentName:"p"},"expression")," as\nthe third keyword argument again since you don't want the quotes surrounding the\nlabel in the Cypher clause."),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"filter data by label")," use the following code:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nresults = list(\n    match()\n    .node(variable="p")\n    .where(item="p", operator=Operator.LABEL_FILTER, expression="Person")\n    .return_()\n    .execute()\n)\n\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p) WHERE p:Person RETURN *;\n")))),(0,n.kt)("p",null,"Just like in ",(0,n.kt)("a",{parentName:"p",href:"#filter-data-by-property-comparison"},"property comparison"),", it is possible to use different boolean operators to further filter the data."),(0,n.kt)("h2",{id:"return-results"},"Return results"),(0,n.kt)("p",null,"You can use the methods ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#return_"},(0,n.kt)("inlineCode",{parentName:"a"},"return_()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#limit"},(0,n.kt)("inlineCode",{parentName:"a"},"limit()")),", ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#skip"},(0,n.kt)("inlineCode",{parentName:"a"},"skip()"))," and ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#order_by"},(0,n.kt)("inlineCode",{parentName:"a"},"order_by()"))," to\nconstruct queries that will return data from the database."),(0,n.kt)("h3",{id:"return-all-variables-from-a-query"},"Return all variables from a query"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"return all the variables from a query"),", use the ",(0,n.kt)("inlineCode",{parentName:"p"},"return_()")," method at the\nend of the query:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nresults = list(match().node(labels="Person", variable="p").return_().execute())\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) RETURN *;\n")))),(0,n.kt)("h3",{id:"return-specific-variables-from-a-query"},"Return specific variables from a query"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"return only a subset of variables")," from a query, specify them in the\n",(0,n.kt)("inlineCode",{parentName:"p"},"return_()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to()\n    .node(labels="Person", variable="p2")\n    .return_(results=[("p1", "first"), "p2"])\n    .execute()\n)\n\nfor result in results:\n    print("Here is one pair:")\n    print(result["first"])\n    print(result["p2"])\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[]->(p2:Person) RETURN p1 AS first, p2;\n")))),(0,n.kt)("h3",{id:"limit-the-number-of-returned-results"},"Limit the number of returned results"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"limit the number of returned results"),", use the ",(0,n.kt)("inlineCode",{parentName:"p"},"limit()")," method after the\n",(0,n.kt)("inlineCode",{parentName:"p"},"return_()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nresults = list(match().node(labels="Person", variable="p").return_().limit(3).execute())\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) RETURN * LIMIT 3;\n")))),(0,n.kt)("h3",{id:"order-the-returned-results"},"Order the returned results"),(0,n.kt)("p",null,"The default ordering in the Cypher query language is ascending (",(0,n.kt)("inlineCode",{parentName:"p"},"ASC")," or\n",(0,n.kt)("inlineCode",{parentName:"p"},"ASCENDING"),"), and if you want the descending order, you need to add the ",(0,n.kt)("inlineCode",{parentName:"p"},"DESC"),"\nor ",(0,n.kt)("inlineCode",{parentName:"p"},"DESCENDING")," keyword to the ",(0,n.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clause."),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"order the return results by one value"),", use the ",(0,n.kt)("inlineCode",{parentName:"p"},"order_by(properties)")," method,\nwhere ",(0,n.kt)("inlineCode",{parentName:"p"},"properties")," can be a string (a property) or a tuple of two strings (a\nproperty and an order)."),(0,n.kt)("p",null,"The following query will order the results in an ascending (default) order by\nthe property ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," of a node."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nresults = list(\n    match().node(variable="n").return_().order_by(properties="n.name").execute()\n)\nprint(results)\n\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.name;\n")))),(0,n.kt)("p",null,"You can also emphasize that you want an ascending order:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(properties=("n.name", Order.ASC))\n    .execute()\n)\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.name ASC;\n")))),(0,n.kt)("p",null,"The same can be done with the keyword ",(0,n.kt)("inlineCode",{parentName:"p"},"ASCENDING"),":"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(properties=("n.name", Order.ASCENDING))\n    .execute()\n)\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.name ASCENDING;\n")))),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"Order")," is an enumeration class defined in the\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/blob/main/gqlalchemy/query_builders/declarative_base.py#L97-L101"},(0,n.kt)("inlineCode",{parentName:"a"},"declarative_base.py")),". It can be imported from ",(0,n.kt)("inlineCode",{parentName:"p"},"gqlalchemy.query_builders.memgraph_query_builder"),". "),(0,n.kt)("p",{parentName:"admonition"},"If you don't want to import it, you can use strings ",(0,n.kt)("inlineCode",{parentName:"p"},'"ASC"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"ASCENDING"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"DESC"')," or ",(0,n.kt)("inlineCode",{parentName:"p"},'"DESCENDING"')," instead.")),(0,n.kt)("p",null,"To order the query results in descending order, you need to specify the ",(0,n.kt)("inlineCode",{parentName:"p"},"DESC"),"\nor ",(0,n.kt)("inlineCode",{parentName:"p"},"DESCENDING")," keyword. Hence, the argument of the ",(0,n.kt)("inlineCode",{parentName:"p"},"order_by()")," method must be\na tuple."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(properties=("n.name", Order.DESC))\n    .execute()\n)\n\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.name DESC;\n")))),(0,n.kt)("p",null,"Similarly, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"Order.DESCENDING")," to get ",(0,n.kt)("inlineCode",{parentName:"p"},"DESCENDING")," keyword in ",(0,n.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clause."),(0,n.kt)("h3",{id:"order-by-a-list-of-values"},"Order by a list of values"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"order the returned results by more than one value"),", use the\n",(0,n.kt)("inlineCode",{parentName:"p"},"order_by(properties)")," method, where ",(0,n.kt)("inlineCode",{parentName:"p"},"properties")," can be a list of strings or\ntuples of strings (list of properties with or without order)."),(0,n.kt)("p",null,"The following query will order the results in ascending order by the property\n",(0,n.kt)("inlineCode",{parentName:"p"},"id"),", then again in ascending (default) order by the property ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," of a node.\nAfter that, it will order the results in descending order by the property\n",(0,n.kt)("inlineCode",{parentName:"p"},"last_name"),", then in ascending order by the property ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," of a node. Lastly,\nthe query will order the results in descending order by the node property\n",(0,n.kt)("inlineCode",{parentName:"p"},"middle_name"),"."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(\n        properties=[\n            ("n.id", Order.ASC),\n            "n.name",\n            ("n.last_name", Order.DESC),\n            ("n.age", Order.ASCENDING),\n            ("n.middle_name", Order.DESCENDING),\n        ]\n    )\n    .execute()\n)\n\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) \nRETURN * \nORDER BY n.id ASC, n.name, n.last_name DESC, n.age ASCENDING, n.middle_name DESCENDING;\n")))),(0,n.kt)("h2",{id:"delete-and-remove-objects"},"Delete and remove objects"),(0,n.kt)("p",null,"You can use the methods ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#delete"},(0,n.kt)("inlineCode",{parentName:"a"},"delete()"))," and ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#remove"},(0,n.kt)("inlineCode",{parentName:"a"},"remove()"))," to construct queries that will\nremove nodes and relationships or properties and labels."),(0,n.kt)("h3",{id:"delete-a-node"},"Delete a node"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"delete a node")," from the database, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"delete()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nmatch().node(labels="Person", name="Harry", variable="p").delete(\n    variable_expressions="p"\n).execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person {name: 'Harry'}) DELETE p;\n")))),(0,n.kt)("h3",{id:"delete-a-relationship"},"Delete a relationship"),(0,n.kt)("p",null,"To ",(0,n.kt)("strong",{parentName:"p"},"delete a relationship")," from the database, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"delete()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nmatch().node(labels="Person", name="Leslie").to(\n    relationship_type="FRIENDS_WITH", variable="f"\n).node(labels="Person").delete(variable_expressions="f").execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (:Person {name: 'Leslie'})-[f:FRIENDS_WITH]->(:Person) DELETE f;\n")))),(0,n.kt)("h3",{id:"remove-properties"},"Remove properties"),(0,n.kt)("p",null,"To remove a property (or properties) from the database, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"remove()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nmatch().node(labels="Person", name="Jane", variable="p").remove(\n    items=["p.name", "p.last_name"]\n).execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person {name: 'Jane'}) REMOVE p.name, p.last_name;\n")))),(0,n.kt)("h2",{id:"call-procedures"},"Call procedures"),(0,n.kt)("p",null,"You can use the methods ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#call"},(0,n.kt)("inlineCode",{parentName:"a"},"call()"))," and ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/reference/query_builders/declarative_base#yield_"},(0,n.kt)("inlineCode",{parentName:"a"},"yield_()"))," to construct queries that will\ncall procedure and return results from them."),(0,n.kt)("h3",{id:"call-procedure-with-no-arguments"},"Call procedure with no arguments"),(0,n.kt)("p",null,"To call a procedure with no arguments, don't specify the arguments in the\n",(0,n.kt)("inlineCode",{parentName:"p"},"call()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import call\n\nresults = list(call("pagerank.get").yield_().return_().execute())\nprint(results)\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL pagerank.get() YIELD * RETURN *;\n")))),(0,n.kt)("h3",{id:"call-procedure-with-arguments"},"Call procedure with arguments"),(0,n.kt)("p",null,"To call a procedure with arguments, specify the arguments as a string in the\n",(0,n.kt)("inlineCode",{parentName:"p"},"call()")," method:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import call\n\nresults = list(\n    call(\n        "json_util.load_from_url",\n        "\'https://download.memgraph.com/asset/mage/data.json\'",\n    )\n    .yield_("objects")\n    .return_(results="objects")\n    .execute()\n)\n\nprint("Load from URL with argument:", results, "\\n")\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL json_util.load_from_url('https://download.memgraph.com/asset/mage/data.json') \nYIELD objects \nRETURN objects;\n")))),(0,n.kt)("h2",{id:"full-code-example"},"Full code example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import create, merge, Memgraph, match, models, call\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator, Order\n\n\ndb = Memgraph()\n# clean database\ndb.drop_database()\n\n# create nodes and a relationship between them\n\ncreate().node(labels="Person", name="Leslie").to(relationship_type="FRIENDS_WITH").node(\n    labels="Person", name="Ron"\n).execute()\n\n\n# merge a node\nmerge().node(labels="Person", name="Leslie").execute()\n\n# create nodes and a relationship between them\ncreate().node(\n    labels="Person", name="Jane", last_name="James", address="street", age=19\n).from_(relationship_type="FRIENDS_WITH", since="2023-02-16").node(\n    labels="Person", name="John", last_name="James", address="street", age=8\n).execute()\n\n\n# merge a relationship between existing nodes\n\nmatch().node(labels="Person", name="Leslie", variable="leslie").match().node(\n    labels="Person", name="Ron", variable="ron"\n).merge().node(variable="leslie").to(relationship_type="FRIENDS_WITH").node(\n    variable="ron"\n).execute()\n\n\n# set a property\ncreate().node(labels="Country", variable="c", name="Germany").set_(\n    item="c.population", operator=Operator.ASSIGNMENT, literal=83000001\n).execute()\n\n# update a property\nmatch().node(labels="Country", variable="c", name="Germany").set_(\n    item="c.population", operator=Operator.ASSIGNMENT, literal=10000\n).execute()\n\n\n# update multiple properties\nmatch().node(variable="n").where(item="n.name", operator="=", literal="Germany").set_(\n    item="n.population", operator=Operator.ASSIGNMENT, literal=83000001\n).set_(item="n.capital", operator=Operator.ASSIGNMENT, literal="Berlin").execute()\n\n\n# replace all properties\nmatch().node(variable="c", labels="Country").where(\n    item="c.name", operator="=", literal="Germany"\n).set_(\n    item="c",\n    operator=Operator.ASSIGNMENT,\n    literal={"country_name": "Germany", "population": 85000000},\n).execute()\n\n\n# update multiple properties\n\nmatch().node(variable="c", labels="Country").where(\n    item="c.country_name", operator="=", literal="Germany"\n).set_(\n    item="c",\n    operator=Operator.INCREMENT,\n    literal={"population": "85000000"},\n).execute()\n\n\nmodels.IGNORE_SUBCLASSNOTFOUNDWARNING = True\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", variable="p2")\n    .where(item="p1.name", operator=Operator.LESS_THAN, expression="p2.name")\n    .return_()\n    .execute()\n)\n\nprint("Filter by property comparison:", results, "\\n")\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", variable="p2")\n    .where_not(item="p1.name", operator=Operator.LESS_THAN, expression="p2.name")\n    .return_()\n    .execute()\n)\n\nprint("Filter by property comparison (negation):", results, "\\n")\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to(relationship_type="FRIENDS_WITH")\n    .node(labels="Person", variable="p2")\n    .where(item="p1.address", operator=Operator.EQUAL, expression="p2.address")\n    .and_where(item="p1.last_name", operator=Operator.EQUAL, expression="p2.last_name")\n    .and_not_where(item="p1.name", operator=Operator.EQUAL, expression="p2.name")\n    .return_()\n    .execute()\n)\n\nprint("Filter by property comparison + logical operators:", results, "\\n")\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p")\n    .where(item="p.age", operator=Operator.GREATER_THAN, literal=18)\n    .return_()\n    .execute()\n)\n\nprint("Filter by property value:", results, "\\n")\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p")\n    .where(item="p.age", operator=Operator.GREATER_THAN, literal=18)\n    .or_where(item="p.name", operator=Operator.EQUAL, literal="John")\n    .return_()\n    .execute()\n)\n\nprint("Filter by property value + logical operators:", results, "\\n")\n\nresults = list(\n    match()\n    .node(variable="p")\n    .where(item="p", operator=Operator.LABEL_FILTER, expression="Person")\n    .return_()\n    .execute()\n)\n\nprint("Filter by label:", results, "\\n")\n\n\nresults = list(match().node(labels="Person", variable="p").return_().execute())\nprint("Return all:", results, "\\n")\n\nresults = list(\n    match()\n    .node(labels="Person", variable="p1")\n    .to()\n    .node(labels="Person", variable="p2")\n    .return_(results=[("p1", "first"), "p2"])\n    .execute()\n)\n\nfor result in results:\n    print("Here is one pair:")\n    print(result["first"])\n    print(result["p2"])\n\nprint()\n\nresults = list(match().node(labels="Person", variable="p").return_().limit(3).execute())\nprint("Limit results:", results, "\\n")\n\n\nresults = list(\n    match().node(variable="n").return_().order_by(properties="n.name").execute()\n)\nprint("Order descending:", results, "\\n")\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(properties=("n.name", Order.ASCENDING))\n    .execute()\n)\nprint("Order ascending:", results, "\\n")\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(properties=("n.name", Order.DESC))\n    .execute()\n)\n\nprint("Order descending with ordering:", results, "\\n")\n\nresults = list(\n    match()\n    .node(variable="n")\n    .return_()\n    .order_by(\n        properties=[\n            ("n.id", Order.ASC),\n            "n.name",\n            ("n.last_name", Order.DESC),\n            ("n.age", Order.ASCENDING),\n            ("n.middle_name", Order.DESCENDING),\n        ]\n    )\n    .execute()\n)\n\nprint("Mix of ordering:", results, "\\n")\n\n\n# create a node to delete\ncreate().node(labels="Person", name="Harry").execute()\n\n# delete a node\nmatch().node(labels="Person", name="Harry", variable="p").delete(\n    variable_expressions="p"\n).execute()\n\n# delete a relationship between Leslie and her friends\nmatch().node(labels="Person", name="Leslie").to(\n    relationship_type="FRIENDS_WITH", variable="f"\n).node(labels="Person").delete(variable_expressions="f").execute()\n\n# remove name and last_name properties from Jane\nmatch().node(labels="Person", name="Jane", variable="p").remove(\n    items=["p.name", "p.last_name"]\n).execute()\n\n# calculate PageRank\nresults = list(call("pagerank.get").yield_().return_().execute())\nprint("PageRank:", results, "\\n")\n\n# Load JSON from URL with arguments\nresults = list(\n    call(\n        "json_util.load_from_url",\n        "\'https://download.memgraph.com/asset/mage/data.json\'",\n    )\n    .yield_("objects")\n    .return_(results="objects")\n    .execute()\n)\n\nprint("Load from URL with argument:", results, "\\n")\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Hopefully, this guide has taught you how to properly use GQLAlchemy query builder. If you\nhave any more questions, join our community and ping us on ",(0,n.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),".")))}c.isMDXComponent=!0},85162:(e,a,t)=>{t.d(a,{Z:()=>o});var r=t(67294),n=t(86010);const l="tabItem_Ymn6";function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:t},a)}},74866:(e,a,t)=>{t.d(a,{Z:()=>T});var r=t(87462),n=t(67294),l=t(86010),o=t(12466),p=t(16550),i=t(91980),s=t(67392),m=t(50012);function u(e){return function(e){var a;return(null==(a=n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:a.filter(Boolean))??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function d(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,s.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function c(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function h(e){let{queryString:a=!1,groupId:t}=e;const r=(0,p.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i._X)(l),(0,n.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(r.location.search);a.set(l,e),r.replace({...r.location,search:a.toString()})}),[l,r])]}function y(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,l=d(e),[o,p]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!c({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:l}))),[i,s]=h({queryString:t,groupId:r}),[u,y]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,l]=(0,m.Nk)(t);return[r,(0,n.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),b=(()=>{const e=i??u;return c({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{b&&p(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);p(e),s(e),y(e)}),[s,y,l]),tabValues:l}}var b=t(72389);const g="tabList__CuJ",k="tabItem_LNqP";function N(e){let{className:a,block:t,selectedValue:p,selectValue:i,tabValues:s}=e;const m=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),d=e=>{const a=e.currentTarget,t=m.indexOf(a),r=s[t].value;r!==p&&(u(a),i(r))},c=e=>{var a;let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=m.indexOf(e.currentTarget)+1;t=m[a]??m[0];break}case"ArrowLeft":{const a=m.indexOf(e.currentTarget)-1;t=m[a]??m[m.length-1];break}}null==(a=t)||a.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},s.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:p===a?0:-1,"aria-selected":p===a,key:a,ref:e=>m.push(e),onKeyDown:c,onClick:d},o,{className:(0,l.Z)("tabs__item",k,null==o?void 0:o.className,{"tabs__item--active":p===a})}),t??a)})))}function f(e){let{lazy:a,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function v(e){const a=y(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",g)},n.createElement(N,(0,r.Z)({},e,a)),n.createElement(f,(0,r.Z)({},e,a)))}function T(e){const a=(0,b.Z)();return n.createElement(v,(0,r.Z)({key:String(a)},e))}}}]);