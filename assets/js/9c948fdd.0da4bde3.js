"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88399],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>m});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?t.createElement(h,l(l({ref:a},u),{},{components:n})):t.createElement(h,l({ref:a},u))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,a,n)=>{n.d(a,{Z:()=>l});var t=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:a,hidden:n,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},a)}},65488:(e,a,n)=>{n.d(a,{Z:()=>m});var t=n(87462),r=n(67294),o=n(86010),l=n(72389),s=n(67392),i=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){var a;const{lazy:n,block:l,defaultValue:d,values:m,groupId:h,className:f}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=m??v.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),k=(0,s.l)(w,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(a=v.find((e=>e.props.default)))?void 0:a.props.value)??v[0].props.value;if(null!==y&&!w.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:b}=(0,i.U)(),[T,C]=(0,r.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:E}=(0,p.o5)();if(null!=h){const e=g[h];null!=e&&e!==T&&w.some((a=>a.value===e))&&C(e)}const O=e=>{const a=e.currentTarget,n=N.indexOf(a),t=w[n].value;t!==T&&(E(a),C(t),null!=h&&b(h,String(t)))},A=e=>{var a;let n=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const a=N.indexOf(e.currentTarget)+1;n=N[a]??N[0];break}case"ArrowLeft":{const a=N.indexOf(e.currentTarget)-1;n=N[a]??N[N.length-1];break}}null==(a=n)||a.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},f)},w.map((e=>{let{value:a,label:n,attributes:l}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:e=>N.push(e),onKeyDown:A,onClick:O},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":T===a})}),n??a)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==T})))))}function m(e){const a=(0,l.Z)();return r.createElement(d,(0,t.Z)({key:String(a)},e))}},68998:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var t=n(87462),r=(n(67294),n(3905)),o=n(65488),l=n(85162);const s={id:"load-csv-clause",title:"LOAD CSV Cypher clause",sidebar_label:"LOAD CSV Cypher clause"},i=void 0,p={unversionedId:"import-data/load-csv-clause",id:"version-2.1.0/import-data/load-csv-clause",title:"LOAD CSV Cypher clause",description:"The LOAD CSV clause enables you to load and use data from a CSV file of your",source:"@site/memgraph_versioned_docs/version-2.1.0/import-data/load-csv-clause.md",sourceDirName:"import-data",slug:"/import-data/load-csv-clause",permalink:"/docs/memgraph/2.1.0/import-data/load-csv-clause",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/import-data/load-csv-clause.md",tags:[],version:"2.1.0",frontMatter:{id:"load-csv-clause",title:"LOAD CSV Cypher clause",sidebar_label:"LOAD CSV Cypher clause"},sidebar:"version-2.1.0/memgraph",previous:{title:"Import data overview",permalink:"/docs/memgraph/2.1.0/import-data"},next:{title:"CSV Import Tool",permalink:"/docs/memgraph/2.1.0/import-data/csv-import-tool"}},u={},c=[{value:"Examples",id:"examples",level:2},{value:"One type of nodes and relationships",id:"one-type-of-nodes-and-relationships",level:3},{value:"Multiple types of nodes and relationships",id:"multiple-types-of-nodes-and-relationships",level:3}],d={toc:c};function m(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD CSV")," clause enables you to load and use data from a CSV file of your\nchoosing in a row-based manner, within a query. We support the Excel CSV\ndialect, as it's the most commonly used one. For the syntax of the clause,\nplease check the ",(0,r.kt)("a",{parentName:"p",href:"/cypher-manual/clauses/load-csv"},"Cypher manual"),"."),(0,r.kt)("p",null,"The clause reads row by row from a CSV file and binds the contents of the parsed\nrow to the variable you specified."),(0,r.kt)("admonition",{title:"For more detailed information about the LOAD CSV Cypher clause, check",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"our ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/memgraph/2.1.0/reference-guide/import-data/load-csv-clause"},"Reference guide")),".")),(0,r.kt)("p",null,"To work with the LOAD CSV clause, we need to have access to our files. If\nworking with Docker, check our ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/how-to-work-with-docker"},"Docker\nguide")," on how to access files\nfrom your local filesystem:"),(0,r.kt)("p",null,"Below, you can find two examples of how to use the CSV Import Tool depending on\nthe complexity of your data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#one-type-of-nodes-and-relationships"},"One type of nodes and relationships")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#multiple-types-of-nodes-and-relationships"},"Multiple types of nodes and\nrelationships"))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"one-type-of-nodes-and-relationships"},"One type of nodes and relationships"),(0,r.kt)(o.Z,{groupId:"platform",defaultValue:"headerin",values:[{label:"With CSV header",value:"headerin"},{label:"Without CSV header",value:"headerout"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"headerin",mdxType:"TabItem"},(0,r.kt)("p",null,"Depending on how you set the ",(0,r.kt)("inlineCode",{parentName:"p"},"HEADER")," option (",(0,r.kt)("inlineCode",{parentName:"p"},"WITH")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"NO"),"), a row will be\nparsed as either a map or a list."),(0,r.kt)("p",null,"To access a given field, you can use the property lookup syntax. Let's assume\nthat the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"people_nodes.csv")," are as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"id,name\n100,Daniel\n101,Alex\n102,Sarah\n103,Mia\n104,Lucy\n")),(0,r.kt)("p",null,"The contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"people_relationships.csv")," are the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"id_from,id_to\n100,101\n100,102\n100,103\n101,103\n102,104\n")),(0,r.kt)("p",null,"The following query will load row by row from the file, and create a new node\nfor each row with properties based on the parsed row values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/people_nodes.csv" WITH HEADER AS row\nCREATE (n:Person {id: row.id, name: row.name});\n')),(0,r.kt)("p",null,"With the initial nodes in place, you can now create relationships between them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/people_relationships.csv"  WITH HEADER AS row\nMATCH (p1:Person {id: row.id_from}), (p2:Person {id: row.id_to})\nCREATE (p1)-[:IS_FRIENDS_WITH]->(p2)\n'))),(0,r.kt)(l.Z,{value:"headerout",mdxType:"TabItem"},(0,r.kt)("p",null,"Let's assume that the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"people_nodes.csv")," are as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"100,Daniel\n101,Alex\n102,Sarah\n103,Mia\n104,Lucy\n")),(0,r.kt)("p",null,"The contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"people_relationships.csv")," are the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"100,101\n100,102\n100,103\n101,103\n102,104\n")),(0,r.kt)("p",null,"The following query will load row by row from the file, and create a new node\nfor each row with properties based on the parsed row values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/people_nodes.csv" NO HEADER AS row\nCREATE (n:Person {id: row[0], name: row[1]}) ;\n')),(0,r.kt)("p",null,"With the initial nodes in place, you can now create relationships between them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/people_relationships.csv" NO HEADER AS row\nMATCH (p1:Person {id: row[0]}), (p2:Person {id: row[1]})\nCREATE (p1)-[:IS_FRIENDS_WITH]->(p2)\n')))),(0,r.kt)("h3",{id:"multiple-types-of-nodes-and-relationships"},"Multiple types of nodes and relationships"),(0,r.kt)("p",null,"In the case of a more complex graph, we have to deal with multiple node and\nrelationship types. Let's assume we have the following example:"),(0,r.kt)(o.Z,{groupId:"csv",defaultValue:"pn",values:[{label:"1. people_nodes.csv",value:"pn"},{label:"2. people_relationships.csv",value:"pr"},{label:"3. restaurants_nodes.csv",value:"rn"},{label:"4. restaurants_relationships.csv",value:"rr"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"pn",mdxType:"TabItem"},(0,r.kt)("p",null,"Add the following to the file ",(0,r.kt)("inlineCode",{parentName:"p"},"people_nodes.csv"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,age,city\n100,Daniel,30,London\n101,Alex,15,Paris\n102,Sarah,17,London\n103,Mia,25,Zagreb\n104,Lucy,21,Paris\n")),(0,r.kt)("p",null,"The following query will load row by row from the file, and create a new node\nfor each row with properties based on the parsed row values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/people_nodes.csv" WITH HEADER AS row\nCREATE (n:Person {id: row.id, name: row.name, age: ToInteger(row.age), city: row.city});\n'))),(0,r.kt)(l.Z,{value:"pr",mdxType:"TabItem"},(0,r.kt)("p",null,"Each person from ",(0,r.kt)("inlineCode",{parentName:"p"},"people_relationships.csv")," is connected to another person they are\nfriends with. This is represented with the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"first_person,second_person,met_in\n100,102,2014\n103,101,2021\n102,103,2005\n101,104,2005\n104,100,2018\n101,102,2017\n100,103,2001\n")),(0,r.kt)("p",null,"The following query will create relationships between the people nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/people_relationships.csv" WITH HEADER AS row\nMATCH (p1:Person {id: row.first_person})\nMATCH (p2:Person {id: row.second_person})\nCREATE (p1)-[f:IS_FRIENDS_WITH]->(p2)\nSET f.met_in = row.met_in;\n'))),(0,r.kt)(l.Z,{value:"rn",mdxType:"TabItem"},(0,r.kt)("p",null,"We have a list of restaurants people ate at in the file ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurants_nodes.csv"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,menu\n200, Mc Donalds, Fries;BigMac;McChicken;Apple Pie\n201, KFC, Fried Chicken;Fries;Chicken Bucket\n202, Subway, Ham Sandwich;Turkey Sandwich;Foot-long\n203, Dominos, Pepperoni Pizza;Double Dish Pizza;Cheese filled Crust\n")),(0,r.kt)("p",null,"The following query will create new nodes for each restaurant:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/restaurants_nodes.csv" WITH HEADER AS row\nCREATE (n:Restaurant {id: row.id, name: row.name, menu: row.menu});\n'))),(0,r.kt)(l.Z,{value:"rr",mdxType:"TabItem"},(0,r.kt)("p",null,"We file ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurants_relationships.csv")," contains a list of people and the\nrestaurants they visited:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"PERSON_ID,REST_ID,liked\n100,200,true\n103,201,false\n104,200,true\n101,202,false\n101,203,false\n101,200,true\n102,201,true\n")),(0,r.kt)("p",null,"The following query will create relationships between people and restaurants\nwhere they ate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/path-to/restaurants_relationships.csv" WITH HEADER AS row\nMATCH (p1:Person {id: row.PERSON_ID})\nMATCH (re:Restaurant {id: row.REST_ID})\nCREATE (p1)-[ate:ATE_AT]->(re)\nSET ate.liked = ToBoolean(row.liked);\n')))))}m.isMDXComponent=!0}}]);