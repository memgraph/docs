"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26192],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,m=c["".concat(l,".").concat(u)]||c[u]||h[u]||o;return a?n.createElement(m,s(s({ref:t},d),{},{components:a})):n.createElement(m,s({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},19411:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={id:"what-are-graph-databases",title:"What are graph databases?",sidebar_label:"What are graph databases"},s=void 0,i={unversionedId:"what-are-graph-databases",id:"what-are-graph-databases",title:"What are graph databases?",description:"A graph database is a type of database that stores data in the form of nodes",source:"@site/cypher-manual/graph-databases.md",sourceDirName:".",slug:"/what-are-graph-databases",permalink:"/docs/cypher-manual/what-are-graph-databases",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/graph-databases.md",tags:[],version:"current",frontMatter:{id:"what-are-graph-databases",title:"What are graph databases?",sidebar_label:"What are graph databases"},sidebar:"cypher_manual",previous:{title:"Getting started",permalink:"/docs/cypher-manual/"},next:{title:"Cypher query language",permalink:"/docs/cypher-manual/cypher-query-language"}},l={},p=[{value:"Graph terminology",id:"graph-terminology",level:2},{value:"Nodes",id:"nodes",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Labels",id:"labels",level:3},{value:"Properties",id:"properties",level:3}],d={toc:p};function h(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"graph database")," is a type of database that stores data in the form of nodes\nthat can be connected with relationships. ",(0,r.kt)("strong",{parentName:"p"},"Graphs")," are essentially very simple\nstructures that map relations between objects. We call these objects ",(0,r.kt)("strong",{parentName:"p"},"nodes"),"\nand the connections between them ",(0,r.kt)("strong",{parentName:"p"},"relationships"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"graph-database-example",src:a(44506).Z,width:"650",height:"488"})),(0,r.kt)("h2",{id:"graph-terminology"},"Graph terminology"),(0,r.kt)("p",null,"Every graph can consist of four components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Nodes")," - the main entities in a graph. They are also sometimes referred to\nas vertices or points."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Relationships")," - the connections between those entities. Sometimes they are\nreferred to as edges or links."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Labels")," - attributes that group similar nodes together."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Properties")," - key/value pairs stored within nodes or relationships.")),(0,r.kt)("p",null,"Nodes and relationships are fundamental components that are used. Labels and\nproperties are often included because of the added functionalities they offer."),(0,r.kt)("h3",{id:"nodes"},"Nodes"),(0,r.kt)("p",null,"Like a circle on a whiteboard, a pair of parentheses is used to represent nodes.\nHere is the simplified syntax for representing a node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"()\n(node)\n")),(0,r.kt)("p",null,"The variable ",(0,r.kt)("inlineCode",{parentName:"p"},"(node)")," stores node values so they can be\nprocessed or returned in a query later on. If you do not need to do anything\nwith the node, you can skip the use of the variable. By doing so, you are\ncreating an ",(0,r.kt)("strong",{parentName:"p"},"anonymous node"),"."),(0,r.kt)("h3",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"Relationships are the lines that connect nodes and represent a defined\nconnection between them. Every relationship has a source node and a target node\nthat represent the direction of the relationship. If this direction is\nimportant, the relationship is considered directed, otherwise, it\u2019s undirected."),(0,r.kt)("p",null,"Relationships can also store data in the form of properties, just as nodes. In\nmost cases, relationships store quantitative properties such as weights, costs,\ndistances, ratings, etc."),(0,r.kt)("h3",{id:"labels"},"Labels"),(0,r.kt)("p",null,"You can use labels to shape the domain by ",(0,r.kt)("strong",{parentName:"p"},"grouping nodes into sets or\ncategories"),". Nodes with the same label belong to the same set. This way of\ngrouping nodes together simplifies database operations significantly. We no\nlonger need to select the whole graph but only the set of nodes we are\ninterested in."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"labels-example",src:a(2453).Z,width:"781",height:"475"})),(0,r.kt)("p",null,"As you can see in the example above, nodes can also have multiple labels. These\nnodes can be represented in Cypher in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"(:Person)\n(:City:Location)\n")),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Properties are key-value pairs of data stored on nodes or on relationships. They\nallow you to store relevant data about the node or relationship with the entity\nit describes. Properties support most standard data types like integers,\nstrings, booleans, etc. You can find a complete table of property types in our\n",(0,r.kt)("a",{parentName:"p",href:"/memgraph/under-the-hood/storage#properties"},"storage guide"),"."),(0,r.kt)("p",null,"The flexibility and simplicity of properties allow users to easily review the\ndata structure and update it according to their needs. Properties are also very\neasy to spot. One common way would be asking yourself questions about the nodes\nand relationships in your model. What information will you need in the future\nwhen working with the graph?"),(0,r.kt)("p",null,"Here is one simple example that shows properties for several nodes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"What are the names of the people? - ",(0,r.kt)("inlineCode",{parentName:"li"},"name")),(0,r.kt)("li",{parentName:"ul"},"How old are the people? - ",(0,r.kt)("inlineCode",{parentName:"li"},"dateOfBirth")),(0,r.kt)("li",{parentName:"ul"},"What is the name of the city? - ",(0,r.kt)("inlineCode",{parentName:"li"},"name")),(0,r.kt)("li",{parentName:"ul"},"What country is the city located in? - ",(0,r.kt)("inlineCode",{parentName:"li"},"country")),(0,r.kt)("li",{parentName:"ul"},"What is the population of the city? - ",(0,r.kt)("inlineCode",{parentName:"li"},"population"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"properties-example",src:a(45178).Z,width:"992",height:"547"})))}h.isMDXComponent=!0},44506:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/graph-database-example-97219693827af943e3ddda6241f1c550.png"},2453:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/labels-example-46f5869d701560ee73b80d34887a1f38.png"},45178:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/properties-example-5ffbd8f117aed1d5cab76e9afe0f70fb.png"}}]);