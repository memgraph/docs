"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[96368],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),u=i(n),g=a,d=u["".concat(s,".").concat(g)]||u[g]||c[g]||o;return n?r.createElement(d,p(p({ref:t},l),{},{components:n})):r.createElement(d,p({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=u;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m.mdxType="string"==typeof e?e:a,p[1]=m;for(var i=2;i<o;i++)p[i]=n[i];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4609:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return m},metadata:function(){return i},toc:function(){return c}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),p=["components"],m={id:"kubernetes",title:"Memgraph Helm Chart",sidebar_label:"Kubernetes"},s=void 0,i={unversionedId:"reference-guide/deployment/kubernetes",id:"reference-guide/deployment/kubernetes",title:"Memgraph Helm Chart",description:"If you need Memgraph as a part of your Kubernetes cluster, you can use the below Helm Chart for a simple setup. The Helm Chart is a collection of files that describe a related set of Kubernetes resources. Memgraph is a stateful application because it saves data to persistent disk storage for the server, clients, and other applications. The apiVersion is set to apps/v1, which means the below chart supports Helm version 3 or less.",source:"@site/docs/reference-guide/deployment/kubernetes.md",sourceDirName:"reference-guide/deployment",slug:"/reference-guide/deployment/kubernetes",permalink:"/docs/memgraph/next/reference-guide/deployment/kubernetes",editUrl:"https://github.com/memgraph/docs/tree/master/docs/reference-guide/deployment/kubernetes.md",tags:[],version:"current",frontMatter:{id:"kubernetes",title:"Memgraph Helm Chart",sidebar_label:"Kubernetes"},sidebar:"memgraph",previous:{title:"Docker",permalink:"/docs/memgraph/next/reference-guide/deployment/docker"},next:{title:"Import data overview",permalink:"/docs/memgraph/next/reference-guide/import-data/overview"}},l={},c=[],u={toc:c};function g(e){var t=e.components,n=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you need Memgraph as a part of your ",(0,o.kt)("strong",{parentName:"p"},"Kubernetes")," cluster, you can use the below ",(0,o.kt)("strong",{parentName:"p"},"Helm Chart")," for a simple setup. The Helm Chart is a collection of files that describe a related set of Kubernetes resources. Memgraph is a ",(0,o.kt)("strong",{parentName:"p"},"stateful application")," because it saves data to persistent disk storage for the server, clients, and other applications. The ",(0,o.kt)("inlineCode",{parentName:"p"},"apiVersion")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"apps/v1"),", which means the below chart supports Helm version 3 or less."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# StatefulSet\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: memgraph\n  labels:\n    app.kubernetes.io/name: memgraph\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  serviceName: memgraph-svc\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: memgraph\n  podManagementPolicy: OrderedReady\n  updateStrategy:\n        type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: memgraph\n    spec:\n      containers:\n        - name: memgraph\n          image: "memgraph/memgraph:latest"\n          imagePullPolicy: Never\n          ports:\n            - name: memgraph\n              containerPort: 7687\n          volumeMounts:\n            - name: memgraph-lib-storage\n              mountPath: /var/lib/memgraph\n            - name: memgraph-log-storage\n              mountPath: /var/log/memgraph\n            - name: memgraph-etc-config\n              mountPath: /etc/memgraph/memgraph.conf\n              subPath: memgraph.conf\n      volumes:\n        - name: memgraph-lib-storage\n          persistentVolumeClaim:\n            claimName: memgraph-lib-pv-claim\n        - name: memgraph-log-storage\n          persistentVolumeClaim:\n            claimName: memgraph-log-pv-claim\n        - name: memgraph-etc-config\n          configMap:\n            name: memgraph-config\n---\n# Service\napiVersion: v1\nkind: Service\nmetadata:\n  name: memgraph-svc\n  labels:\n    app.kubernetes.io/name: memgraph\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 7687\n      targetPort: 7687\n      protocol: TCP\n      name: bolt\n  selector:\n    app.kubernetes.io/name: memgraph\n')))}g.isMDXComponent=!0}}]);