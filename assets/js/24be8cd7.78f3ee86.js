"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25644],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),h=r,g=u["".concat(c,".").concat(h)]||u[h]||m[h]||o;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},36206:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=t(93996),s=["components"],c={id:"memgraph-docker-instance",title:"How to manage Memgraph Docker instances in Python",sidebar_label:"Manage Memgraph Docker instances",slug:"/how-to-guides/memgraph-docker-instance"},l=void 0,p={unversionedId:"how-to-guides/instance-runner/memgraph-docker-instance",id:"how-to-guides/instance-runner/memgraph-docker-instance",title:"How to manage Memgraph Docker instances in Python",description:"Through this guide, you will learn how to start, stop, connect to and monitor",source:"@site/gqlalchemy/how-to-guides/instance-runner/memgraph-docker-instance.md",sourceDirName:"how-to-guides/instance-runner",slug:"/how-to-guides/memgraph-docker-instance",permalink:"/docs/gqlalchemy/how-to-guides/memgraph-docker-instance",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/instance-runner/memgraph-docker-instance.md",tags:[],version:"current",frontMatter:{id:"memgraph-docker-instance",title:"How to manage Memgraph Docker instances in Python",sidebar_label:"Manage Memgraph Docker instances",slug:"/how-to-guides/memgraph-docker-instance"},sidebar:"gqlalchemy",previous:{title:"Make a custom file system importer",permalink:"/docs/gqlalchemy/how-to-guides/custom-file-system-importer"},next:{title:"Manage Memgraph binary instances",permalink:"/docs/gqlalchemy/how-to-guides/memgraph-binary-instance"}},m={},u=[{value:"Start the Memgraph instance",id:"start-the-memgraph-instance",level:2},{value:"Pass configuration flags",id:"pass-configuration-flags",level:2},{value:"Stop the Memgraph instance",id:"stop-the-memgraph-instance",level:2},{value:"Check if a Memgraph instance is running",id:"check-if-a-memgraph-instance-is-running",level:2},{value:"Where to next?",id:"where-to-next",level:2}],h={toc:u};function g(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Through this guide, you will learn how to start, stop, connect to and monitor\nMemgraph instances with GQLAlchemy."),(0,o.kt)(i.ZP,{mdxType:"Neo4jWarning"}),(0,o.kt)("p",null,"First, perform all the necessary imports:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy.instance_runner import (\n    DockerImage,\n    MemgraphInstanceDocker\n)\n")),(0,o.kt)("h2",{id:"start-the-memgraph-instance"},"Start the Memgraph instance"),(0,o.kt)("p",null,"The following code will create a Memgraph instance, start it and return a\nconnection object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memgraph_instance = MemgraphInstanceDocker(\n    docker_image=DockerImage.MEMGRAPH, docker_image_tag="latest", host="0.0.0.0", port=7687\n)\nmemgraph = memgraph_instance.start_and_connect(restart=False)\n')),(0,o.kt)("p",null,"We used the default values for the arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"docker_image=DockerImage.MEMGRAPH"),": This will start the ",(0,o.kt)("inlineCode",{parentName:"li"},"memgraph/memgraph"),"\nDocker image."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'docker_image_tag="latest"'),": We use the ",(0,o.kt)("inlineCode",{parentName:"li"},"latest")," tag to start the most recent\nversion of Memgraph."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'host="0.0.0.0"'),": This is the wildcard address which indicates that the\ninstance should accept connections from all interfaces."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"port=7687"),": This is the default port Memgraph listens to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"restart=False"),": If the instance is already running, it won't be stopped and\nstarted again.")),(0,o.kt)("p",null,"After we have created the connection, we can start querying the database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memgraph.execute_and_fetch("RETURN \'Memgraph is running\' AS result"))[0]["result"]\n')),(0,o.kt)("h2",{id:"pass-configuration-flags"},"Pass configuration flags"),(0,o.kt)("p",null,"You can pass ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/configuration"},"configuration flags"),"\nusing a dictionary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'config={"--log-level": "TRACE"}\nmemgraph_instance = MemgraphInstanceDocker(config=config)\n')),(0,o.kt)("h2",{id:"stop-the-memgraph-instance"},"Stop the Memgraph instance"),(0,o.kt)("p",null,"To stop a Memgraph instance, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"stop()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memgraph_instance.stop()\n")),(0,o.kt)("h2",{id:"check-if-a-memgraph-instance-is-running"},"Check if a Memgraph instance is running"),(0,o.kt)("p",null,"To check if a Memgraph instance is running, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"is_running()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memgraph_instance.is_running()\n")),(0,o.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,o.kt)("p",null,"Hopefully, this guide has taught you how to manage Memgraph Docker instances. If\nyou have any more questions, join our community and ping us on\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}g.isMDXComponent=!0},93996:function(e,n,t){t.d(n,{ZP:function(){return c}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],s={toc:[]};function c(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This feature only works with Memgraph. Neo4j is not supported."))))}c.isMDXComponent=!0}}]);