"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[50399],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,g=m["".concat(o,".").concat(h)]||m[h]||u[h]||l;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},31552:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=["components"],s={sidebar_label:"memgraph",title:"gqlalchemy.vendors.memgraph"},o=void 0,p={unversionedId:"reference/vendors/memgraph",id:"reference/vendors/memgraph",title:"gqlalchemy.vendors.memgraph",description:"Memgraph Objects",source:"@site/gqlalchemy/reference/vendors/memgraph.md",sourceDirName:"reference/vendors",slug:"/reference/vendors/memgraph",permalink:"/docs/gqlalchemy/reference/vendors/memgraph",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/vendors/memgraph.md",tags:[],version:"current",frontMatter:{sidebar_label:"memgraph",title:"gqlalchemy.vendors.memgraph"},sidebar:"gqlalchemy",previous:{title:"database_client",permalink:"/docs/gqlalchemy/reference/vendors/database_client"},next:{title:"neo4j",permalink:"/docs/gqlalchemy/reference/vendors/neo4j"}},d={},u=[{value:"Memgraph Objects",id:"memgraph-objects",level:2},{value:"get_indexes",id:"get_indexes",level:4},{value:"ensure_indexes",id:"ensure_indexes",level:4},{value:"get_constraints",id:"get_constraints",level:4},{value:"new_connection",id:"new_connection",level:4},{value:"create_stream",id:"create_stream",level:4},{value:"start_stream",id:"start_stream",level:4},{value:"get_streams",id:"get_streams",level:4},{value:"drop_stream",id:"drop_stream",level:4},{value:"create_trigger",id:"create_trigger",level:4},{value:"get_triggers",id:"get_triggers",level:4},{value:"drop_trigger",id:"drop_trigger",level:4},{value:"drop_triggers",id:"drop_triggers",level:4},{value:"init_disk_storage",id:"init_disk_storage",level:4},{value:"remove_on_disk_storage",id:"remove_on_disk_storage",level:4},{value:"save_node",id:"save_node",level:4},{value:"load_node",id:"load_node",level:4},{value:"load_relationship",id:"load_relationship",level:4},{value:"save_relationship",id:"save_relationship",level:4},{value:"get_procedures",id:"get_procedures",level:4},{value:"add_query_module",id:"add_query_module",level:4},{value:"with_kafka_stream",id:"with_kafka_stream",level:4},{value:"with_power_bi",id:"with_power_bi",level:4}],m={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"memgraph-objects"},"Memgraph Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Memgraph(DatabaseClient)\n")),(0,l.kt)("h4",{id:"get_indexes"},"get","_","indexes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_indexes() -> List[MemgraphIndex]\n")),(0,l.kt)("p",null,"Returns a list of all database indexes (label and label-property types)."),(0,l.kt)("h4",{id:"ensure_indexes"},"ensure","_","indexes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def ensure_indexes(indexes: List[MemgraphIndex]) -> None\n")),(0,l.kt)("p",null,"Ensures that database indexes match input indexes."),(0,l.kt)("h4",{id:"get_constraints"},"get","_","constraints"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_constraints() -> List[Union[MemgraphConstraintExists, MemgraphConstraintUnique]]\n")),(0,l.kt)("p",null,"Returns a list of all database constraints (label and label-property types)."),(0,l.kt)("h4",{id:"new_connection"},"new","_","connection"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def new_connection() -> Connection\n")),(0,l.kt)("p",null,"Creates new Memgraph connection."),(0,l.kt)("h4",{id:"create_stream"},"create","_","stream"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def create_stream(stream: MemgraphStream) -> None\n")),(0,l.kt)("p",null,"Create a stream."),(0,l.kt)("h4",{id:"start_stream"},"start","_","stream"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def start_stream(stream: MemgraphStream) -> None\n")),(0,l.kt)("p",null,"Start a stream."),(0,l.kt)("h4",{id:"get_streams"},"get","_","streams"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_streams() -> List[str]\n")),(0,l.kt)("p",null,"Returns a list of all streams."),(0,l.kt)("h4",{id:"drop_stream"},"drop","_","stream"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def drop_stream(stream: MemgraphStream) -> None\n")),(0,l.kt)("p",null,"Drop a stream."),(0,l.kt)("h4",{id:"create_trigger"},"create","_","trigger"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def create_trigger(trigger: MemgraphTrigger) -> None\n")),(0,l.kt)("p",null,"Creates a trigger."),(0,l.kt)("h4",{id:"get_triggers"},"get","_","triggers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_triggers() -> List[str]\n")),(0,l.kt)("p",null,"Returns a list of all database triggers."),(0,l.kt)("h4",{id:"drop_trigger"},"drop","_","trigger"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def drop_trigger(trigger: MemgraphTrigger) -> None\n")),(0,l.kt)("p",null,"Drop a trigger."),(0,l.kt)("h4",{id:"drop_triggers"},"drop","_","triggers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def drop_triggers() -> None\n")),(0,l.kt)("p",null,"Drops all triggers in the database."),(0,l.kt)("h4",{id:"init_disk_storage"},"init","_","disk","_","storage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def init_disk_storage(on_disk_db: OnDiskPropertyDatabase) -> None\n")),(0,l.kt)("p",null,"Adds and OnDiskPropertyDatabase to the database so that any property\nthat has a Field(on_disk=True) can be stored to and loaded from\nan OnDiskPropertyDatabase."),(0,l.kt)("h4",{id:"remove_on_disk_storage"},"remove","_","on","_","disk","_","storage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def remove_on_disk_storage() -> None\n")),(0,l.kt)("p",null,"Removes the OnDiskPropertyDatabase from the database."),(0,l.kt)("h4",{id:"save_node"},"save","_","node"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def save_node(node: Node) -> Node\n")),(0,l.kt)("p",null,"Saves node to the database.\nIf the node._id is not None it fetches the node with the same id from\nthe database and updates it","'","s fields.\nIf the node has unique fields it fetches the nodes with the same unique\nfields from the database and updates it","'","s fields.\nOtherwise it creates a new node with the same properties.\nNull properties are ignored."),(0,l.kt)("h4",{id:"load_node"},"load","_","node"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def load_node(node: Node) -> Optional[Node]\n")),(0,l.kt)("p",null,"Loads a node from the database.\nIf the node._id is not None it fetches the node from the database with that\ninternal id.\nIf the node has unique fields it fetches the node from the database with\nthose unique fields set.\nOtherwise it tries to find any node in the database that has all properties\nset to exactly the same values.\nIf no node is found or no properties are set it raises a GQLAlchemyError."),(0,l.kt)("h4",{id:"load_relationship"},"load","_","relationship"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,l.kt)("p",null,"Returns a relationship loaded from the database.\nIf the relationship._id is not None it fetches the relationship from\nthe database that has the same internal id.\nOtherwise it returns the relationship whose relationship._start_node_id\nand relationship._end_node_id and all relationship properties that\nare not None match the relationship in the database.\nIf there is no relationship like that in the database, or if there are\nmultiple relationships like that in the database, throws GQLAlchemyError."),(0,l.kt)("h4",{id:"save_relationship"},"save","_","relationship"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,l.kt)("p",null,"Saves a relationship to the database.\nIf relationship._id is not None it finds the relationship in the database\nand updates it","'","s properties with the values in ",(0,l.kt)("inlineCode",{parentName:"p"},"relationship"),".\nIf relationship._id is None, it creates a new relationship.\nIf you want to set a relationship._id instead of creating a new\nrelationship, use ",(0,l.kt)("inlineCode",{parentName:"p"},"load_relationship")," first."),(0,l.kt)("h4",{id:"get_procedures"},"get","_","procedures"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def get_procedures(starts_with: Optional[str] = None, update: bool = False) -> List["QueryModule"]\n')),(0,l.kt)("p",null,"Return query procedures."),(0,l.kt)("p",null,"Maintains a list of query modules in the Memgraph object. If starts_with\nis defined then return those modules that start with starts_with string."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"starts_with")," - Return those modules that start with this string.\n(Optional)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update")," - Whether to update the list of modules in\nself.query_modules. (Optional)")),(0,l.kt)("h4",{id:"add_query_module"},"add","_","query","_","module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def add_query_module(file_path: str, module_name: str) -> "Memgraph"\n')),(0,l.kt)("p",null,"Function for adding a query module in Python written language to Memgraph.\nExample can be found in the functions below (with_kafka_stream, with_power_bi)."),(0,l.kt)("p",null,"The module is synced dynamically then with the database to enable higher processing\ncapabilities."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_name")," ",(0,l.kt)("em",{parentName:"li"},"str")," - path to file containing module."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"module_name")," ",(0,l.kt)("em",{parentName:"li"},"str")," - name of the module.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Memgraph")," - Memgraph object.")),(0,l.kt)("h4",{id:"with_kafka_stream"},"with","_","kafka","_","stream"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def with_kafka_stream() -> "Memgraph"\n')),(0,l.kt)("p",null,"Load kafka stream query module."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Memgraph")," - Memgraph instance")),(0,l.kt)("h4",{id:"with_power_bi"},"with","_","power","_","bi"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def with_power_bi() -> "Memgraph"\n')),(0,l.kt)("p",null,"Load power_bi stream query module."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Memgraph")," - Memgraph instance")))}h.isMDXComponent=!0}}]);