"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23352],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},49793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={id:"security",title:"Security (Enterprise)",sidebar_label:"Security"},l=void 0,o={unversionedId:"reference-guide/security",id:"reference-guide/security",title:"Security (Enterprise)",description:"Related - How to",source:"@site/docs/reference-guide/security.md",sourceDirName:"reference-guide",slug:"/reference-guide/security",permalink:"/docs/memgraph/next/reference-guide/security",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/docs/reference-guide/security.md",tags:[],version:"current",frontMatter:{id:"security",title:"Security (Enterprise)",sidebar_label:"Security"},sidebar:"memgraph",previous:{title:"LDAP Security",permalink:"/docs/memgraph/next/reference-guide/ldap-security"},next:{title:"Under the hood",permalink:"/docs/memgraph/next/under-the-hood"}},s={},p=[{value:"Users",id:"users",level:2},{value:"User Roles",id:"user-roles",level:2},{value:"Privileges",id:"privileges",level:2},{value:"Owners",id:"owners",level:2},{value:"Streams",id:"streams",level:2},{value:"Label-based access control",id:"label-based-access-control",level:2},{value:"Node permissions",id:"node-permissions",level:3},{value:"Relationship permissions",id:"relationship-permissions",level:3},{value:"Revoking label-based permissions",id:"revoking-label-based-permissions",level:3},{value:"Show privileges for label-based access control",id:"show-privileges-for-label-based-access-control",level:3}],d={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/next/how-to-guides/manage-user-privileges"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=How-to&color=blue&style=for-the-badge",alt:"Related - How to"}))),(0,r.kt)("p",null,"Before reading this article we highly recommend going through a how-to guide\non ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/next/how-to-guides/manage-user-privileges"},"managing user privileges"),"\nwhich contains more thorough explanations of the concepts behind ",(0,r.kt)("inlineCode",{parentName:"p"},"openCypher"),"\ncommands listed in this article."),(0,r.kt)("h2",{id:"users"},"Users"),(0,r.kt)("p",null,"Creating a user can be done by executing the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE USER user_name [IDENTIFIED BY 'password'];\n")),(0,r.kt)("p",null,"If the user should authenticate themself on each session, i.e. provide their\npassword on each session, the part within the brackets is mandatory. Otherwise,\nthe password is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and the user will be allowed to log-in using\nany password provided that they provide the correct username."),(0,r.kt)("p",null,"You can also set or alter a user's password anytime by issuing the following\ncommand:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SET PASSWORD FOR user_name TO 'new_password';\n")),(0,r.kt)("p",null,"Removing a user's password, i.e. allowing the user to log-in using any\npassword can be done by setting it to ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SET PASSWORD FOR user_name TO null;\n")),(0,r.kt)("p",null,"To delete a user use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"DROP USER user_name;\n")),(0,r.kt)("h2",{id:"user-roles"},"User Roles"),(0,r.kt)("p",null,"Each user can be assigned at most one user role. One can think of user roles\nas abstractions which capture the privilege levels of a set of users. For\nexample, suppose that ",(0,r.kt)("inlineCode",{parentName:"p"},"Dominik")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Marko")," belong to upper management of\na certain company. It makes sense to grant them a set of privileges that other\nusers are not entitled to so, instead of granting those privileges to each\nof them, we can create a role with those privileges called ",(0,r.kt)("inlineCode",{parentName:"p"},"manager"),"\nwhich we assign to ",(0,r.kt)("inlineCode",{parentName:"p"},"Dominik")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Marko"),"."),(0,r.kt)("p",null,"In other words, Each privilege that is granted to a user role is automatically\ngranted to a user (unless it has been explicitly denied to that user).\nSimilarly, each privilege that is denied to a user role is automatically denied\nto a user (even if it has been explicitly granted to that user)."),(0,r.kt)("p",null,"Creating a user role can be done by executing the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE ROLE role_name;\n")),(0,r.kt)("p",null,"Assigning a user role to a certain user can be done by the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SET ROLE FOR user_name TO role_name;\n")),(0,r.kt)("p",null,"Removing the role from the user can be done by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CLEAR ROLE FOR user_name;\n")),(0,r.kt)("p",null,"Finally, showing all users that have a certain role can be done as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW USERS FOR role_name;\n")),(0,r.kt)("p",null,"Similarly, querying which role a certain user has can be done as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW ROLE FOR user_name;\n")),(0,r.kt)("h2",{id:"privileges"},"Privileges"),(0,r.kt)("p",null,"At the moment, privileges are confined to users' abilities to perform certain\n",(0,r.kt)("inlineCode",{parentName:"p"},"OpenCypher")," queries. Namely users can be given permission to execute a subset\nof the following commands: ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MERGE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"SET"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"REMOVE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"INDEX"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"STATS"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AUTH"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"REPLICATION"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"READ_FILE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DURABILITY"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"FREE_MEMORY"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TRIGGER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"STREAM"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CONFIG"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CONSTRAINT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DUMP"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"MODULE_READ"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MODULE_WRITE")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WEBSOCKET"),"."),(0,r.kt)("p",null,"Granting a certain set of privileges to a specific user or user role can be\ndone by issuing the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT privilege_list TO user_or_role;\n")),(0,r.kt)("p",null,"For example, granting ",(0,r.kt)("inlineCode",{parentName:"p"},"AUTH")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"INDEX")," privileges to users with the role\n",(0,r.kt)("inlineCode",{parentName:"p"},"moderator")," would be written as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT AUTH, INDEX TO moderator:\n")),(0,r.kt)("p",null,"Similarly, denying privileges is done using the ",(0,r.kt)("inlineCode",{parentName:"p"},"DENY")," keyword instead of\n",(0,r.kt)("inlineCode",{parentName:"p"},"GRANT"),"."),(0,r.kt)("p",null,"Both denied and granted privileges can be revoked, meaning that their status is\nnot defined for that user or role. Revoking is done using the ",(0,r.kt)("inlineCode",{parentName:"p"},"REVOKE")," keyword.\nThe users should note that, although semantically unintuitive, the level of a\ncertain privilege can be raised by using ",(0,r.kt)("inlineCode",{parentName:"p"},"REVOKE"),". For instance, suppose a user\nhas been denied a ",(0,r.kt)("inlineCode",{parentName:"p"},"INDEX")," privilege, but the role it belongs to is granted\nthat privilege. Currently, the user is unable to use indexing features,\nbut, after revoking the user's ",(0,r.kt)("inlineCode",{parentName:"p"},"INDEX")," privilege, they will be able to do so."),(0,r.kt)("p",null,"Finally, if you wish to grant, deny or revoke all privileges and find it tedious\nto explicitly list them, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALL PRIVILEGES")," construct instead.\nFor example, revoking all privileges from user ",(0,r.kt)("inlineCode",{parentName:"p"},"jdoe")," can be done with the\nfollowing command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"REVOKE ALL PRIVILEGES FROM jdoe;\n")),(0,r.kt)("p",null,"Finally, obtaining the status of each privilege for a certain user or role can be\ndone by issuing the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW PRIVILEGES FOR user_or_role;\n")),(0,r.kt)("h2",{id:"owners"},"Owners"),(0,r.kt)("p",null,"The privileges of the owners of\n",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/next/reference-guide/streams#creating-a-stream"},"streams")," and\n",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/next/reference-guide/triggers#owner"},"triggers")," are propagated to the\ncorresponding query executions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in case of streams for the queries returned by the transformations"),(0,r.kt)("li",{parentName:"ul"},"in case of triggers for trigger statements")),(0,r.kt)("p",null,"This means the execution of the queries will fail if the owner doesn't have the\nrequired privileges. There are a few important details:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If there are no existing users, no privilege check is performed similarly to\nregular queries."),(0,r.kt)("li",{parentName:"ul"},"If a stream or trigger is created without using a logged-in user\nsession, the owner will be ",(0,r.kt)("inlineCode",{parentName:"li"},"Null"),". From the point when the first user is created\nsuch streams and triggers will fail because the lack of owner is treated as a\nuser without any privileges, so no queries are allowed to be executed."),(0,r.kt)("li",{parentName:"ul"},"Currently, there is no way of changing the owner. The only workaround for this\nis to delete the stream or trigger and then create it again with another user.")),(0,r.kt)("h2",{id:"streams"},"Streams"),(0,r.kt)("p",null,"The user who executes the ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE STREAM")," query is going to be the owner of the stream.\nAuthentication and authorization are not supported in Memgraph Community, thus\nthe owner will always be ",(0,r.kt)("inlineCode",{parentName:"p"},"Null"),", and the privileges are not checked in Memgraph\nCommunity. In Memgraph Enterprise the privileges of the owner are used when\nexecuting the queries returned from a transformation, in other words, the\nexecution of the queries will fail if  the owner doesn't have the required\nprivileges. More information about how the owner affects the stream can be\nfound in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/next/reference-guide/streams#create-a-stream"},"reference guide"),"."),(0,r.kt)("h2",{id:"label-based-access-control"},"Label-based access control"),(0,r.kt)("p",null,"Sometimes, disabling users from executing certain commands is too restrictive.\nLabel-based access control enables database administrators to disable users from\nviewing or manipulating nodes with certain labels and relationships of certain types."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/next/how-to-guides/manage-label-based-access-control"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=How-to&color=blue&style=for-the-badge",alt:"Related - How to"}))),(0,r.kt)("p",null,"Label-based permissions are divided into 4 hierarchical parts or levels:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOTHING")," - denies user visibility and manipulation over nodes and relationships"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"READ")," - grants the user visibility over nodes and relationships"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UPDATE")," - grants the user visibility and the ability to edit nodes and relationships "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CREATE_DELETE")," - grants the user visibility, editing, creation, and deletion of a node or a\nrelationship")),(0,r.kt)("h3",{id:"node-permissions"},"Node permissions"),(0,r.kt)("p",null,"Granting a certain set of node permissions can be done similarly to the clause\nprivileges using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT permission_level ON LABELS label_list TO user_or_role;\n")),(0,r.kt)("p",null,"with the legend:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"permission_level")," is either ",(0,r.kt)("inlineCode",{parentName:"li"},"NOTHING"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"READ"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UPDATE")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"CREATE_DELETE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label_list")," is a set of node labels, separated with a comma and with a colon in front of\neach label (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},":L1"),"), or ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," for specifying all labels in the graph"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user_or_role")," is the already created user or role in Memgraph")),(0,r.kt)("p",null,"For example, granting a ",(0,r.kt)("inlineCode",{parentName:"p"},"READ")," permission on labels ",(0,r.kt)("inlineCode",{parentName:"p"},"L1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"L2")," would be written as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT READ ON LABELS :L1, :L2 TO charlie;\n")),(0,r.kt)("p",null,"while granting both ",(0,r.kt)("inlineCode",{parentName:"p"},"READ")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"EDIT")," permissions for all labels in the graph, would be written as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT UPDATE ON LABELS * TO charlie;\n")),(0,r.kt)("p",null,"For denying visibility to a node, the command would be written as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT NOTHING ON LABELS :L1 TO charlie;\n")),(0,r.kt)("h3",{id:"relationship-permissions"},"Relationship permissions"),(0,r.kt)("p",null,"Relationship permission queries are in essence the same as node permission queries, with the\none difference that the name of the relationship type is ",(0,r.kt)("inlineCode",{parentName:"p"},"EDGE_TYPE")," and not ",(0,r.kt)("inlineCode",{parentName:"p"},"LABEL"),"."),(0,r.kt)("p",null,"Granting a certain set of edge type permissions can be done similarly to the\nclause privileges by issuing the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT permission_level ON EDGE_TYPES edge_type_list TO user_or_role;\n")),(0,r.kt)("p",null,"with the same legend as the node permissions."),(0,r.kt)("p",null,"For example, granting a ",(0,r.kt)("inlineCode",{parentName:"p"},"READ")," permission on relationship type ",(0,r.kt)("inlineCode",{parentName:"p"},":CONNECTS")," would be written as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"GRANT READ ON EDGE_TYPES :CONNECTS TO charlie;\n")),(0,r.kt)("h3",{id:"revoking-label-based-permissions"},"Revoking label-based permissions"),(0,r.kt)("p",null,"To revoke any of the label-based permissions, users can use one of the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"REVOKE (LABELS | EDGE_TYPES) label_or_edge_type_list FROM user_or_role\n")),(0,r.kt)("p",null,"where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label_or_edge_type_list")," is a list of labels or edge types with a colon in front of each\nlabel or edge type (or ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," for specifying all labels or edge types)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user_or_role")," is the existing user or role in Memgraph")),(0,r.kt)("h3",{id:"show-privileges-for-label-based-access-control"},"Show privileges for label-based access control"),(0,r.kt)("p",null,"To check which privileges an existing user or role has in Memgraph, it is enough to write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW PRIVILEGES FOR user_or_role;\n")),(0,r.kt)("p",null,"and all the values of clause privileges, as well as label-based permissions will be displayed."))}u.isMDXComponent=!0}}]);