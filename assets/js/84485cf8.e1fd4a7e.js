"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63765],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=d(a),k=r,c=u["".concat(o,".").concat(k)]||u[k]||s[k]||l;return a?n.createElement(c,p(p({ref:t},m),{},{components:a})):n.createElement(c,p({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,p=new Array(l);p[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var d=2;d<l;d++)p[d]=a[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},13629:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={id:"cpp-api",title:"Query modules C++ API",sidebar_label:"C++ API",slug:"/reference-guide/query-modules/api/cpp-api"},p=void 0,i={unversionedId:"reference-guide/query-modules/implement-custom-query-modules/api/cpp-api",id:"version-2.4.2/reference-guide/query-modules/implement-custom-query-modules/api/cpp-api",title:"Query modules C++ API",description:"This is the API documentation for mgp.hpp, which contains declarations of all",source:"@site/memgraph_versioned_docs/version-2.4.2/reference-guide/query-modules/implement-custom-query-modules/api/cpp-api.md",sourceDirName:"reference-guide/query-modules/implement-custom-query-modules/api",slug:"/reference-guide/query-modules/api/cpp-api",permalink:"/docs/memgraph/2.4.2/reference-guide/query-modules/api/cpp-api",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.4.2/reference-guide/query-modules/implement-custom-query-modules/api/cpp-api.md",tags:[],version:"2.4.2",frontMatter:{id:"cpp-api",title:"Query modules C++ API",sidebar_label:"C++ API",slug:"/reference-guide/query-modules/api/cpp-api"},sidebar:"memgraph",previous:{title:"C API",permalink:"/docs/memgraph/2.4.2/reference-guide/query-modules/api/c-api"},next:{title:"Example of a custom query module",permalink:"/docs/memgraph/2.4.2/reference-guide/query-modules/implement-custom-query-modules/custom-query-module-example"}},o={},d=[{value:"Functions and procedures",id:"functions-and-procedures",level:2},{value:"AddProcedure",id:"addprocedure",level:3},{value:"Input",id:"input",level:4},{value:"ProcedureType",id:"proceduretype",level:4},{value:"AddFunction",id:"addfunction",level:3},{value:"Input",id:"input-1",level:4},{value:"Parameter",id:"parameter",level:3},{value:"Constructors",id:"constructors",level:4},{value:"Member variables",id:"member-variables",level:4},{value:"Return",id:"return",level:3},{value:"Constructors",id:"constructors-1",level:4},{value:"Member variables",id:"member-variables-1",level:4},{value:"RecordFactory",id:"recordfactory",level:3},{value:"Constructors",id:"constructors-2",level:4},{value:"Member functions",id:"member-functions",level:4},{value:"Record",id:"record",level:3},{value:"Constructors",id:"constructors-3",level:4},{value:"Member functions",id:"member-functions-1",level:4},{value:"Insert",id:"insert",level:5},{value:"Result",id:"result",level:3},{value:"Constructors",id:"constructors-4",level:4},{value:"Member functions",id:"member-functions-2",level:4},{value:"SetValue",id:"setvalue",level:5},{value:"Graph API",id:"graph-api",level:2},{value:"Graph",id:"graph",level:3},{value:"Constructors",id:"constructors-5",level:4},{value:"Member functions",id:"member-functions-3",level:4},{value:"Order",id:"order",level:5},{value:"Size",id:"size",level:5},{value:"Nodes",id:"nodes",level:5},{value:"Relationships",id:"relationships",level:5},{value:"GetNodeById",id:"getnodebyid",level:5},{value:"ContainsNode",id:"containsnode",level:5},{value:"ContainsRelationship",id:"containsrelationship",level:5},{value:"IsMutable",id:"ismutable",level:5},{value:"CreateNode",id:"createnode",level:5},{value:"DeleteNode",id:"deletenode",level:5},{value:"DetachDeleteNode",id:"detachdeletenode",level:5},{value:"CreateRelationship",id:"createrelationship",level:5},{value:"DeleteRelationship",id:"deleterelationship",level:5},{value:"GraphNodes",id:"graphnodes",level:4},{value:"Constructors",id:"constructors-6",level:5},{value:"Member variables",id:"member-variables-2",level:5},{value:"Member functions",id:"member-functions-4",level:5},{value:"GraphRelationships",id:"graphrelationships",level:4},{value:"Constructors",id:"constructors-7",level:5},{value:"Member variables",id:"member-variables-3",level:5},{value:"Member functions",id:"member-functions-5",level:5},{value:"Node",id:"node",level:3},{value:"Constructors",id:"constructors-8",level:4},{value:"Member functions",id:"member-functions-6",level:4},{value:"Id",id:"id",level:5},{value:"Labels",id:"labels",level:5},{value:"HasLabel",id:"haslabel",level:5},{value:"Properties",id:"properties",level:5},{value:"InRelationships",id:"inrelationships",level:5},{value:"OutRelationships",id:"outrelationships",level:5},{value:"AddLabel",id:"addlabel",level:5},{value:"Operators",id:"operators",level:4},{value:"operator[]",id:"operator",level:5},{value:"Relationship",id:"relationship",level:3},{value:"Constructors",id:"constructors-9",level:4},{value:"Member functions",id:"member-functions-7",level:4},{value:"Id",id:"id-1",level:5},{value:"Type",id:"type",level:5},{value:"Properties",id:"properties-1",level:5},{value:"From",id:"from",level:5},{value:"To",id:"to",level:5},{value:"Operators",id:"operators-1",level:4},{value:"operator[]",id:"operator-1",level:5},{value:"Relationships",id:"relationships-1",level:4},{value:"Constructors",id:"constructors-10",level:5},{value:"Member variables",id:"member-variables-4",level:5},{value:"Member functions",id:"member-functions-8",level:5},{value:"Id",id:"id-2",level:3},{value:"Member functions",id:"member-functions-9",level:4},{value:"FromUint",id:"fromuint",level:5},{value:"FromInt",id:"fromint",level:5},{value:"AsUint",id:"asuint",level:5},{value:"AsInt",id:"asint",level:5},{value:"Operators",id:"operators-2",level:4},{value:"Properties",id:"properties-2",level:3},{value:"Constructors",id:"constructors-11",level:4},{value:"Member functions",id:"member-functions-10",level:4},{value:"Size",id:"size-1",level:5},{value:"Empty",id:"empty",level:5},{value:"Operators",id:"operators-3",level:4},{value:"operator[]",id:"operator-2",level:5},{value:"Labels",id:"labels-1",level:3},{value:"Constructors",id:"constructors-12",level:4},{value:"Member variables",id:"member-variables-5",level:4},{value:"Member functions",id:"member-functions-11",level:4},{value:"Size",id:"size-2",level:5},{value:"Operators",id:"operators-4",level:4},{value:"operator[]",id:"operator-3",level:5},{value:"Date",id:"date",level:3},{value:"Constructors",id:"constructors-13",level:4},{value:"Member functions",id:"member-functions-12",level:4},{value:"Now",id:"now",level:5},{value:"Year",id:"year",level:5},{value:"Month",id:"month",level:5},{value:"Day",id:"day",level:5},{value:"Timestamp",id:"timestamp",level:5},{value:"Operators",id:"operators-5",level:4},{value:"operator-",id:"operator-",level:5},{value:"operator[]",id:"operator-4",level:5},{value:"LocalTime",id:"localtime",level:3},{value:"Constructors",id:"constructors-14",level:4},{value:"Member functions",id:"member-functions-13",level:4},{value:"Now",id:"now-1",level:5},{value:"Hour",id:"hour",level:5},{value:"Minute",id:"minute",level:5},{value:"Second",id:"second",level:5},{value:"Millisecond",id:"millisecond",level:5},{value:"Microsecond",id:"microsecond",level:5},{value:"Timestamp",id:"timestamp-1",level:5},{value:"Operators",id:"operators-6",level:4},{value:"operator-",id:"operator--1",level:5},{value:"LocalDateTime",id:"localdatetime",level:3},{value:"Constructors",id:"constructors-15",level:4},{value:"Member functions",id:"member-functions-14",level:4},{value:"Now",id:"now-2",level:5},{value:"Year",id:"year-1",level:5},{value:"Month",id:"month-1",level:5},{value:"Day",id:"day-1",level:5},{value:"Hour",id:"hour-1",level:5},{value:"Minute",id:"minute-1",level:5},{value:"Second",id:"second-1",level:5},{value:"Millisecond",id:"millisecond-1",level:5},{value:"Microsecond",id:"microsecond-1",level:5},{value:"Timestamp",id:"timestamp-2",level:5},{value:"Operators",id:"operators-7",level:4},{value:"operator-",id:"operator--2",level:5},{value:"Duration",id:"duration",level:3},{value:"Constructors",id:"constructors-16",level:4},{value:"Member functions",id:"member-functions-15",level:4},{value:"Microseconds",id:"microseconds",level:5},{value:"Operators",id:"operators-8",level:4},{value:"operator-",id:"operator--3",level:5},{value:"Path",id:"path",level:3},{value:"Constructors",id:"constructors-17",level:4},{value:"Member functions",id:"member-functions-16",level:4},{value:"Length",id:"length",level:5},{value:"GetNodeAt",id:"getnodeat",level:5},{value:"GetRelationshipAt",id:"getrelationshipat",level:5},{value:"Expand",id:"expand",level:5},{value:"Operators",id:"operators-9",level:4},{value:"List",id:"list",level:3},{value:"Constructors",id:"constructors-18",level:4},{value:"Member variables",id:"member-variables-6",level:4},{value:"Member functions",id:"member-functions-17",level:4},{value:"Size",id:"size-3",level:5},{value:"Empty",id:"empty-1",level:5},{value:"Append",id:"append",level:5},{value:"AppendExtend",id:"appendextend",level:5},{value:"Operators",id:"operators-10",level:4},{value:"operator[]",id:"operator-5",level:5},{value:"Map",id:"map",level:3},{value:"Constructors",id:"constructors-19",level:4},{value:"Member variables",id:"member-variables-7",level:4},{value:"Member functions",id:"member-functions-18",level:4},{value:"Size",id:"size-4",level:5},{value:"Empty",id:"empty-2",level:5},{value:"At",id:"at",level:5},{value:"Insert",id:"insert-1",level:5},{value:"Operators",id:"operators-11",level:4},{value:"operator[]",id:"operator-6",level:5},{value:"MapItem",id:"mapitem",level:4},{value:"Member variables",id:"member-variables-8",level:5},{value:"Operators",id:"operators-12",level:5},{value:"Value",id:"value",level:3},{value:"Constructors",id:"constructors-20",level:4},{value:"Member functions",id:"member-functions-19",level:4},{value:"Type",id:"type-1",level:5},{value:"ValueTYPE",id:"valuetype",level:5},{value:"IsTYPE",id:"istype",level:5},{value:"Operators",id:"operators-13",level:4},{value:"Type",id:"type-2",level:3},{value:"Exceptions",id:"exceptions",level:2}],m={toc:d};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is the API documentation for ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp.hpp"),", which contains declarations of all\nfunctions in the C++ API for implementing query module procedures and functions.\nThe source file can be found in the Memgraph installation directory, under\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/include/memgraph"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To see how to implement query modules in C++, take a look at\n",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.4.2/reference-guide/query-modules/implement-custom-query-modules/custom-query-module-example#cpp-api"},"the example we provided"),".")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you install any C++ modules after running Memgraph, you\u2019ll need to ",(0,r.kt)("a",{parentName:"p",href:"../load-call-query-modules#loading-query-modules"},"load\nthem into Memgraph")," or restart\nMemgraph in order to use them.")),(0,r.kt)("h2",{id:"functions-and-procedures"},"Functions and procedures"),(0,r.kt)("p",null,"With this API it\u2019s possible to extend your Cypher queries with ",(0,r.kt)("strong",{parentName:"p"},"functions")," and ",(0,r.kt)("strong",{parentName:"p"},"procedures")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"AddProcedure")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AddFunction"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The API needs memory access to add procedures and functions; this can be done with ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp::memory = memory;"),".")),(0,r.kt)("p",null,"Functions are simple operations that return a single value and can be used in any expression or predicate."),(0,r.kt)("p",null,"Procedures are more complex computations that may modify the graph, and their output is available to\nlater processing steps in your query. A procedure may only be run from ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," clauses.\nThe output is a stream of ",(0,r.kt)("strong",{parentName:"p"},"records")," that is made accessible with a ",(0,r.kt)("inlineCode",{parentName:"p"},"YIELD")," clause."),(0,r.kt)("h3",{id:"addprocedure"},"AddProcedure"),(0,r.kt)("p",null,"Add a procedure to your query module. The procedure is registered as ",(0,r.kt)("inlineCode",{parentName:"p"},"[QUERY_MODULE_NAME].[PROC_NAME]"),"\nand can be used in Cypher queries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void AddProcedure(\n    mgp_proc_cb callback, \n    std::string_view name,\n    ProdecureType proc_type,\n    std::vector<mgp::Parameter> parameters,\n    std::vector<Return> returns,\n    mgp_module *module,\n    mgp_memory *memory);\n")),(0,r.kt)("h4",{id:"input"},"Input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callback"),": procedure callback"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": procedure name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proc_type"),": procedure type (read/write)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parameters"),": vector (list) of procedure parameters"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"returns"),": vector (list) of procedure return values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"module"),": the query module that the procedure is added to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memory"),": access to memory")),(0,r.kt)("h4",{id:"proceduretype"},"ProcedureType"),(0,r.kt)("p",null,"Enum class for Cypher procedure types."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ProcedureType::Read"),": read procedure"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ProcedureType::Write"),": write procedure")),(0,r.kt)("h3",{id:"addfunction"},"AddFunction"),(0,r.kt)("p",null,"Add a function to your query module. The function is registered as ",(0,r.kt)("inlineCode",{parentName:"p"},"[QUERY_MODULE_NAME].[FUNC_NAME]"),"\nand can be used in Cypher queries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void AddFunction(\n    mgp_func_cb callback, \n    std::string_view name,\n    std::vector<mgp::Parameter> parameters,\n    std::vector<Return> returns,\n    mgp_module *module,\n    mgp_memory *memory);\n")),(0,r.kt)("h4",{id:"input-1"},"Input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callback"),": function callback"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": function name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parameters"),": vector (list) of function parameters"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"returns"),": vector (list) of function return values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"module"),": the query module that the procedure is added to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memory"),": access to memory")),(0,r.kt)("h3",{id:"parameter"},"Parameter"),(0,r.kt)("p",null,"Represents a procedure/function parameter. Parameters are defined by their name, type,\nand (if optional) default value."),(0,r.kt)("h4",{id:"constructors"},"Constructors"),(0,r.kt)("p",null,"Creates a non-optional parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, mgp::Type type)\n")),(0,r.kt)("p",null,"Creates an optional Boolean parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, mgp::Type type, bool default_value)\n")),(0,r.kt)("p",null,"Creates an optional integer parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, mgp::Type type, bool default_value)\n")),(0,r.kt)("p",null,"Creates an optional floating-point parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, mgp::Type type, bool default_value)\n")),(0,r.kt)("p",null,"Creates an optional string parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, mgp::Type type, std::string_view default_value)\nParameter(std::string_view name, mgp::Type type, const char *default_value)\n")),(0,r.kt)("p",null,"Creates a non-optional list parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"item_type"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"list_type")," parameter is organized as follows: ",(0,r.kt)("inlineCode",{parentName:"p"},"{Type::List, Type::[ITEM_TYPE]}"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, std::pair<mgp::Type, mgp::Type> list_type)\n")),(0,r.kt)("p",null,"Creates an optional list parameter with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"item_type"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"list_type")," parameter is organized as follows: ",(0,r.kt)("inlineCode",{parentName:"p"},"{Type::List, Type::[ITEM_TYPE]}"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Parameter(std::string_view name, std::pair<mgp::Type, mgp::Type> list_type, mgp::Value default_value)\n")),(0,r.kt)("h4",{id:"member-variables"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"std::string_view")),(0,r.kt)("td",{parentName:"tr",align:null},"parameter name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type_")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Type")),(0,r.kt)("td",{parentName:"tr",align:null},"parameter type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list_item_type_")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Type")),(0,r.kt)("td",{parentName:"tr",align:null},"(list parameters) item type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"optional")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"whether the parameter is optional")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default_value")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Value")),(0,r.kt)("td",{parentName:"tr",align:null},"(optional parameters) default value")))),(0,r.kt)("h3",{id:"return"},"Return"),(0,r.kt)("p",null,"Represents a procedure/function return value. Values are defined by their name and type."),(0,r.kt)("h4",{id:"constructors-1"},"Constructors"),(0,r.kt)("p",null,"Creates a return value with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Return(std::string_view name, mgp::Type type) \n")),(0,r.kt)("p",null,"Creates a return value with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"list_type"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"list_type")," parameter is organized as follows: ",(0,r.kt)("inlineCode",{parentName:"p"},"{Type::List, Type::[ITEM_TYPE]}"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Return(std::string_view name, std::pair<mgp::Type, mgp::Type> list_type)\n")),(0,r.kt)("h4",{id:"member-variables-1"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"std::string_view")),(0,r.kt)("td",{parentName:"tr",align:null},"return name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type_")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Type")),(0,r.kt)("td",{parentName:"tr",align:null},"return type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list_item_type_")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Type")),(0,r.kt)("td",{parentName:"tr",align:null},"(list values) item type")))),(0,r.kt)("h3",{id:"recordfactory"},"RecordFactory"),(0,r.kt)("p",null,"Factory class for ",(0,r.kt)("a",{parentName:"p",href:"#Record"},(0,r.kt)("inlineCode",{parentName:"a"},"Record")),"."),(0,r.kt)("h4",{id:"constructors-2"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit RecordFactory(mgp_result *result)\n")),(0,r.kt)("h4",{id:"member-functions"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NewRecord")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds a new result record.")))),(0,r.kt)("h3",{id:"record"},"Record"),(0,r.kt)("p",null,"Represents a ",(0,r.kt)("strong",{parentName:"p"},"record")," - the building block of Cypher procedure results. Each result is a stream of records,\nand a function\u2019s record is a sequence of (field name: output value) pairs."),(0,r.kt)("h4",{id:"constructors-3"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Record(mgp_result_record *record)\n")),(0,r.kt)("h4",{id:"member-functions-1"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Insert")),(0,r.kt)("td",{parentName:"tr",align:null},"Inserts a value of given type under field ",(0,r.kt)("inlineCode",{parentName:"td"},"field_name"),".")))),(0,r.kt)("h5",{id:"insert"},"Insert"),(0,r.kt)("p",null,"Inserts a value of given type under field ",(0,r.kt)("inlineCode",{parentName:"p"},"field_name"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, bool value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, std::int64_t value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, double value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, std::string_view value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const char *value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::List &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::Map &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::Node &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::Relationship &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::Path &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::Date &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::LocalTime value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::LocalDateTime value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void Insert(const char *field_name, const mgp::Duration value)\n")),(0,r.kt)("h3",{id:"result"},"Result"),(0,r.kt)("p",null,"Represents a ",(0,r.kt)("strong",{parentName:"p"},"result")," - the single return value of a Cypher function."),(0,r.kt)("h4",{id:"constructors-4"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Result(mgp_func_result *result)\n")),(0,r.kt)("h4",{id:"member-functions-2"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SetValue")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets a return value of given type.")))),(0,r.kt)("h5",{id:"setvalue"},"SetValue"),(0,r.kt)("p",null,"Sets a return value of given type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(bool value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(std::int64_t value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(double value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(std::string_view value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const char *value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::List &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::Map &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::Node &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::Relationship &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::Path &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::Date &value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::LocalTime value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::LocalDateTime value)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void SetValue(const mgp::Duration value)\n")),(0,r.kt)("h2",{id:"graph-api"},"Graph API"),(0,r.kt)("p",null,"This section covers the interface for working with the Memgraph DB graph using the C++ API.\nA description of data types is available ",(0,r.kt)("a",{parentName:"p",href:"https://memgraph.com/docs/memgraph/reference-guide/data-types"},"here"),"."),(0,r.kt)("h3",{id:"graph"},"Graph"),(0,r.kt)("h4",{id:"constructors-5"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Graph(mgp_graph *graph)\n")),(0,r.kt)("h4",{id:"member-functions-3"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Order")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the graph order (number of nodes).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the graph size (number of relationships).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Nodes")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable structure of the graph\u2019s nodes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Relationships")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable structure of the graph\u2019s relationships.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GetNodeById")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the graph node with the given ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ContainsNode")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the graph contains the given node (accepts node or its ID).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ContainsRelationship")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the graph contains the given relationship (accepts relationship or its ID).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IsMutable")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the graph is mutable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CreateNode")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates a node and adds it to the graph.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DeleteNode")),(0,r.kt)("td",{parentName:"tr",align:null},"Deletes a node from the graph.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DetachDeleteNode")),(0,r.kt)("td",{parentName:"tr",align:null},"Deletes a node and all its incident edges from the graph.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CreateRelationship")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates a relationship of type ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," between nodes ",(0,r.kt)("inlineCode",{parentName:"td"},"from")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"to")," and adds it to the graph.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DeleteRelationship")),(0,r.kt)("td",{parentName:"tr",align:null},"Deletes a relationship from the graph.")))),(0,r.kt)("h5",{id:"order"},"Order"),(0,r.kt)("p",null,"Returns the graph order (number of nodes)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t Order() const\n")),(0,r.kt)("h5",{id:"size"},"Size"),(0,r.kt)("p",null,"Returns the graph size (number of relationships)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t Size() const\n")),(0,r.kt)("h5",{id:"nodes"},"Nodes"),(0,r.kt)("p",null,"Returns an iterable structure of the graph\u2019s nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::GraphNodes Nodes() const\n")),(0,r.kt)("h5",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"Returns an iterable structure of the graph\u2019s relationships."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::GraphRelationships Relationships() const\n")),(0,r.kt)("h5",{id:"getnodebyid"},"GetNodeById"),(0,r.kt)("p",null,"Returns the graph node with the given ID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Node GetNodeById(const mgp::Id node_id) const\n")),(0,r.kt)("h5",{id:"containsnode"},"ContainsNode"),(0,r.kt)("p",null,"Returns whether the graph contains a node with the given ID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool ContainsNode(const Id node_id) const\n")),(0,r.kt)("p",null,"Returns whether the graph contains the given node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool ContainsNode(const Node &node) const\n")),(0,r.kt)("h5",{id:"containsrelationship"},"ContainsRelationship"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool ContainsRelationship(const Id relationship_id) const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool ContainsRelationship(const Relationship &relationship) const\n")),(0,r.kt)("h5",{id:"ismutable"},"IsMutable"),(0,r.kt)("p",null,"Returns whether the graph is mutable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsMutable() const\n")),(0,r.kt)("h5",{id:"createnode"},"CreateNode"),(0,r.kt)("p",null,"Creates a node and adds it to the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Node CreateNode();\n")),(0,r.kt)("h5",{id:"deletenode"},"DeleteNode"),(0,r.kt)("p",null,"Deletes a node from the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void DeleteNode(const mgp::Node &node)\n")),(0,r.kt)("h5",{id:"detachdeletenode"},"DetachDeleteNode"),(0,r.kt)("p",null,"Deletes a node and all its incident edges from the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void DetachDeleteNode(const mgp::Node &node)\n")),(0,r.kt)("h5",{id:"createrelationship"},"CreateRelationship"),(0,r.kt)("p",null,"Creates a relationship of type ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," between nodes ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"to")," and adds it to the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Relationship CreateRelationship(const mgp::Node &from, const mgp::Node &to, const std::string_view type)\n")),(0,r.kt)("h5",{id:"deleterelationship"},"DeleteRelationship"),(0,r.kt)("p",null,"Deletes a relationship from the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void DeleteRelationship(const mgp::Relationship &relationship)\n")),(0,r.kt)("h4",{id:"graphnodes"},"GraphNodes"),(0,r.kt)("p",null,"Auxiliary class providing an iterable view of the nodes contained in the graph.\n",(0,r.kt)("inlineCode",{parentName:"p"},"GraphNodes")," values may only be used for iteration to obtain the values stored within."),(0,r.kt)("h5",{id:"constructors-6"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit GraphNodes(mgp_vertices_iterator *nodes_iterator)\n")),(0,r.kt)("h5",{id:"member-variables-2"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::GraphNodes::Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},"Const forward iterator for ",(0,r.kt)("inlineCode",{parentName:"td"},"GraphNodes"),".")))),(0,r.kt)("h5",{id:"member-functions-4"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"begin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"end"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cbegin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cend")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beginning/end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"GraphNodes")," iterator.")))),(0,r.kt)("h4",{id:"graphrelationships"},"GraphRelationships"),(0,r.kt)("p",null,"Auxiliary class providing an iterable view of the relationships contained in the graph.\n",(0,r.kt)("inlineCode",{parentName:"p"},"GraphRelationships")," values may only be used for iteration to obtain the values stored within."),(0,r.kt)("h5",{id:"constructors-7"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit GraphRelationships(mgp_graph *graph)\n")),(0,r.kt)("h5",{id:"member-variables-3"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::GraphRelationships::Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},"Const forward iterator for ",(0,r.kt)("inlineCode",{parentName:"td"},"GraphRelationships"),".")))),(0,r.kt)("h5",{id:"member-functions-5"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"begin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"end"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cbegin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cend")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beginning/end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"GraphRelationship")," iterator.")))),(0,r.kt)("h3",{id:"node"},"Node"),(0,r.kt)("p",null,"Represents a node (vertex) of the Memgraph graph."),(0,r.kt)("h4",{id:"constructors-8"},"Constructors"),(0,r.kt)("p",null,"Creates a Node from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_vertex"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Node(mgp_vertex *ptr)\nexplicit Node(const mgp_vertex *const_ptr)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Node(const Node &other)\nNode(Node &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-6"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Id")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the node\u2019s ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Labels")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable & indexable structure of the node\u2019s labels.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HasLabel")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the node has the given ",(0,r.kt)("inlineCode",{parentName:"td"},"label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Properties")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable & indexable structure of the node\u2019s properties.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"InRelationships")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable structure of the node\u2019s inbound relationships.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OutRelationships")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable structure of the node\u2019s outbound relationships.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AddLabel")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds a label to the node.")))),(0,r.kt)("h5",{id:"id"},"Id"),(0,r.kt)("p",null,"Returns the node\u2019s ID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Id Id() const\n")),(0,r.kt)("h5",{id:"labels"},"Labels"),(0,r.kt)("p",null,"Returns an iterable & indexable structure of the node\u2019s labels."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Labels Labels() const\n")),(0,r.kt)("h5",{id:"haslabel"},"HasLabel"),(0,r.kt)("p",null,"Returns whether the node has the given ",(0,r.kt)("inlineCode",{parentName:"p"},"label"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool HasLabel(std::string_view label) const\n")),(0,r.kt)("h5",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Returns an iterable & indexable structure of the node\u2019s properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Properties Properties() const\n")),(0,r.kt)("h5",{id:"inrelationships"},"InRelationships"),(0,r.kt)("p",null,"Returns an iterable structure of the node\u2019s inbound relationships."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Relationships InRelationships() const\n")),(0,r.kt)("h5",{id:"outrelationships"},"OutRelationships"),(0,r.kt)("p",null,"Returns an iterable structure of the node\u2019s outbound relationships."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Relationships OutRelationships() const\n")),(0,r.kt)("h5",{id:"addlabel"},"AddLabel"),(0,r.kt)("p",null,"Adds a label to the node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void AddLabel(const std::string_view label)\n")),(0,r.kt)("h4",{id:"operators"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the value of the node\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"property_name")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator"},"operator[]"),(0,r.kt)("p",null,"Returns the value of the node\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"property_name")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Value operator[](std::string_view property_name) const\n")),(0,r.kt)("h3",{id:"relationship"},"Relationship"),(0,r.kt)("p",null,"Represents a relationship (edge) of the Memgraph graph."),(0,r.kt)("h4",{id:"constructors-9"},"Constructors"),(0,r.kt)("p",null,"Creates a Relationship from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_edge"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Relationship(mgp_edge *ptr)\nexplicit Relationship(const mgp_edge *const_ptr)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Relationship(const Relationship &other)\nRelationship(Relationship &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-7"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Id")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the relationship\u2019s ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the relationship\u2019s type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Properties")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an iterable & indexable structure of the relationship\u2019s properties.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"From")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the relationship\u2019s source node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"To")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the relationship\u2019s destination node.")))),(0,r.kt)("h5",{id:"id-1"},"Id"),(0,r.kt)("p",null,"Returns the relationship\u2019s ID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Id Id() const\n")),(0,r.kt)("h5",{id:"type"},"Type"),(0,r.kt)("p",null,"Returns the relationship\u2019s type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string_view Type() const\n")),(0,r.kt)("h5",{id:"properties-1"},"Properties"),(0,r.kt)("p",null,"Returns an iterable & indexable structure of the relationship\u2019s properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Properties Properties() const\n")),(0,r.kt)("h5",{id:"from"},"From"),(0,r.kt)("p",null,"Returns the relationship\u2019s source node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Node From() const\n")),(0,r.kt)("h5",{id:"to"},"To"),(0,r.kt)("p",null,"Returns the relationship\u2019s source node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Node To() const\n")),(0,r.kt)("h4",{id:"operators-1"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the value of the relationship\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"property_name")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator-1"},"operator[]"),(0,r.kt)("p",null,"Returns the value of the relationship\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"property_name")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Value operator[](std::string_view property_name) const\n")),(0,r.kt)("h4",{id:"relationships-1"},"Relationships"),(0,r.kt)("p",null,"Auxiliary class providing an iterable view of the relationships adjacent to a node.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Relationships")," values may only be used for iteration to obtain the values stored within."),(0,r.kt)("h5",{id:"constructors-10"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Relationships(mgp_edges_iterator *relationships_iterator)\n")),(0,r.kt)("h5",{id:"member-variables-4"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Relationships::Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},"Const forward iterator for ",(0,r.kt)("inlineCode",{parentName:"td"},"Relationships"),".")))),(0,r.kt)("h5",{id:"member-functions-8"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"begin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"end"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cbegin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cend")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beginning/end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Relationships")," iterator.")))),(0,r.kt)("h3",{id:"id-2"},"Id"),(0,r.kt)("p",null,"Represents the unique ID possessed by all Memgraph nodes and relationships."),(0,r.kt)("h4",{id:"member-functions-9"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FromUint")),(0,r.kt)("td",{parentName:"tr",align:null},"Constructs an ",(0,r.kt)("inlineCode",{parentName:"td"},"Id")," object from ",(0,r.kt)("inlineCode",{parentName:"td"},"uint64_t"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FromInt")),(0,r.kt)("td",{parentName:"tr",align:null},"Constructs an ",(0,r.kt)("inlineCode",{parentName:"td"},"Id")," object from ",(0,r.kt)("inlineCode",{parentName:"td"},"int64_t"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AsUint")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the ID value as ",(0,r.kt)("inlineCode",{parentName:"td"},"uint64_t"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AsInt")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the ID value as ",(0,r.kt)("inlineCode",{parentName:"td"},"int64_t"),".")))),(0,r.kt)("h5",{id:"fromuint"},"FromUint"),(0,r.kt)("p",null,"Constructs an ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," object from ",(0,r.kt)("inlineCode",{parentName:"p"},"uint64_t"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"static mgp::Id FromUint(uint64_t id)\n")),(0,r.kt)("h5",{id:"fromint"},"FromInt"),(0,r.kt)("p",null,"Constructs an ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," object from ",(0,r.kt)("inlineCode",{parentName:"p"},"int64_t"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"static mgp::Id FromInt(int64_t id)\n")),(0,r.kt)("h5",{id:"asuint"},"AsUint"),(0,r.kt)("p",null,"Returns the ID value as ",(0,r.kt)("inlineCode",{parentName:"p"},"uint64_t"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t AsUint() const\n")),(0,r.kt)("h5",{id:"asint"},"AsInt"),(0,r.kt)("p",null,"Returns the ID value as ",(0,r.kt)("inlineCode",{parentName:"p"},"int64_t"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t AsInt() const\n")),(0,r.kt)("h4",{id:"operators-2"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h3",{id:"properties-2"},"Properties"),(0,r.kt)("p",null,"Represents a view of node/relationship properties.\nThe properties are shown as a map of key-value pairs with string keys and ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp::Value")," values."),(0,r.kt)("h4",{id:"constructors-11"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Properties(mgp_properties_iterator *properties_iterator)\n")),(0,r.kt)("h4",{id:"member-functions-10"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the size of the properties map.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Empty")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the properties map is empty.")))),(0,r.kt)("h5",{id:"size-1"},"Size"),(0,r.kt)("p",null,"Returns the size of the properties map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t Size() const\n")),(0,r.kt)("h5",{id:"empty"},"Empty"),(0,r.kt)("p",null,"Returns whether the properties map is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool Empty() const\n")),(0,r.kt)("h4",{id:"operators-3"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the value associated with the given ",(0,r.kt)("inlineCode",{parentName:"td"},"key"),". If there\u2019s no such value, the behavior is undefined.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!=")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator-2"},"operator[]"),(0,r.kt)("p",null,"Returns the value associated with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),". If there\u2019s no such value, the behavior is undefined.\nEach key-value pair needs to be checked, ensuing O(n) time complexity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Value operator[](const std::string_view key) const\n")),(0,r.kt)("h3",{id:"labels-1"},"Labels"),(0,r.kt)("p",null,"Represents a view of node labels."),(0,r.kt)("h4",{id:"constructors-12"},"Constructors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Labels(mgp_vertex *node_ptr) \n")),(0,r.kt)("h4",{id:"member-variables-5"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Labels::Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},"Const forward iterator for ",(0,r.kt)("inlineCode",{parentName:"td"},"Labels"),".")))),(0,r.kt)("h4",{id:"member-functions-11"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the number of the labels, i.e. the size of their list.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"begin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"end"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cbegin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cend")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beginning/end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Labels")," iterator.")))),(0,r.kt)("h5",{id:"size-2"},"Size"),(0,r.kt)("p",null,"Returns the number of the labels, i.e. the size of their list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t Size() const\n")),(0,r.kt)("h4",{id:"operators-4"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the node\u2019s label at position ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),".")))),(0,r.kt)("h5",{id:"operator-3"},"operator[]"),(0,r.kt)("p",null,"Returns the node\u2019s label at position ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string_view operator[](size_t index) const\n")),(0,r.kt)("h3",{id:"date"},"Date"),(0,r.kt)("p",null,"Represents a date with a year, month, and day."),(0,r.kt)("h4",{id:"constructors-13"},"Constructors"),(0,r.kt)("p",null,"Creates a Date object from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_date"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Date(mgp_date *ptr)\nexplicit Date(const mgp_date *const_ptr)\n")),(0,r.kt)("p",null,"Creates a Date object from the given string representing a date in the ISO 8601 format\n(",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDD"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Date(std::string_view string)\n")),(0,r.kt)("p",null,"Creates a Date object with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"year"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"month"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"day")," properties. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Date(int year, int month, int day)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Date(const Date &other)\nDate(Date &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-12"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Now")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the current ",(0,r.kt)("inlineCode",{parentName:"td"},"Date"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Year")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the date\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"year")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Month")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the date\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"month")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Day")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the date\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"day")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the date\u2019s timestamp (microseconds since Unix epoch).")))),(0,r.kt)("h5",{id:"now"},"Now"),(0,r.kt)("p",null,"Returns the current ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"static mgp::Date Now()\n")),(0,r.kt)("h5",{id:"year"},"Year"),(0,r.kt)("p",null,"Returns the date\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Year() const\n")),(0,r.kt)("h5",{id:"month"},"Month"),(0,r.kt)("p",null,"Returns the date\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"month")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Month() const\n")),(0,r.kt)("h5",{id:"day"},"Day"),(0,r.kt)("p",null,"Returns the date\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"day")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Day() const\n")),(0,r.kt)("h5",{id:"timestamp"},"Timestamp"),(0,r.kt)("p",null,"Returns the date\u2019s timestamp (microseconds since Unix epoch)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t Timestamp() const\n")),(0,r.kt)("h4",{id:"operators-5"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator+"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator-")),(0,r.kt)("td",{parentName:"tr",align:null},"arithmetic operators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator-"},"operator-"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Date operator-(const mgp::Duration &dur) const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Duration operator-(const mgp::Date &other) const\n")),(0,r.kt)("h5",{id:"operator-4"},"operator[]"),(0,r.kt)("p",null,"Returns the value of the relationship\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"property_name")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Value operator[](std::string_view property_name) const\n")),(0,r.kt)("h3",{id:"localtime"},"LocalTime"),(0,r.kt)("p",null,"Represents a time within the day without timezone information."),(0,r.kt)("h4",{id:"constructors-14"},"Constructors"),(0,r.kt)("p",null,"Creates a LocalTime object from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_local_time"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit LocalTime(mgp_local_time *ptr)\nexplicit LocalTime(const mgp_local_time *const_ptr)\n")),(0,r.kt)("p",null,"Creates a LocalTime object from the given string representing a date in the ISO 8601 format\n(",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hh:mm:ss"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hh:mm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hhmmss"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hhmm"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hh"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit LocalTime(std::string_view string)\n")),(0,r.kt)("p",null,"Creates a LocalTime object with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"hour"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"minute"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond")," properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"LocalTime(int hour, int minute, int second, int millisecond, int microsecond)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"LocalTime(const LocalTime &other)\nLocalTime(LocalTime &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-13"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Now")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the current ",(0,r.kt)("inlineCode",{parentName:"td"},"LocalTime"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Hour")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"hour")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Minute")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"minute")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Second")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"second")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Millisecond")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"millisecond")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Microsecond")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"microsecond")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s timestamp (microseconds since Unix epoch).")))),(0,r.kt)("h5",{id:"now-1"},"Now"),(0,r.kt)("p",null,"Returns the current ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalTime"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"static mgp::LocalTime Now()\n")),(0,r.kt)("h5",{id:"hour"},"Hour"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"hour")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Hour() const\n")),(0,r.kt)("h5",{id:"minute"},"Minute"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"minute")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Minute() const\n")),(0,r.kt)("h5",{id:"second"},"Second"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"second")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Second() const\n")),(0,r.kt)("h5",{id:"millisecond"},"Millisecond"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Millisecond() const\n")),(0,r.kt)("h5",{id:"microsecond"},"Microsecond"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Microsecond() const\n")),(0,r.kt)("h5",{id:"timestamp-1"},"Timestamp"),(0,r.kt)("p",null,"Returns the object\u2019s timestamp (microseconds since Unix epoch)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t Timestamp() const\n")),(0,r.kt)("h4",{id:"operators-6"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator+"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator-")),(0,r.kt)("td",{parentName:"tr",align:null},"arithmetic operators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator--1"},"operator-"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::LocalTime operator-(const mgp::Duration &dur) const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Duration operator-(const mgp::LocalDateTime &other) const\n")),(0,r.kt)("h3",{id:"localdatetime"},"LocalDateTime"),(0,r.kt)("p",null,"Temporal type representing a date and a local time."),(0,r.kt)("h4",{id:"constructors-15"},"Constructors"),(0,r.kt)("p",null,"Creates a LocalDateTime object from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_local_date_time"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit LocalDateTime(mgp_local_date_time *ptr)\nexplicit LocalDateTime(const mgp_local_date_time *const_ptr)\n")),(0,r.kt)("p",null,"Creates a LocalDateTime object from the given string representing a date in the ISO 8601 format\n(",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDThh:mm:ss"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDThh:mm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDDThhmmss"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDDThhmm"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDDThh"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit LocalDateTime(std::string_view string)\n")),(0,r.kt)("p",null,"Creates a LocalDateTime object with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"year"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"month"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"day"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hour"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"minute"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond")," properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"LocalDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int microsecond)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"LocalDateTime(const LocalDateTime &other)\nLocalDateTime(LocalDateTime &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-14"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Now")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the current ",(0,r.kt)("inlineCode",{parentName:"td"},"LocalDateTime"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Year")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"year")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Month")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"month")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Day")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"day")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Hour")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"hour")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Minute")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"minute")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Second")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"second")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Millisecond")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"millisecond")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Microsecond")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"td"},"microsecond")," property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the object\u2019s timestamp (microseconds since Unix epoch).")))),(0,r.kt)("h5",{id:"now-2"},"Now"),(0,r.kt)("p",null,"Returns the current ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDateTime"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"static mgp::LocalDateTime Now()\n")),(0,r.kt)("h5",{id:"year-1"},"Year"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Year() const\n")),(0,r.kt)("h5",{id:"month-1"},"Month"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"month")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Month() const\n")),(0,r.kt)("h5",{id:"day-1"},"Day"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"day")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Day() const\n")),(0,r.kt)("h5",{id:"hour-1"},"Hour"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"hour")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Hour() const\n")),(0,r.kt)("h5",{id:"minute-1"},"Minute"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"minute")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Minute() const\n")),(0,r.kt)("h5",{id:"second-1"},"Second"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"second")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Second() const\n")),(0,r.kt)("h5",{id:"millisecond-1"},"Millisecond"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Millisecond() const\n")),(0,r.kt)("h5",{id:"microsecond-1"},"Microsecond"),(0,r.kt)("p",null,"Returns the object\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int Microsecond() const\n")),(0,r.kt)("h5",{id:"timestamp-2"},"Timestamp"),(0,r.kt)("p",null,"Returns the date\u2019s timestamp (microseconds since Unix epoch)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t Timestamp() const\n")),(0,r.kt)("h4",{id:"operators-7"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator+"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator-")),(0,r.kt)("td",{parentName:"tr",align:null},"arithmetic operators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator--2"},"operator-"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::LocalDateTime operator-(const mgp::Duration &dur) const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Duration operator-(const mgp::LocalDateTime &other) const\n")),(0,r.kt)("h3",{id:"duration"},"Duration"),(0,r.kt)("p",null,"Represents a period of time in Memgraph."),(0,r.kt)("h4",{id:"constructors-16"},"Constructors"),(0,r.kt)("p",null,"Creates a Duration object from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_duration"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Duration(mgp_duration *ptr)\nexplicit Duration(const mgp_duration *const_ptr)\n")),(0,r.kt)("p",null,"Creates a Duration object from the given string in the following format: ",(0,r.kt)("inlineCode",{parentName:"p"},"P[nD]T[nH][nM][nS]"),", where (1)\n",(0,r.kt)("inlineCode",{parentName:"p"},"n")," stands for a number, (2) capital letters are used as a separator, (3) each field in ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," is optional,\nand (4) only the last field may be a non-integer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Duration(std::string_view string)\n")),(0,r.kt)("p",null,"Creates a Duration object from the given number of microseconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Duration(int64_t microseconds) \n")),(0,r.kt)("p",null,"Creates a Duration object with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"day"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hour"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"minute"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond")," properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Duration(double day, double hour, double minute, double second, double millisecond, double microsecond)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Duration(const Duration &other)\nDuration(Duration &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-15"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Microseconds")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the duration as microseconds.")))),(0,r.kt)("h5",{id:"microseconds"},"Microseconds"),(0,r.kt)("p",null,"Returns the duration as microseconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t Microseconds() const\n")),(0,r.kt)("h4",{id:"operators-8"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator+"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator-")),(0,r.kt)("td",{parentName:"tr",align:null},"arithmetic operators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator--3"},"operator-"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Duration operator-(const mgp::Duration &other) const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Duration operator-() const\n")),(0,r.kt)("h3",{id:"path"},"Path"),(0,r.kt)("p",null,"A path is a data structure consisting of alternating nodes and relationships, with the start\nand end points of a path necessarily being nodes."),(0,r.kt)("h4",{id:"constructors-17"},"Constructors"),(0,r.kt)("p",null,"Creates a Path from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_path"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Path(mgp_path *ptr)\nexplicit Path(const mgp_path *const_ptr)\n")),(0,r.kt)("p",null,"Creates a Path starting with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"start_node"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Path(const mgp::Node &start_node)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Path(const Path &other)\nPath(Path &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-16"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Length")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the path length (number of relationships).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GetNodeAt")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the node at the given ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),".  The ",(0,r.kt)("inlineCode",{parentName:"td"},"index")," must be less than or equal to length of the path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GetRelationshipAt")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the relationship at the given ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),". The ",(0,r.kt)("inlineCode",{parentName:"td"},"index")," must be less than length of the path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Expand")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds a relationship continuing from the last node on the path.")))),(0,r.kt)("h5",{id:"length"},"Length"),(0,r.kt)("p",null,"Returns the path length (number of relationships)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t Length() const\n")),(0,r.kt)("h5",{id:"getnodeat"},"GetNodeAt"),(0,r.kt)("p",null,"Returns the node at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),".  The ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," must be less than or equal to length of the path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Node GetNodeAt(size_t index) const\n")),(0,r.kt)("h5",{id:"getrelationshipat"},"GetRelationshipAt"),(0,r.kt)("p",null,"Returns the relationship at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),".  The ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," must be less than the length of the path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Relationship GetRelationshipAt(size_t index) const\n")),(0,r.kt)("h5",{id:"expand"},"Expand"),(0,r.kt)("p",null,"Adds a relationship continuing from the last node on the path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Expand(const mgp::Relationship &relationship)\n")),(0,r.kt)("h4",{id:"operators-9"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!=")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)("p",null,"A list containing any number of values of any supported type."),(0,r.kt)("h4",{id:"constructors-18"},"Constructors"),(0,r.kt)("p",null,"Creates a List from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_list"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit List(mgp_list *ptr)\nexplicit List(const mgp_list *const_ptr)\n")),(0,r.kt)("p",null,"Creates an empty List."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit List()\n")),(0,r.kt)("p",null,"Creates a List with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"capacity"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit List(size_t capacity)\n")),(0,r.kt)("p",null,"Creates a List from the given vector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit List(const std::vector<Value> &values)\nexplicit List(std::vector<Value> &&values)\n")),(0,r.kt)("p",null,"Creates a List from the given initializer_list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit List(const std::initializer_list<Value> list)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"List(const List &other)\nList(List &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-variables-6"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::List::Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},"Const forward iterator for ",(0,r.kt)("inlineCode",{parentName:"td"},"List")," containers.")))),(0,r.kt)("h4",{id:"member-functions-17"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the size of the list.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Empty")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the list is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Append")),(0,r.kt)("td",{parentName:"tr",align:null},"Appends the given ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," to the list.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AppendExtend")),(0,r.kt)("td",{parentName:"tr",align:null},"Extends the list and appends the given ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," to it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"begin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"end"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cbegin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cend")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beginning/end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"List")," iterator.")))),(0,r.kt)("h5",{id:"size-3"},"Size"),(0,r.kt)("p",null,"Returns the size of the list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t Size() const\n")),(0,r.kt)("h5",{id:"empty-1"},"Empty"),(0,r.kt)("p",null,"Returns whether the list is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool Empty() const\n")),(0,r.kt)("h5",{id:"append"},"Append"),(0,r.kt)("p",null,"Appends the given ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to the list. The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is copied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Append(const mgp::Value &value)\n")),(0,r.kt)("p",null,"Appends the given ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to the list. Takes ownership of ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," by moving it.\nThe behavior of accessing ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," after performing this operation is undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Append(mgp::Value &&value)\n")),(0,r.kt)("h5",{id:"appendextend"},"AppendExtend"),(0,r.kt)("p",null,"Extends the list and appends the given ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to it. The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is copied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void AppendExtend(const mgp::Value &value)\n")),(0,r.kt)("p",null,"Extends the list and appends the given ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to it. Takes ownership of ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," by moving it.\nThe behavior of accessing ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," after performing this operation is undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void AppendExtend(mgp::Value &&value)\n")),(0,r.kt)("h4",{id:"operators-10"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the value at the given ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!=")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator-5"},"operator[]"),(0,r.kt)("p",null,"Returns the value at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Value operator[](size_t index) const\n")),(0,r.kt)("h3",{id:"map"},"Map"),(0,r.kt)("p",null,"A map of key-value pairs where keys are strings, and values can be of any supported type.\nThe pairs are represented as ",(0,r.kt)("a",{parentName:"p",href:"#MapItem"},"MapItems"),"."),(0,r.kt)("h4",{id:"constructors-19"},"Constructors"),(0,r.kt)("p",null,"Creates a Map from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_map"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Map(mgp_map *ptr)\nexplicit Map(const mgp_map *const_ptr)\n")),(0,r.kt)("p",null,"Creates an empty Map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Map()\n")),(0,r.kt)("p",null,"Creates a Map from the given STL map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Map(const std::map<std::string_view, Value> &items)\nexplicit Map(std::map<std::string_view, Value> &&items)\n")),(0,r.kt)("p",null,"Creates a Map from the given initializer_list (map items correspond to initializer list pairs)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Map(const std::initializer_list<std::pair<std::string_view, Value>> items)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Map(const Map &other)\nMap(Map &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-variables-7"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::List::Iterator")),(0,r.kt)("td",{parentName:"tr",align:null},"Const forward iterator for ",(0,r.kt)("inlineCode",{parentName:"td"},"List")," containers.")))),(0,r.kt)("h4",{id:"member-functions-18"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Size")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the size of the map.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Empty")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the map is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"At")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the value at the given ",(0,r.kt)("inlineCode",{parentName:"td"},"key"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Insert")),(0,r.kt)("td",{parentName:"tr",align:null},"Inserts the given ",(0,r.kt)("inlineCode",{parentName:"td"},"key"),"-",(0,r.kt)("inlineCode",{parentName:"td"},"value")," pair into the map.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"begin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"end"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cbegin"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"cend")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beginning/end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Map")," iterator.")))),(0,r.kt)("h5",{id:"size-4"},"Size"),(0,r.kt)("p",null,"Returns the size of the map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t Size() const\n")),(0,r.kt)("h5",{id:"empty-2"},"Empty"),(0,r.kt)("p",null,"Returns whether the map is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool Empty() const\n")),(0,r.kt)("h5",{id:"at"},"At"),(0,r.kt)("p",null,"Returns the value at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Value const At(std::string_view key) const\n")),(0,r.kt)("h5",{id:"insert-1"},"Insert"),(0,r.kt)("p",null,"Inserts the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),"-",(0,r.kt)("inlineCode",{parentName:"p"},"value")," pair into the map. The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is copied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Insert(std::string_view key, const mgp::Value &value)\n")),(0,r.kt)("p",null,"Inserts the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),"-",(0,r.kt)("inlineCode",{parentName:"p"},"value")," pair into the map. Takes ownership of ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," by moving it.\nThe behavior of accessing ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," after performing this operation is undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Insert(std::string_view key, mgp::Value &&value)\n")),(0,r.kt)("h4",{id:"operators-11"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the value at the given ",(0,r.kt)("inlineCode",{parentName:"td"},"key"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!=")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h5",{id:"operator-6"},"operator[]"),(0,r.kt)("p",null,"Returns the value at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Value operator[](std::string_view key) const\n")),(0,r.kt)("h4",{id:"mapitem"},"MapItem"),(0,r.kt)("p",null,"Auxiliary data structure representing key-value pairs where keys are strings, and values can be of any supported type."),(0,r.kt)("h5",{id:"member-variables-8"},"Member variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"std::string_view")),(0,r.kt)("td",{parentName:"tr",align:null},"Key for accessing the value stored in a ",(0,r.kt)("inlineCode",{parentName:"td"},"MapItem"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mgp::Value")),(0,r.kt)("td",{parentName:"tr",align:null},"The stored value.")))),(0,r.kt)("h5",{id:"operators-12"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator<")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h3",{id:"value"},"Value"),(0,r.kt)("p",null,"Represents a value of any type supported by Memgraph.\nThe data types are described ",(0,r.kt)("a",{parentName:"p",href:"https://memgraph.com/docs/memgraph/reference-guide/data-types"},"here"),"."),(0,r.kt)("h4",{id:"constructors-20"},"Constructors"),(0,r.kt)("p",null,"Creates a Value from the copy of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"mgp_value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Value(mgp_value *ptr)\n")),(0,r.kt)("p",null,"Creates a null Value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Value()\n")),(0,r.kt)("p",null,"Basic type constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Value(const bool value)\nexplicit Value(const int64_t value)\nexplicit Value(const double value)\nexplicit Value(const char *value)\nexplicit Value(const std::string_view value)\n")),(0,r.kt)("p",null,"Container type constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Value(const mgp::List &value)\nexplicit Value(mgp::List &&value)\nexplicit Value(const mgp::Map &value)\nexplicit Value(mgp::Map &&value)\n")),(0,r.kt)("p",null,"Graph element type constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Value(const mgp::Node &value)\nexplicit Value(mgp::Node &&value)\nexplicit Value(const mgp::Relationship &value)\nexplicit Value(mgp::Relationship &&value)\nexplicit Value(const mgp::Path &value)\nexplicit Value(mgp::Path &&value)\n")),(0,r.kt)("p",null,"Temporal type constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"explicit Value(const mgp::Date &value)\nexplicit Value(mgp::Date &&value)\nexplicit Value(const mgp::LocalTime &value)\nexplicit Value(mgp::LocalTime &&value)\nexplicit Value(const mgp::LocalDateTime &value)\nexplicit Value(mgp::LocalDateTime &&value)\nexplicit Value(const mgp::Duration &value)\nexplicit Value(mgp::Duration &&value)\n")),(0,r.kt)("p",null,"Copy and move constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Value(const Value &other)\nValue(Value &&other) noexcept\n")),(0,r.kt)("h4",{id:"member-functions-19"},"Member functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the type of the value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Value[TYPE]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a value of given type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Is[TYPE]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns whether the value is of given type.")))),(0,r.kt)("h5",{id:"type-1"},"Type"),(0,r.kt)("p",null,"Returns the type of the value, i.e. the type stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Value")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"mgp::Type Type() const\n")),(0,r.kt)("h5",{id:"valuetype"},"Value","[TYPE]"),(0,r.kt)("p",null,"Depending on the exact function called, returns a typed value of the appropriate type.\nThrows an exception if the type stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Value")," object is not compatible with the function called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool ValueBool() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t ValueInt() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double ValueDouble const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double ValueNumeric const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string_view ValueString() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::List ValueList() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Map ValueMap() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Node ValueNode() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Relationship ValueRelationship() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Path ValuePath() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Date ValueDate() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::LocalTime ValueLocalTime() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::LocalDateTime ValueLocalDateTime() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const mgp::Map ValueMap() const\n")),(0,r.kt)("h5",{id:"istype"},"Is","[TYPE]"),(0,r.kt)("p",null,"Returns whether the value stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Value")," object is of the type in the call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsNull() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsBool() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsInt() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsDouble() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsNumeric() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsString() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsList() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsMap() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsNode() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsRelationship() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsPath() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsDate() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsLocalTime() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsLocalDateTime() const\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool IsDuration() const\n")),(0,r.kt)("h4",{id:"operators-13"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator=="),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"operator!=")),(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators")))),(0,r.kt)("h3",{id:"type-2"},"Type"),(0,r.kt)("p",null,"Enumerates the data types supported by Memgraph and its C++ API.\nThe types are listed and described ",(0,r.kt)("a",{parentName:"p",href:"https://memgraph.com/docs/memgraph/reference-guide/data-types"},"on this page"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Null")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Bool")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Int")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Double")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::String")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::List")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Map")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Relationship")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Path")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Date")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::LocalTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::LocalDateTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type::Duration"))),(0,r.kt)("h2",{id:"exceptions"},"Exceptions"),(0,r.kt)("p",null,"During operation, the following exceptions may be thrown."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Exception"),(0,r.kt)("th",{parentName:"tr",align:null},"Message"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ValueException")),(0,r.kt)("td",{parentName:"tr",align:null},"various (handles unknown/unexpected types)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotFoundException")),(0,r.kt)("td",{parentName:"tr",align:null},"Node with ID ","[ID]"," not found!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotEnoughMemoryException")),(0,r.kt)("td",{parentName:"tr",align:null},"Not enough memory!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UnknownException")),(0,r.kt)("td",{parentName:"tr",align:null},"Unknown exception!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AllocationException")),(0,r.kt)("td",{parentName:"tr",align:null},"Could not allocate memory!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"InsufficientBufferException")),(0,r.kt)("td",{parentName:"tr",align:null},"Buffer is not sufficient to process procedure!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IndexException")),(0,r.kt)("td",{parentName:"tr",align:null},"Index value out of bounds!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OutOfRangeException")),(0,r.kt)("td",{parentName:"tr",align:null},"Index out of range!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LogicException")),(0,r.kt)("td",{parentName:"tr",align:null},"Logic exception, check the procedure signature!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DeletedObjectException")),(0,r.kt)("td",{parentName:"tr",align:null},"Object is deleted!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"InvalidArgumentException")),(0,r.kt)("td",{parentName:"tr",align:null},"Invalid argument!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"InvalidIDException")),(0,r.kt)("td",{parentName:"tr",align:null},"Invalid ID!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KeyAlreadyExistsException")),(0,r.kt)("td",{parentName:"tr",align:null},"Key you are trying to set already exists!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ImmutableObjectException")),(0,r.kt)("td",{parentName:"tr",align:null},"Object you are trying to change is immutable!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ValueConversionException")),(0,r.kt)("td",{parentName:"tr",align:null},"Error in value conversion!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SerializationException")),(0,r.kt)("td",{parentName:"tr",align:null},"Error in serialization!")))))}s.isMDXComponent=!0}}]);