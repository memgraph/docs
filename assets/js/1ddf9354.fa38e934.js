(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(8),c=(n(0),n(357)),o={id:"distance-calculator",title:"The distance_calculator module",sidebar_label:"distance_calculator"},l={unversionedId:"query-modules/python/distance-calculator",id:"query-modules/python/distance-calculator",isDocsHomePage:!1,title:"The distance_calculator module",description:"single(context, start, end, metrics)",source:"@site/mage/query-modules/python/distance-calculator.md",slug:"/query-modules/python/distance-calculator",permalink:"/mage/query-modules/python/distance-calculator",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/distance-calculator.md",version:"current",sidebar_label:"distance_calculator",sidebar:"mage",previous:{title:"The collapse module",permalink:"/mage/query-modules/python/collapse"},next:{title:"The graph_analyzer module",permalink:"/mage/query-modules/python/graph-analyzer"}},i=[{value:"<code>single(context, start, end, metrics)</code>",id:"singlecontext-start-end-metrics",children:[]},{value:"<code>multiple(context, start_points, end_points, metrics)</code>",id:"multiplecontext-start_points-end_points-metrics",children:[]}],u={toc:i};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"singlecontext-start-end-metrics"},Object(c.b)("inlineCode",{parentName:"h2"},"single(context, start, end, metrics)")),Object(c.b)("p",null,"This distance calculator procedure  for one entry returns 1 field."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"distance")," is the final result obtained by calculating distance (in meters)\nbetween the 2 points who each have its latitude and longitude.")),Object(c.b)("p",null,"The procedure can be invoked in Cypher using the following calls:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cypher"},"CALL distance_calculator.single((:Point {lat:1, lng:2}), (:Point {lat:2, lng:3.5})) \nYIELD distance;\nMATCH (n1:Point), (n2:Point) \nCALL distance_calculator.procedure(n, 1) \nYIELD * \nRETURN *;\n")),Object(c.b)("h2",{id:"multiplecontext-start_points-end_points-metrics"},Object(c.b)("inlineCode",{parentName:"h2"},"multiple(context, start_points, end_points, metrics)")),Object(c.b)("p",null,"This distance calculator procedure  for multiple entries returns 1 field."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"distances")," is the final result obtained by calculating distances (in meters)\nbetween pairs of points who each have its latitude and longitude")),Object(c.b)("p",null,"The procedure can be invoked in openCypher using the following calls:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cypher"},"CALL distance_calculator.multiple([(:Point {lat:1, lng:2})]), [(:Point {lat:3,lng:4.5})])) \nYIELD distances;\n")))}s.isMDXComponent=!0},357:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),s=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,b=p["".concat(o,".").concat(m)]||p[m]||d[m]||c;return n?a.a.createElement(b,l(l({ref:t},u),{},{components:n})):a.a.createElement(b,l({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<c;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);