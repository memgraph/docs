"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21839],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||s;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<s;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},52266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const s={id:"call",title:"CALL clause",sidebar_label:"CALL"},o=void 0,l={unversionedId:"clauses/call",id:"clauses/call",title:"CALL clause",description:"The CALL clause is used to call a subquery inside the existing query.",source:"@site/cypher-manual/clauses/call.md",sourceDirName:"clauses",slug:"/clauses/call",permalink:"/docs/cypher-manual/clauses/call",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/call.md",tags:[],version:"current",frontMatter:{id:"call",title:"CALL clause",sidebar_label:"CALL"},sidebar:"cypher_manual",previous:{title:"Clauses overview",permalink:"/docs/cypher-manual/clauses"},next:{title:"CREATE",permalink:"/docs/cypher-manual/clauses/create"}},i={},u=[{value:"1. Uses of CALL subquery",id:"1-uses-of-call-subquery",level:2},{value:"1.1. Cartesian products",id:"11-cartesian-products",level:3},{value:"1.2. Cartesian products with bounded symbols",id:"12-cartesian-products-with-bounded-symbols",level:3},{value:"1.3. Post-union processing",id:"13-post-union-processing",level:3},{value:"1.4. Observing changes from previous executions",id:"14-observing-changes-from-previous-executions",level:3},{value:"1.5. Unit subqueries",id:"15-unit-subqueries",level:3},{value:"2. Invalid uses of CALL subquery",id:"2-invalid-uses-of-call-subquery",level:2},{value:"2.1. Returning variables with the same name as those in the outer scope",id:"21-returning-variables-with-the-same-name-as-those-in-the-outer-scope",level:3},{value:"2.2. Returning non-aliased expressions",id:"22-returning-non-aliased-expressions",level:3},{value:"2.3. Referencing outer scope variables that don&#39;t exist",id:"23-referencing-outer-scope-variables-that-dont-exist",level:3}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," clause is used to call a subquery inside the existing query."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/mage/usage/calling-procedures"},"MAGE procedures")," are also run with a query with the ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," clause at the beginning.\nSwitch to MAGE documentation if you want to CALL a graph algorithm or some other procedure from the MAGE library.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#1-uses-of-call-subquery"},"Uses of CALL subquery")," ",(0,r.kt)("br",null),"\n1.1. ",(0,r.kt)("a",{parentName:"p",href:"#11-cartesian-products"},"Cartesian products")," ",(0,r.kt)("br",null),"\n1.2. ",(0,r.kt)("a",{parentName:"p",href:"#12-cartesian-products-with-bounded-symbols"},"Cartesian products with bounded symbols")," ",(0,r.kt)("br",null),"\n1.3. ",(0,r.kt)("a",{parentName:"p",href:"#13-post-union-processing"},"Post-union processing")," ",(0,r.kt)("br",null),"\n1.4. ",(0,r.kt)("a",{parentName:"p",href:"#14-observing-changes-from-previous-executions"},"Observing changes from previous executions"),(0,r.kt)("br",null),"\n1.5. ",(0,r.kt)("a",{parentName:"p",href:"#15-unit-subqueries"},"Unit subqueries"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#2-invalid-uses-of-call-subquery"},"Invalid uses of CALL subquery")," ",(0,r.kt)("br",null),"\n2.1. ",(0,r.kt)("a",{parentName:"p",href:"#21-returning-variables-with-same-name-as-those-in-the-outer-scope"},"Returning variables with the same name as those in the outer scope")," ",(0,r.kt)("br",null),"\n2.2. ",(0,r.kt)("a",{parentName:"p",href:"#22-returning-non-aliased-expressions"},"Returning non-aliased expressions")," ",(0,r.kt)("br",null),"\n2.3. ",(0,r.kt)("a",{parentName:"p",href:"#22-referencing-outer-scope-variables-that-dont-exist"},"Referencing outer scope variables that don't exist")," ",(0,r.kt)("br",null)))),(0,r.kt)("h2",{id:"1-uses-of-call-subquery"},"1. Uses of CALL subquery"),(0,r.kt)("h3",{id:"11-cartesian-products"},"1.1. Cartesian products"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," subquery is executed once for each incoming row. If multiple rows are produced from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," subquery, the result is a Cartesian product of results. It is an output combined from 2 branches,\none being called the ",(0,r.kt)("inlineCode",{parentName:"p"},"input branch")," (rows produced before calling the subquery), and the ",(0,r.kt)("inlineCode",{parentName:"p"},"subquery branch"),"\n(rows produced by the subquery).",(0,r.kt)("br",{parentName:"p"}),"\n","Imagine the data includes four ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," nodes, two named ",(0,r.kt)("inlineCode",{parentName:"p"},"John")," and two named ",(0,r.kt)("inlineCode",{parentName:"p"},"Alice"),",\nas well as four ",(0,r.kt)("inlineCode",{parentName:"p"},":Animal")," nodes, two named ",(0,r.kt)("inlineCode",{parentName:"p"},"Rex")," and two named ",(0,r.kt)("inlineCode",{parentName:"p"},"Lassie"),"."),(0,r.kt)("p",null,"Running the following query would produce the output below: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person)\nCALL {\n  MATCH (a:Animal)\n  RETURN a.name as animal_name\n}\nRETURN p.name as person_name, animal_name\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+-------------+-------------+\n| person_name | animal_name |\n+---------------------------+\n| 'John'      | 'Rex'       |\n| 'John'      | 'Lassie'    |\n| 'Alice'     | 'Rex'       |\n| 'Alice'     | 'Lassie'    |\n+---------------------------+\n")),(0,r.kt)("h3",{id:"12-cartesian-products-with-bounded-symbols"},"1.2. Cartesian products with bounded symbols"),(0,r.kt)("p",null,"To reference variables from the outer scope in the subquery, start the subquery with the ",(0,r.kt)("inlineCode",{parentName:"p"},"WITH")," clause.\nIt allows using the same symbols to expand on the neighborhood of the referenced nodes or relationships.\nOtherwise, the subquery will behave as it sees the variable for the first time."),(0,r.kt)("p",null,"In the following query, the WITH clause expanded the meaning of the variable person to the node with the\nlabel ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," matched in the outer scope of the subquery:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (person:Person)\nCALL {\n  WITH person\n  MATCH (person)-[:HAS_PARENT]->(parent:Parent)\n  RETURN parent\n}\nRETURN person.name, parent.name\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+-------------+-------------+\n| person_name | animal_name |\n+---------------------------+\n| 'John'      | 'John Sr.'  |\n| 'John'      | 'Anna'      |\n| 'Alice'     | 'Roxanne'   |\n| 'Alice'     | 'Bill'      |\n+---------------------------+\n")),(0,r.kt)("h3",{id:"13-post-union-processing"},"1.3. Post-union processing"),(0,r.kt)("p",null,"Output from all UNION queries inside a subquery can be combined and\nforwarded as a single output to make the queries more expressive:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL {\n    MATCH (n:Person)\n    RETURN n.name AS name, n.ssn AS ID_number\n        UNION\n    MATCH (n:Company)\n    RETURN n.name AS name, n.corporate_id AS ID_number\n}\nRETURN name, ID_number\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------------+-------------+\n| name       | ID_number   |\n+--------------------------+\n| 'John'     | '123456789' |\n| 'Memgraph' | '555555555' |\n+--------------------------+\n")),(0,r.kt)("h3",{id:"14-observing-changes-from-previous-executions"},"1.4. Observing changes from previous executions"),(0,r.kt)("p",null,"Each execution of a ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," clause can observe changes from previous executions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"UNWIND [0, 1, 2] AS x\nCALL {\n  MATCH (n:Counter)\n    SET n.count = n.count + 1\n  RETURN n.count AS innerCount\n}\nWITH innerCount\nMATCH (n:Counter)\nRETURN\n  innerCount,\n  n.count AS totalCount\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------------+-------------+\n| innerCount | totalCount  |\n+--------------------------+\n| 1          | 3           |\n| 2          | 3           |\n| 3          | 3           |\n+--------------------------+\n")),(0,r.kt)("h3",{id:"15-unit-subqueries"},"1.5. Unit subqueries"),(0,r.kt)("p",null,"Unit subqueries are used to perform a single action for every node from the input branch.\nIf the starting state of the database is that there is only one ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," node in the graph,\nthe following query will clone the node with desired preferences defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"FOREACH")," clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person)\nCALL {\n    FOREACH (i IN range(1, 5) | CREATE(:Person {id: i}))\n}\n\nMATCH (n) RETURN COUNT(n) AS no_created_nodes;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------------------+\n| no_created_nodes |\n+------------------+\n| 6                |\n+------------------+\n")),(0,r.kt)("h2",{id:"2-invalid-uses-of-call-subquery"},"2. Invalid uses of CALL subquery"),(0,r.kt)("h3",{id:"21-returning-variables-with-the-same-name-as-those-in-the-outer-scope"},"2.1. Returning variables with the same name as those in the outer scope"),(0,r.kt)("p",null,"Invalid use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person)\nCALL {\n  MATCH (n:Parent)\n  RETURN n\n}\nRETURN n;\n")),(0,r.kt)("p",null,"The above query results in a semantic exception because the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," has\nalready been used in the outer scope of the query. The query will\nsuccessfully execute by renaming either the outer scope variable or the subquery variable."),(0,r.kt)("p",null,"Valid use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person)\nCALL {\n  MATCH (p:Parent)\n  RETURN p\n}\nRETURN n, p;\n")),(0,r.kt)("h3",{id:"22-returning-non-aliased-expressions"},"2.2. Returning non-aliased expressions"),(0,r.kt)("p",null,"Invalid use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person)\nCALL {\n  WITH n\n  MATCH (n)-[:HAS_PARENT]->(parent:Parent)\n  RETURN parent.age\n}\nRETURN n, parent.age;\n")),(0,r.kt)("p",null,"The above query results in a semantic exception since the expression returned in the\nsubquery has not been aliased and can not be interpreted correctly. By aliasing the\nreturned expression upon exiting the subquery, it can be used in the outer scope. "),(0,r.kt)("p",null,"Valid use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person)\nCALL {\n  WITH n\n  MATCH (n)-[:HAS_PARENT]->(parent:Parent)\n  RETURN parent.age AS parent_age\n}\nRETURN n, parent_age;\n")),(0,r.kt)("h3",{id:"23-referencing-outer-scope-variables-that-dont-exist"},"2.3. Referencing outer scope variables that don't exist"),(0,r.kt)("p",null,"Invalid use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person)\nCALL {\n  WITH o\n  MATCH (o)-[:HAS_CHILD]->(child:Parent)\n  RETURN child\n}\nRETURN DISTINCT n;\n")),(0,r.kt)("p",null,"The above query results in a semantic exception because the variable from the outer scope does not exist.\nQueries can be executed only by referencing variables bounded in the input branch to the subquery.\nBy renaming the variable to the already bounded variable ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", the query will be correctly executed."),(0,r.kt)("p",null,"Valid use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person)\nCALL {\n  WITH n\n  MATCH (n)-[:HAS_CHILD]->(child:Parent)\n  RETURN child\n}\nRETURN DISTINCT n;\n")))}c.isMDXComponent=!0}}]);