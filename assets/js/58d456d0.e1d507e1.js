"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9791],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(t),h=a,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||o;return t?r.createElement(m,l(l({ref:n},d),{},{components:t})):r.createElement(m,l({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},63894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={id:"deleting-nodes-and-relationships",title:"Deleting nodes and relationships",sidebar_label:"Deleting nodes and relationships"},l=void 0,i={unversionedId:"deleting-nodes-and-relationships",id:"deleting-nodes-and-relationships",title:"Deleting nodes and relationships",description:"DELETE",source:"@site/cypher-manual/deleting-nodes-and-relationships.md",sourceDirName:".",slug:"/deleting-nodes-and-relationships",permalink:"/docs/cypher-manual/deleting-nodes-and-relationships",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/deleting-nodes-and-relationships.md",tags:[],version:"current",frontMatter:{id:"deleting-nodes-and-relationships",title:"Deleting nodes and relationships",sidebar_label:"Deleting nodes and relationships"},sidebar:"cypher_manual",previous:{title:"Updating nodes and relationships",permalink:"/docs/cypher-manual/updating-nodes-and-relationships"},next:{title:"Clauses overview",permalink:"/docs/cypher-manual/clauses"}},s={},p=[{value:"DELETE",id:"delete",level:2},{value:"REMOVE",id:"remove",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"delete"},"DELETE"),(0,a.kt)("p",null,"This clause is used to delete nodes and relationships from the database."),(0,a.kt)("p",null,"For example, removing all relationships of a single type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH ()-[relationship :type]-() DELETE relationship;\n")),(0,a.kt)("p",null,"When testing the database, you often want to have a clean start by deleting\nevery node and relationship in the database. It is reasonable that deleting each node\nshould delete all relationships coming into or out of that node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) DELETE node;\n")),(0,a.kt)("p",null,"But, Cypher prevents accidental deletion of relationships. Therefore, the above\nquery will report an error. Instead, you need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"DETACH")," keyword, which\nwill remove relationships from a node you are deleting. The following should work and\n",(0,a.kt)("em",{parentName:"p"},"delete everything")," in the database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) DETACH DELETE node;\n")),(0,a.kt)("p",null,"More examples are available ",(0,a.kt)("a",{parentName:"p",href:"/docs/cypher-manual/clauses/delete"},"here"),"."),(0,a.kt)("h2",{id:"remove"},"REMOVE"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"REMOVE")," clause is used to remove labels and properties from nodes and\nrelationships:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:WrongLabel) REMOVE n:WrongLabel, n.property;\n")))}c.isMDXComponent=!0}}]);