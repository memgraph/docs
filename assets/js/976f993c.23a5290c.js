"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77519],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=m(a),k=r,u=c["".concat(o,".").concat(k)]||c[k]||s[k]||l;return a?n.createElement(u,i(i({ref:t},d),{},{components:a})):n.createElement(u,i({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},22387:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const l={id:"data-types",title:"Data types",sidebar_label:"Data types"},i=void 0,p={unversionedId:"reference-guide/data-types",id:"version-2.2.1/reference-guide/data-types",title:"Data types",description:"Since Memgraph is a graph database management system, data is stored in the form",source:"@site/memgraph_versioned_docs/version-2.2.1/reference-guide/data-types.md",sourceDirName:"reference-guide",slug:"/reference-guide/data-types",permalink:"/docs/memgraph/2.2.1/reference-guide/data-types",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.2.1/reference-guide/data-types.md",tags:[],version:"2.2.1",frontMatter:{id:"data-types",title:"Data types",sidebar_label:"Data types"},sidebar:"memgraph",previous:{title:"Configuration settings",permalink:"/docs/memgraph/2.2.1/reference-guide/configuration"},next:{title:"Import data overview",permalink:"/docs/memgraph/2.2.1/reference-guide/import-data/overview"}},o={},m=[{value:"Node labels &amp; relationship types",id:"node-labels--relationship-types",level:2},{value:"Property types",id:"property-types",level:2},{value:"Temporal types",id:"temporal-types",level:2},{value:"Duration",id:"duration",level:3},{value:"Date",id:"date",level:3},{value:"LocalTime",id:"localtime",level:3},{value:"LocalDateTime",id:"localdatetime",level:3},{value:"Temporal types arithmetic",id:"temporal-types-arithmetic",level:2},{value:"Procedures API",id:"procedures-api",level:2}],d={toc:m};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Since Memgraph is a graph database management system, data is stored in the form\nof graph elements: nodes and relationships. Each graph element can contain\nvarious types of data. This page describes which data types are supported in\nMemgraph."),(0,r.kt)("h2",{id:"node-labels--relationship-types"},"Node labels & relationship types"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nodes")," can have labels that are used to label or group nodes. A label is of\nthe type ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", and each node can have none or multiple labels. Labels can be\nchanged at any time."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Relationships")," have a type, also represented in the form of a ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),".\nUnlike nodes, relationships must have exactly one relationship type and once it\nis set upon creation, it can never be modified again."),(0,r.kt)("h2",{id:"property-types"},"Property types"),(0,r.kt)("p",null,"Nodes and relationships can store various properties. Properties are similar to\nmappings or tables containing property names and their accompanying values.\nProperty names are represented as text, while values can be of different types."),(0,r.kt)("p",null,"Each property can store a single value, and it is not possible to have multiple\nproperties with the same name on a single graph element. But, the same property\nnames can be found across multiple graph elements."),(0,r.kt)("p",null,"Also, there are no restrictions on the number of properties that can be stored\nin a single graph element. The only restriction is that the values must be of\nthe supported types. Below is a table of supported data types."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Null")),(0,r.kt)("td",{parentName:"tr",align:null},"Property has no value, which is the same as if the property doesn't exist.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"A character string (text).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"A boolean value, either ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"An integer number.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Float")),(0,r.kt)("td",{parentName:"tr",align:null},"A floating-point number (real number).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"List")),(0,r.kt)("td",{parentName:"tr",align:null},"A list containing any number of property values of any supported type under a single property name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Map")),(0,r.kt)("td",{parentName:"tr",align:null},"A mapping of string keys to values of any supported type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#duration"},(0,r.kt)("inlineCode",{parentName:"a"},"Duration"))),(0,r.kt)("td",{parentName:"tr",align:null},"A period of time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#date"},(0,r.kt)("inlineCode",{parentName:"a"},"Date"))),(0,r.kt)("td",{parentName:"tr",align:null},"A date with year, month, and day.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#localtime"},(0,r.kt)("inlineCode",{parentName:"a"},"LocalTime"))),(0,r.kt)("td",{parentName:"tr",align:null},"Time without the time zone.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#localdatetime"},(0,r.kt)("inlineCode",{parentName:"a"},"LocalDateTime"))),(0,r.kt)("td",{parentName:"tr",align:null},"Date and time without the time zone.")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you want to modify ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," property values, you need to replace them\nentirely."),(0,r.kt)("p",{parentName:"admonition"},"The following queries are valid:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (:Node {property: [1, 2, 3]});\nCREATE (:Node {property: {key: "value"}});\n')),(0,r.kt)("p",{parentName:"admonition"},"But these are not:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n:Node) SET n.property[0] = 0;\nMATCH (n:Node) SET n.property.key = "other value";\n'))),(0,r.kt)("h2",{id:"temporal-types"},"Temporal types"),(0,r.kt)("h3",{id:"duration"},"Duration"),(0,r.kt)("p",null,"You can create a property of temporal type ",(0,r.kt)("inlineCode",{parentName:"p"},"Duration")," from a string or a map by\ncalling the function ",(0,r.kt)("inlineCode",{parentName:"p"},"duration"),"."),(0,r.kt)("p",null,"For strings, the duration format is: ",(0,r.kt)("inlineCode",{parentName:"p"},"P[nD]T[nH][nM][nS]")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," stands for\na number, and the capital letters are used as a separator with each field in ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),"\nmarked optional. For strings, Memgraph only allows the last field to be a\ndouble, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"P2DT2.5H"),". However, for maps, every field can be a double, an int\nor a mixture of both. Memgraph also supports negative durations."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"D"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Days")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"H"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Hours")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"M"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Minutes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"S"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Seconds")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (:F1Laps {lap: duration("PT2M2.33S")});\n')),(0,r.kt)("p",null,"Maps can contain the following six fields: ",(0,r.kt)("inlineCode",{parentName:"p"},"day"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hour"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"minute"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:F1Laps {lap: duration({minute:2, second:2, microsecond:33})});\n")),(0,r.kt)("p",null,"At this point, it must be pointed out that durations internally hold\nmicroseconds. Each of the fields specified above is first converted to\nmicroseconds and then reduced by addition to a single value. This has an\ninteresting use case:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:F1Laps {lap: duration({minute:2, second:-2, microsecond:-33})});\n")),(0,r.kt)("p",null,"This converts ",(0,r.kt)("inlineCode",{parentName:"p"},"minutes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"seconds")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"microseconds")," and effectively produces\nthe following equation: ",(0,r.kt)("inlineCode",{parentName:"p"},"minutes - seconds - microseconds"),"."),(0,r.kt)("p",null,"Each of the individual fields of a duration can be accessed through its\nproperties as follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"day"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Converts all the microseconds back to days and returns the value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"hour"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subtracts days and returns the leftover value as hours.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"minute"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subtracts the days and returns the leftover value as minutes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"second"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subtracts the days and returns the leftover value as seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"millisecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subtracts the days and returns the leftover value as milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"microsecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subtracts the days and returns the leftover value as microseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"nanosecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subtracts the days and returns the leftover value as nanoseconds.")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:F1Laps {lap: duration({day:1, hour: 2, minute:3, second:4})});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (f:F1Laps) RETURN f.lap.day;\n// Result\n>> 1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (f:F1Laps) RETURN f.lap.hour;\n// Result\n>> 2\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (f:F1Laps) RETURN f.lap.minute;\n// Result\n>> 123 // The value without days is 2 hours and 3  minutes, that is 123 minutes\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (f:F1Laps) RETURN f.lap.second;\n// Result\n>> 7384 // The value without days is 2 hours, 3 minutes and 4 seconds, that is 7384 minutes\n")),(0,r.kt)("h3",{id:"date"},"Date"),(0,r.kt)("p",null,"You can create a property of temporal type ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," from a string or map by\ncalling the function ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),". For strings, the date format is specified by the\nISO 8601: ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDD")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Year")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"M"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Month")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"D"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Day")))),(0,r.kt)("p",null,"The smallest year is ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and the highest is ",(0,r.kt)("inlineCode",{parentName:"p"},"9999"),"."),(0,r.kt)("p",null,"You can call ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," without arguments. This effectively sets the date field to\nthe current date of the calendar (UTC clock)."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (:Person {birthday: date("1947-07-30")});\n')),(0,r.kt)("p",null,"For maps, three fields are available: ",(0,r.kt)("inlineCode",{parentName:"p"},"year"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"month"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"day"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:Person {birthday: date({year:1947, month:7, day:30})});\n")),(0,r.kt)("p",null,"You can access the individual fields of a date through its properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"year"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the year field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"month"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the month field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"day"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the day field")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (b:Person) RETURN b.birthday.year;\n")),(0,r.kt)("h3",{id:"localtime"},"LocalTime"),(0,r.kt)("p",null,"You can create a property of temporal type ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalTime")," from a string or map by\ncalling the function ",(0,r.kt)("inlineCode",{parentName:"p"},"localTime"),". For strings, the local time format is\nspecified by the ISO 8601: ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hh:mm:ss")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hh:mm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hhmmss")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hhmm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[T]hh"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"h"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Hours")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"m"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Minutes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"s"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Seconds")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"seconds")," can be defined as decimal fractions with up to 6 digits. The first 3\ndigits represent milliseconds, and the last 3 digits microseconds. For example,\nthe string ",(0,r.kt)("inlineCode",{parentName:"p"},"T22:10:32.300600")," specifies ",(0,r.kt)("inlineCode",{parentName:"p"},"300")," milliseconds and ",(0,r.kt)("inlineCode",{parentName:"p"},"600"),"\nmicroseconds."),(0,r.kt)("p",null,"You can call ",(0,r.kt)("inlineCode",{parentName:"p"},"localTime")," without arguments. This effectively sets the time field\nto the current time of the calendar (UTC clock)."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (:School {Calculus: localTime("09:15:00")});\n')),(0,r.kt)("p",null,"For maps, there are 5 fields available: ",(0,r.kt)("inlineCode",{parentName:"p"},"hour"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"minute"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:School {Calculus: localTime({hour:9, minute:15})});\n")),(0,r.kt)("p",null,"You can access the individual fields of a LocalTime through its properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"hour"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the hour field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"minute"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the minute field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"second"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the second field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"millisecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the millisecond field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"microsecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the microsecond field")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (s:School) RETURN s.Calculus.hour;\n")),(0,r.kt)("h3",{id:"localdatetime"},"LocalDateTime"),(0,r.kt)("p",null,"You can create a property of temporal type ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDateTime")," from a string or map\nby calling the function ",(0,r.kt)("inlineCode",{parentName:"p"},"localDateTime"),". For strings, the local time format is\nspecified by the ISO 8601: ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDThh:mm:ss")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDThh:mm")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDDThhmmss")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDDThhmm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"YYYYMMDDThh"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Year")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"M"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Month")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"D"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Day")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"h"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Hours")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"m"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Minutes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"s"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Seconds")))),(0,r.kt)("p",null,"You can call ",(0,r.kt)("inlineCode",{parentName:"p"},"localDateTime")," without arguments. This effectively sets the date\nand time fields to the current date and time of the calendar (UTC clock).\nExample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (:Flights {AIR123: localDateTime("2021-10-05T14:15:00")});\n')),(0,r.kt)("p",null,"For maps the following fields are available: ",(0,r.kt)("inlineCode",{parentName:"p"},"year"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"month"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"day"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hour"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"minute"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"millisecond")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"microsecond"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (:Flights {AIR123: localDateTime(year:2021, month:10, day:5, hour:14, minute:15)});\n")),(0,r.kt)("p",null,"You can access the individual fields of LocalDateTime through its properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"year"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the year field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"month"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the month field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"day"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the day field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"hour"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the hour field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"minute"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the minute field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"second"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the second field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"millisecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the millisecond field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"microsecond"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the microsecond field")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (f:Flights) RETURN f.AIR123.year;\n")),(0,r.kt)("h2",{id:"temporal-types-arithmetic"},"Temporal types arithmetic"),(0,r.kt)("p",null,"Temporal types ",(0,r.kt)("inlineCode",{parentName:"p"},"Duration"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalTime")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDateTime")," support\nnative arithmetic, and the operations are summarized in the following table:"),(0,r.kt)("p",null,"Duration operations:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"op"),(0,r.kt)("th",{parentName:"tr",align:"center"},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration + Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration - Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"- Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration")))),(0,r.kt)("p",null,"Date operations:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"op"),(0,r.kt)("th",{parentName:"tr",align:"center"},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Date + Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Date")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration + Date"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Date")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Date - Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Date")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Date - Date"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration")))),(0,r.kt)("p",null,"LocalTime operations:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"op"),(0,r.kt)("th",{parentName:"tr",align:"center"},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalTime + Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalTime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration + LocalTime"),(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalTime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalTime - Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalTime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalTime - LocalTime"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration")))),(0,r.kt)("p",null,"LocalDateTime operations:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"operation"),(0,r.kt)("th",{parentName:"tr",align:"center"},"result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalDateTime + Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalDateTime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration + LocalTateTime"),(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalDateTime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalDateTime - Duration"),(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalDateTime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"LocalDateTime - LocalDateTime"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Duration")))),(0,r.kt)("h2",{id:"procedures-api"},"Procedures API"),(0,r.kt)("p",null,"Data types are also used within query modules. Check out the documentation for\nthe ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.2.1/reference-guide/query-modules/api/python-api"},"Python\nAPI"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.2.1/reference-guide/query-modules/api/c-api"},"C\nAPI"),"."))}s.isMDXComponent=!0}}]);