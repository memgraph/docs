"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64691],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,h=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79014:function(e,t,n){n.r(t),n.d(t,{Highlight:function(){return h},assets:function(){return m},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return c}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=n(9877),i=n(58215),p=["components"],u={id:"import-util",title:"import_util",sidebar_label:"import_util"},s=void 0,d={unversionedId:"query-modules/python/import-util",id:"query-modules/python/import-util",title:"import_util",description:"docs-source",source:"@site/mage/query-modules/python/import-util.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/import-util",permalink:"/docs/mage/query-modules/python/import-util",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/import-util.md",tags:[],version:"current",frontMatter:{id:"import-util",title:"import_util",sidebar_label:"import_util"},sidebar:"mage",previous:{title:"graph_coloring",permalink:"/docs/mage/query-modules/python/graph-coloring"},next:{title:"json_util",permalink:"/docs/mage/query-modules/python/json-util"}},m={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>json(path)</code>",id:"jsonpath",level:3},{value:"Input:",id:"input",level:4},{value:"Usage:",id:"usage",level:4},{value:"Example - Importing JSON file to create a database",id:"example---importing-json-file-to-create-a-database",level:2}],h=function(e){var t=e.children,n=e.color;return(0,o.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},f={toc:c,Highlight:h};function k(e){var t=e.components,u=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},f,u,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/import_util.py"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-import_util-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,o.kt)("h2",{id:"abstract"},"Abstract"),(0,o.kt)("p",null,"Module for importing data from different formats. Currently, this module\nsupports only the import of JSON file format."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Trait"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Module type")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(h,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"util")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Implementation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(h,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"Python")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Parallelism")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(h,{color:"#FB6E00",mdxType:"Highlight"},(0,o.kt)("strong",{parentName:"td"},"sequential")))))),(0,o.kt)("h2",{id:"procedures"},"Procedures"),(0,o.kt)("h3",{id:"jsonpath"},(0,o.kt)("inlineCode",{parentName:"h3"},"json(path)")),(0,o.kt)("h4",{id:"input"},"Input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path: str")," \u27a1 Path to the JSON file that is being imported.")),(0,o.kt)("h4",{id:"usage"},"Usage:"),(0,o.kt)("p",null,"The JSON file you're importing needs to be structured the same as the JSON file\nthat the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/mage/query-modules/python/export-util"},(0,o.kt)("inlineCode",{parentName:"a"},"export_util.json()")),"\nprocedure generates. The generated JSON file is a list of objects representing\nnodes or relationships. If the object is node, then it looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 4000,\n    "labels": [\n        "City"\n    ],\n    "properties": {\n        "id": 0,\n        "name": "Amsterdam",\n    },\n    "type": "node"\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," key has the value of the Memgraph's internal node ide. The ",(0,o.kt)("inlineCode",{parentName:"p"},"labels")," key\nholds the information about node labels in a list. The ",(0,o.kt)("inlineCode",{parentName:"p"},"properties")," are\nkey-value pairs representing properties of the certain node. Each node needs to\nhave the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},'"node"'),"."),(0,o.kt)("p",null,"On the other hand, if the object is a relationship, then it is structured like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "end": 4052,\n    "id": 7175,\n    "label": "CloseTo",\n    "properties": {\n        "eu_border": true\n    },\n    "start": 4035,\n    "type": "relationship"\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"end")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"start")," keys hold the information about the internal ids of start\nand end node of the relationship. Each relationship also has it's internal id\nexported as a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," key. A relationship can only have one label which is\nexported to the ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," key. Properties are again key-value pairs, and the value\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," needs to be set to ",(0,o.kt)("inlineCode",{parentName:"p"},'"relationship"'),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"path")," you have to provide as procedure argument depends on how you started\nMemgraph."),(0,o.kt)(l.Z,{groupId:"import_to_json_usage",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"docker",mdxType:"TabItem"},(0,o.kt)("p",null,"If you ran Memgraph with Docker, you need to save the JSON file inside the\nDocker container. We recommend saving the JSON file inside the\n",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory."),(0,o.kt)("p",null,"You can call the procedure by running the following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL export_util.json(path);\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"path")," is the path to the JSON file inside the\n",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory in the running Docker container (e.g.,\n",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules/import.json"),")."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can copy the JSON file to the running Docker container with the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/cp/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker cp"))," command: "),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"docker cp /path_to_local_folder/import.json <container_id>:/usr/lib/memgraph/query_modules/import.json\n"))))),(0,o.kt)(i.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("p",null,"To import a local JSON file call the procedure by running the following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL export_util.json(path);\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"path")," is the path to a local JSON file that will be created inside the\n",(0,o.kt)("inlineCode",{parentName:"p"},"import_folder")," (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"/users/my_user/import_folder/export.json"),")."))),(0,o.kt)("h2",{id:"example---importing-json-file-to-create-a-database"},"Example - Importing JSON file to create a database"),(0,o.kt)(l.Z,{groupId:"import_json_example",defaultValue:"input",values:[{label:"Step 1: Input file",value:"input"},{label:"Step 2: Running command",value:"run"},{label:"Step 3: Created database",value:"result"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"input",mdxType:"TabItem"},(0,o.kt)("p",null,"Below is the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"import.json")," file. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you're using ",(0,o.kt)("strong",{parentName:"p"},"Memgraph with Docker"),", then you have to save the\n",(0,o.kt)("inlineCode",{parentName:"p"},"import.json")," file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory inside\nthe running Docker container. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you're using ",(0,o.kt)("strong",{parentName:"p"},"Memgraph on Ubuntu, Debian, RPM package or WSL"),", then you\nhave to save the ",(0,o.kt)("inlineCode",{parentName:"p"},"import.json")," file in the local\n",(0,o.kt)("inlineCode",{parentName:"p"},"/users/my_user/import_folder")," directory."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id": 6114,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "Anna"\n        },\n        "type": "node"\n    },\n    {\n        "id": 6115,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "John"\n        },\n        "type": "node"\n    },\n    {\n        "id": 6116,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "Kim"\n        },\n        "type": "node"\n    },\n    {\n        "end": 6115,\n        "id": 21120,\n        "label": "IS_FRIENDS_WITH",\n        "properties": {},\n        "start": 6114,\n        "type": "relationship"\n    },\n    {\n        "end": 6116,\n        "id": 21121,\n        "label": "IS_FRIENDS_WITH",\n        "properties": {},\n        "start": 6114,\n        "type": "relationship"\n    },\n    {\n        "end": 6116,\n        "id": 21122,\n        "label": "IS_MARRIED_TO",\n        "properties": {},\n        "start": 6115,\n        "type": "relationship"\n    }\n]\n\n'))),(0,o.kt)(i.Z,{value:"run",mdxType:"TabItem"},(0,o.kt)("p",null,"If you're using ",(0,o.kt)("strong",{parentName:"p"},"Memgraph with Docker"),", then the following Cypher query will\ncreate a graph database from the provided JSON file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL import_util.json("/usr/lib/memgraph/query_modules/import.json");\n')),(0,o.kt)("p",null,"If you're using ",(0,o.kt)("strong",{parentName:"p"},"Memgraph on Ubuntu, Debian, RPM package or WSL"),", then the\nfollowing Cypher query will create a graph database from the provided JSON file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL import_util.json("/users/my_user/import_folder/import.json");\n'))),(0,o.kt)(i.Z,{value:"result",mdxType:"TabItem"},(0,o.kt)("p",null,"After you import the ",(0,o.kt)("inlineCode",{parentName:"p"},"import.json")," file, you get the following graph database:"),(0,o.kt)("img",{src:n(6851).Z}))))}k.isMDXComponent=!0},58215:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(67294);function a(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return s}});var r=n(87462),a=n(67294),o=n(72389),l=n(5979),i=n(86010),p="tabItem_LplD";function u(e){var t,n,o,u=e.lazy,s=e.block,d=e.defaultValue,m=e.values,c=e.groupId,h=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,l.lx)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===d?d:null!=(t=null!=d?d:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==y&&!k.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.UB)(),v=b.tabGroupChoices,N=b.setTabGroupChoices,C=(0,a.useState)(y),w=C[0],T=C[1],_=[],j=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var O=v[c];null!=O&&O!==w&&k.some((function(e){return e.value===O}))&&T(O)}var x=function(e){var t=e.currentTarget,n=_.indexOf(t),r=k[n].value;r!==w&&(j(t),T(r),null!=c&&N(c,r))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=_.indexOf(e.currentTarget)+1;n=_[r]||_[0];break;case"ArrowLeft":var a=_.indexOf(e.currentTarget)-1;n=_[a]||_[_.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},h)},k.map((function(e){var t=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return _.push(e)},onKeyDown:E,onFocus:x,onClick:x},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),u?(0,a.cloneElement)(f.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function s(e){var t=(0,o.Z)();return a.createElement(u,(0,r.Z)({key:String(t)},e))}},6851:function(e,t,n){t.Z=n.p+"assets/images/import-util-1-6f272764c2ffb63fae58905c1dded702.png"}}]);