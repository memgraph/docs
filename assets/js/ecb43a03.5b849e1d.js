"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57672],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>c});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=m(r),c=a,f=u["".concat(s,".").concat(c)]||u[c]||p[c]||o;return r?n.createElement(f,l(l({ref:t},d),{},{components:r})):n.createElement(f,l({ref:t},d))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var m=2;m<o;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},41095:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=r(87462),a=(r(67294),r(3905));const o={id:"overview",title:"Transformation modules",sidebar_label:"Transformation modules overview",slug:"/reference-guide/streams/transformation-modules"},l=void 0,i={unversionedId:"reference-guide/streams/transformation-modules/overview",id:"version-2.1.0/reference-guide/streams/transformation-modules/overview",title:"Transformation modules",description:"In order to create a transformation module, you need to:",source:"@site/memgraph_versioned_docs/version-2.1.0/reference-guide/streams/transformation-modules/overview.md",sourceDirName:"reference-guide/streams/transformation-modules",slug:"/reference-guide/streams/transformation-modules",permalink:"/docs/memgraph/2.1.0/reference-guide/streams/transformation-modules",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/reference-guide/streams/transformation-modules/overview.md",tags:[],version:"2.1.0",frontMatter:{id:"overview",title:"Transformation modules",sidebar_label:"Transformation modules overview",slug:"/reference-guide/streams/transformation-modules"},sidebar:"version-2.1.0/memgraph",previous:{title:"Streams overview",permalink:"/docs/memgraph/2.1.0/reference-guide/streams"},next:{title:"C API",permalink:"/docs/memgraph/2.1.0/reference-guide/streams/transformation-modules/api/c-api"}},s={},m=[{value:"Loading modules on startup",id:"loading-modules-on-startup",level:2},{value:"Utility procedures for transformations",id:"utility-procedures-for-transformations",level:2}],d={toc:m};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to create a transformation module, you need to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a ",(0,a.kt)("a",{parentName:"li",href:"/docs/memgraph/2.1.0/reference-guide/streams/transformation-modules/api/python-api"},"Python")," or a ",(0,a.kt)("a",{parentName:"li",href:"/docs/memgraph/2.1.0/reference-guide/streams/transformation-modules/api/c-api"},"shared library")," file (module)"),(0,a.kt)("li",{parentName:"ol"},"Save it into the Memgraph's ",(0,a.kt)("inlineCode",{parentName:"li"},"query-modules")," directory (default: ",(0,a.kt)("inlineCode",{parentName:"li"},"/usr/lib/memgraph/query_modules"),")"),(0,a.kt)("li",{parentName:"ol"},"Load it into Memgraph either on startup (automatically) or by running a ",(0,a.kt)("inlineCode",{parentName:"li"},"CALL mg.load")," query")),(0,a.kt)("p",null,"Memgraph supports user-defined transformations in ",(0,a.kt)("strong",{parentName:"p"},"C")," and ",(0,a.kt)("strong",{parentName:"p"},"Python"),"\nthat act on data received from a streaming engine. These transformations\nare grouped into modules called ",(0,a.kt)("strong",{parentName:"p"},"Transformation modules")," which can then\nbe loaded on startup or later on. A module consists of a transformation, a\nquery procedure, or both."),(0,a.kt)("p",null,"This section introduces transformation modules and their similarities\nwith query modules. Currently, we only support transformations for\nKafka streams, but we are aiming to add support for other\nstreaming engines as well."),(0,a.kt)("p",null,"The available API references are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/docs/memgraph/2.1.0/reference-guide/streams/transformation-modules/api/c-api"},"C API"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/docs/memgraph/2.1.0/reference-guide/streams/transformation-modules/api/python-api"},"Python API")))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can check out\n",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/database-functionalities/streams/kafka/implement-transformation-module"},"this"),"\nor\n",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/database-functionalities/streams/pulsar/implement-transformation-module"},"this"),"\nto learn how a typical transformation module can be implemented.")),(0,a.kt)("h2",{id:"loading-modules-on-startup"},"Loading modules on startup"),(0,a.kt)("p",null,"Memgraph attempts to load the modules from all ",(0,a.kt)("inlineCode",{parentName:"p"},"*.so")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"*.py"),"\nfiles it finds in the default (",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules"),") directory.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"*.so")," modules are written using the C API and the ",(0,a.kt)("inlineCode",{parentName:"p"},"*.py")," modules are\nwritten using the Python API. Each file corresponds to one module. Names\nof these files will be mapped to module names.  For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"hello.so"),"\nwill be mapped to the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," module and a ",(0,a.kt)("inlineCode",{parentName:"p"},"py_hello.py")," script\nwill be mapped to the ",(0,a.kt)("inlineCode",{parentName:"p"},"py_hello")," module."),(0,a.kt)("p",null,"If you want to change the directory in which Memgraph searches for\ntransformation modules, just change or extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"--query-modules-directory"),"\nflag in the main configuration file (",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply\nit as a command-line parameter (e.g., when using Docker)."),(0,a.kt)("h2",{id:"utility-procedures-for-transformations"},"Utility procedures for transformations"),(0,a.kt)("p",null,"Query procedures that allow the users to gain more insight into other modules and\ntransformations are written under our utility ",(0,a.kt)("inlineCode",{parentName:"p"},"mg")," query module.\nFor transformations, this module offers:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"procedure"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"mg.transformations() :: (name :: STRING)")),(0,a.kt)("td",{parentName:"tr",align:null},"Lists all transformations procedures.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"mg.load(module_name :: STRING) :: ()")),(0,a.kt)("td",{parentName:"tr",align:null},"Loads or reloads the given module.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"mg.load_all() :: ()")),(0,a.kt)("td",{parentName:"tr",align:null},"Loads or reloads all modules.")))),(0,a.kt)("p",null,"For example, you can invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"mg.transformations()")," from mgconsole or Memgraph Lab with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.transformations() YIELD *;\n")),(0,a.kt)("p",null,"This will yield the following result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------+\n| name                |\n+---------------------+\n| ...                 |\n| batch.transform     |\n| ...                 |\n+---------------------+\n")),(0,a.kt)("p",null,"In this case, we can see that Memgraph has already loaded the user-defined transformation\nof the module ",(0,a.kt)("inlineCode",{parentName:"p"},"batch"),"."),(0,a.kt)("p",null,"To load a module (named e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"hello"),") that wasn't loaded on startup (perhaps\nbecause it was added to Memgraph's query modules directory afterward), we\ncan simply invoke:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("hello");\n')),(0,a.kt)("p",null,"If we wish to reload an existing module, say the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," module above, we\nagain use the same procedure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("hello");\n')),(0,a.kt)("p",null,"Lastly, if we wish to reload all existing modules and load any newly added ones,\nwe can use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load_all();\n")))}p.isMDXComponent=!0}}]);