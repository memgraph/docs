"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70767],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return y}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=p(r),y=o,m=f["".concat(c,".").concat(y)]||f[y]||s[y]||l;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},32795:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return f}});var n=r(87462),o=r(63366),l=(r(67294),r(3905)),i=["components"],a={sidebar_label:"utilities",title:"gqlalchemy.utilities"},c=void 0,p={unversionedId:"reference/utilities",id:"reference/utilities",title:"gqlalchemy.utilities",description:"to\\cypher\\value",source:"@site/gqlalchemy/reference/utilities.md",sourceDirName:"reference",slug:"/reference/utilities",permalink:"/docs/gqlalchemy/reference/utilities",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/utilities.md",tags:[],version:"current",frontMatter:{sidebar_label:"utilities",title:"gqlalchemy.utilities"},sidebar:"gqlalchemy",previous:{title:"transformations",permalink:"/docs/gqlalchemy/reference/transformations"},next:{title:"Changelog",permalink:"/docs/gqlalchemy/changelog"}},u=[{value:"to_cypher_value",id:"to_cypher_value",children:[],level:4},{value:"to_cypher_properties",id:"to_cypher_properties",children:[],level:4},{value:"to_cypher_labels",id:"to_cypher_labels",children:[],level:4}],s={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"to_cypher_value"},"to","_","cypher","_","value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_value(value: Any, config: NetworkXCypherConfig = None) -> str\n")),(0,l.kt)("p",null,"Converts value to a valid Cypher type."),(0,l.kt)("h4",{id:"to_cypher_properties"},"to","_","cypher","_","properties"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_properties(properties: Optional[Dict[str, Any]] = None, config=None) -> str\n")),(0,l.kt)("p",null,"Converts properties to a Cypher key-value properties."),(0,l.kt)("h4",{id:"to_cypher_labels"},"to","_","cypher","_","labels"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_labels(labels: Union[str, List[str], None]) -> str\n")),(0,l.kt)("p",null,"Converts labels to a Cypher label definition."))}f.isMDXComponent=!0}}]);