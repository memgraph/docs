"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[40542],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),u=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(a),m=r,g=c["".concat(d,".").concat(m)]||c[m]||p[m]||l;return a?n.createElement(g,i(i({ref:t},s),{},{components:a})):n.createElement(g,i({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},91662:function(e,t,a){a.r(t),a.d(t,{Highlight:function(){return g},assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=a(9877),o=a(58215),d=["components"],u={id:"katz-centrality-online",title:"katz_centrality_online",sidebar_label:"katz_centrality_online"},s=void 0,p={unversionedId:"query-modules/cpp/katz-centrality-online",id:"query-modules/cpp/katz-centrality-online",title:"katz_centrality_online",description:"docs-source",source:"@site/mage/query-modules/cpp/katz-centrality-online.md",sourceDirName:"query-modules/cpp",slug:"/query-modules/cpp/katz-centrality-online",permalink:"/docs/mage/query-modules/cpp/katz-centrality-online",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/cpp/katz-centrality-online.md",tags:[],version:"current",frontMatter:{id:"katz-centrality-online",title:"katz_centrality_online",sidebar_label:"katz_centrality_online"},sidebar:"mage",previous:{title:"katz_centrality",permalink:"/docs/mage/query-modules/cpp/katz-centrality"},next:{title:"max_flow",permalink:"/docs/mage/query-modules/python/max-flow"}},c={},m=[{value:"Abstract",id:"abstract",level:2},{value:"Usage",id:"usage",level:3},{value:"Procedures",id:"procedures",level:2},{value:"<code>set(alpha, epsilon)</code>",id:"setalpha-epsilon",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage-1",level:4},{value:"<code>get()</code>",id:"get",level:3},{value:"Output:",id:"output-1",level:4},{value:"Usage:",id:"usage-2",level:4},{value:"<code>update(created_vertices, created_edges, deleted_vertices, deleted_edges)</code>",id:"updatecreated_vertices-created_edges-deleted_vertices-deleted_edges",level:3},{value:"Input:",id:"input-1",level:4},{value:"Output:",id:"output-2",level:4},{value:"Usage:",id:"usage-3",level:4},{value:"Example",id:"example",level:2}],g=function(e){var t=e.children,a=e.color;return(0,l.kt)("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},k={toc:m,Highlight:g};function h(e){var t=e.components,u=(0,r.Z)(e,d);return(0,l.kt)("wrapper",(0,n.Z)({},k,u,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/cpp/katz_centrality_module/katz_centrality_online_module.cpp"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-katz_centrality_online-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,l.kt)("h2",{id:"abstract"},"Abstract"),(0,l.kt)("p",null,"Because of its simplicity, ",(0,l.kt)("strong",{parentName:"p"},"Katz Centrality")," has become one of the most\nestablished centrality measurements. The definition of Katz centrality is that\nit presents the amount of influence by summing all walks starting from the node\nof interest and weighting walks by some attenuation factor smaller than 1."),(0,l.kt)("p",null,"Just as the other centrality measures got their dynamic algorithm\nimplementations, so did ",(0,l.kt)("strong",{parentName:"p"},"Katz Centrality"),". The implementation results in a\nreduction of computations needed to update already calculated results. The\nalgorithm offers substantially large speedups compared to static algorithm runs."),(0,l.kt)("p",null,"The algorithm is based on the work of Alexander van der Grinten et. al. called\n",(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/1807.03847.pdf"},"Scalable Katz Ranking Computation in Large Static and Dynamic\nGraphs"),(0,l.kt)("sup",{parentName:"p",id:"fnref-1"},(0,l.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),". The author proposes an\nestimation method that computes Katz's centrality by iteratively improving upper\nand lower bounds on the centrality scores. The computed scores may differ from\nthe real values, but the algorithm has the guarantee of preserving the rankings."),(0,l.kt)("p",null,(0,l.kt)("sup",{parentName:"p",id:"fnref-1"},(0,l.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," ",(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/1807.03847.pdf"},"Scalable Katz Ranking Computation in Large Static and Dynamic\nGraphs"),", Alexander van der Grinten et. al."),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Online Katz centrality should be used in a specific way. To set the parameters,\nthe user should call a ",(0,l.kt)("inlineCode",{parentName:"p"},"set()")," procedure. This function also sets the context of\na streaming algorithm. ",(0,l.kt)("inlineCode",{parentName:"p"},"get()")," function only returns the resulting values stored\nin a cache. Therefore, if you try to get values before first calling ",(0,l.kt)("inlineCode",{parentName:"p"},"set()"),",\nthe run will fail with a proper message."),(0,l.kt)("p",null,"To make the incremental flow, you should set the proper trigger. For that, we'll\nuse the ",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER katz_trigger\n(BEFORE | AFTER) COMMIT\nEXECUTE CALL katz_centrality_online.update(createdVertices, createdEdges, deletedVertices, deletedEdges) YIELD *\nSET node.rank = rank;\n")),(0,l.kt)("p",null,"Finally, the ",(0,l.kt)("inlineCode",{parentName:"p"},"reset()")," function resets the context and enables the user to start\nnew runs."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Trait"),(0,l.kt)("th",{parentName:"tr",align:null},"Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Module type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(g,{color:"#FB6E00",mdxType:"Highlight"},(0,l.kt)("strong",{parentName:"td"},"algorithm")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Implementation")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(g,{color:"#FB6E00",mdxType:"Highlight"},(0,l.kt)("strong",{parentName:"td"},"C++")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Graph direction")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(g,{color:"#FB6E00",mdxType:"Highlight"},(0,l.kt)("strong",{parentName:"td"},"directed")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Edge weights")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(g,{color:"#FB6E00",mdxType:"Highlight"},(0,l.kt)("strong",{parentName:"td"},"unweighted")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Parallelism")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(g,{color:"#FB6E00",mdxType:"Highlight"},(0,l.kt)("strong",{parentName:"td"},"sequential")))))),(0,l.kt)("h2",{id:"procedures"},"Procedures"),(0,l.kt)("h3",{id:"setalpha-epsilon"},(0,l.kt)("inlineCode",{parentName:"h3"},"set(alpha, epsilon)")),(0,l.kt)("h4",{id:"input"},"Input:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"alpha: double (default=0.2)")," \u27a1 Exponential decay factor defining the walk length\nimportance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"epsilon: double (default=1e-2)")," \u27a1 Convergence tolerance. Minimal difference in two\nadjacent pairs of nodes in the final ranking.")),(0,l.kt)("h4",{id:"output"},"Output:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," \u27a1 Node in the graph, for which Katz Centrality is calculated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rank")," \u27a1 Normalized ranking of a node. Expresses the centrality value after\nbound convergence.")),(0,l.kt)("h4",{id:"usage-1"},"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL katz_centrality_online.set(0.2, 0.01)\nYIELD node, rank;\n")),(0,l.kt)("h3",{id:"get"},(0,l.kt)("inlineCode",{parentName:"h3"},"get()")),(0,l.kt)("p",null,"*"," This should be used if the trigger has been set or a ",(0,l.kt)("inlineCode",{parentName:"p"},"set")," function has been\ncalled before adding changes to the graph."),(0,l.kt)("h4",{id:"output-1"},"Output:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," \u27a1 Node in the graph, for which Katz Centrality is calculated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rank")," \u27a1 Normalized ranking of a node. Expresses the centrality value after\nbound convergence.")),(0,l.kt)("h4",{id:"usage-2"},"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL katz_centrality_online.get()\nYIELD node, rank;\n")),(0,l.kt)("h3",{id:"updatecreated_vertices-created_edges-deleted_vertices-deleted_edges"},(0,l.kt)("inlineCode",{parentName:"h3"},"update(created_vertices, created_edges, deleted_vertices, deleted_edges)")),(0,l.kt)("h4",{id:"input-1"},"Input:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"created_vertices")," \u27a1 Vertices that were created in the last transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"created_edges")," \u27a1 Edges created in a period from the last transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"deleted_vertices")," \u27a1 Vertices deleted from the last transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"deleted_edges")," \u27a1 Edges deleted from the last transaction.")),(0,l.kt)("h4",{id:"output-2"},"Output:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," \u27a1 Node in the graph, for which Katz Centrality is calculated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rank")," \u27a1 Normalized ranking of a node. Expresses the centrality value after\nbound convergence.")),(0,l.kt)("h4",{id:"usage-3"},"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER katz_trigger\n(BEFORE | AFTER) COMMIT\nEXECUTE CALL katz_centrality_online.update(createdVertices, createdEdges, deletedVertices, deletedEdges) YIELD *\nSET node.rank = rank;\n")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)(i.Z,{groupId:"example",defaultValue:"visualization",values:[{label:"Step 1: Input graph",value:"visualization"},{label:"Step 2: Set parameters and trigger",value:"cypher-preset"},{label:"Step 3: Load commands",value:"cypher-load"},{label:"Step 4: Running command",value:"run"},{label:"Step 5: Results",value:"result"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"visualization",mdxType:"TabItem"},(0,l.kt)("img",{src:a(10040).Z})),(0,l.kt)(o.Z,{value:"cypher-preset",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL katz_centrality_online.set(0.2) YIELD *;\n\nCREATE TRIGGER katz_trigger\nBEFORE COMMIT\nEXECUTE CALL katz_centrality_online.update(createdVertices, createdEdges, deletedVertices, deletedEdges) YIELD *\nSET node.rank = rank;\n"))),(0,l.kt)(o.Z,{value:"cypher-load",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MERGE (a:Node {id: 1}) MERGE (b:Node {id: 0}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 1}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 2}) MERGE (b:Node {id: 1}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 2}) MERGE (b:Node {id: 8}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 2}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 3}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 4}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 4}) MERGE (b:Node {id: 2}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 5}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 5}) MERGE (b:Node {id: 2}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 6}) MERGE (b:Node {id: 2}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 7}) MERGE (b:Node {id: 2}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 8}) MERGE (b:Node {id: 2}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 8}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 9}) MERGE (b:Node {id: 10}) CREATE (a)-[:RELATION]->(b);\nMERGE (a:Node {id: 10}) MERGE (b:Node {id: 9}) CREATE (a)-[:RELATION]->(b);\n"))),(0,l.kt)(o.Z,{value:"run",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node)\nRETURN node.id AS node_id, node.rank AS rank;\n"))),(0,l.kt)(o.Z,{value:"result",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------+---------+\n| node_id | rank    |\n+---------+---------+\n| 1       | 0.408   |\n| 0       | 0.28    |\n| 10      | 1.864   |\n| 2       | 1.08    |\n| 8       | 0.408   |\n| 3       | 0       |\n| 4       | 0       |\n| 5       | 0       |\n| 6       | 0       |\n| 7       | 0       |\n| 9       | 0.544   |\n+---------+---------+\n")))))}h.isMDXComponent=!0},58215:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(67294);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return s}});var n=a(87462),r=a(67294),l=a(72389),i=a(5979),o=a(86010),d="tabItem_LplD";function u(e){var t,a,l,u=e.lazy,s=e.block,p=e.defaultValue,c=e.values,m=e.groupId,g=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=c?c:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),E=(0,i.lx)(h,(function(e,t){return e.value===t.value}));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===p?p:null!=(t=null!=p?p:null==(a=k.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=k[0])?void 0:l.props.value;if(null!==f&&!h.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,i.UB)(),b=N.tabGroupChoices,v=N.setTabGroupChoices,y=(0,r.useState)(f),T=y[0],R=y[1],C=[],_=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=b[m];null!=O&&O!==T&&h.some((function(e){return e.value===O}))&&R(O)}var A=function(e){var t=e.currentTarget,a=C.indexOf(t),n=h[a].value;n!==T&&(_(t),R(n),null!=m&&v(m,n))},w=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.currentTarget)+1;a=C[n]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;a=C[r]||C[C.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},g)},h.map((function(e){var t=e.value,a=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return C.push(e)},onKeyDown:w,onFocus:A,onClick:A},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),u?(0,r.cloneElement)(k.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function s(e){var t=(0,l.Z)();return r.createElement(u,(0,n.Z)({key:String(t)},e))}},10040:function(e,t,a){t.Z=a.p+"assets/images/memgraph-katz-48335fadf6774a2c8f79c9dcc86c8a01.png"}}]);