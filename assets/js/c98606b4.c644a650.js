"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[46839],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||l;return t?a.createElement(g,o(o({ref:n},s),{},{components:t})):a.createElement(g,o({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},15303:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const l={id:"return",title:"RETURN clause",sidebar_label:"RETURN"},o=void 0,i={unversionedId:"clauses/return",id:"clauses/return",title:"RETURN clause",description:"The RETURN clause defines which data should be included in the resulting set.",source:"@site/cypher-manual/clauses/return.md",sourceDirName:"clauses",slug:"/clauses/return",permalink:"/docs/cypher-manual/clauses/return",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/return.md",tags:[],version:"current",frontMatter:{id:"return",title:"RETURN clause",sidebar_label:"RETURN"},sidebar:"cypher_manual",previous:{title:"REMOVE",permalink:"/docs/cypher-manual/clauses/remove"},next:{title:"SET",permalink:"/docs/cypher-manual/clauses/set"}},u={},p=[{value:"Dataset",id:"dataset",level:2},{value:"1. Returning nodes",id:"1-returning-nodes",level:2},{value:"2. Returning relationships",id:"2-returning-relationships",level:2},{value:"3. Returning properties",id:"3-returning-properties",level:2},{value:"4. Returning multiple elements",id:"4-returning-multiple-elements",level:2},{value:"5. Returning all elements",id:"5-returning-all-elements",level:2},{value:"6. Handling uncommon characters",id:"6-handling-uncommon-characters",level:2},{value:"7. Returning elements with an alias",id:"7-returning-elements-with-an-alias",level:2},{value:"8. Optional properties",id:"8-optional-properties",level:2},{value:"9. Returning expressions",id:"9-returning-expressions",level:2},{value:"10. Returning unique results",id:"10-returning-unique-results",level:2},{value:"11. Returning aggregated results",id:"11-returning-aggregated-results",level:2},{value:"12. Limiting the number of returned results",id:"12-limiting-the-number-of-returned-results",level:2},{value:"13. Order results",id:"13-order-results",level:2},{value:"Dataset queries",id:"dataset-queries",level:2}],s={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," clause defines which data should be included in the resulting set."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#1-returning-nodes"},"Returning nodes")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#2-returning-relationships"},"Returning relationships")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#3-returning-properties"},"Returning properties")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#4-returning-multiple-elements"},"Returning multiple elements")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#5-returning-all-elements"},"Returning all elements")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#6-handling-uncommon-characters"},"Handling uncommon characters")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#7-returning-elements-with-an-alias"},"Returning elements with an alias")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#8-optional-properties"},"Optional properties")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#9-returning-expressions"},"Returning expressions")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#10-returning-unique-results"},"Returning unique results"),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#11-limiting-the-number-of-returned-results"},"Limiting the number of returned results"))),(0,r.kt)("h2",{id:"dataset"},"Dataset"),(0,r.kt)("p",null,"The following examples are executed with this dataset. You can create this dataset\nlocally by executing the queries at the end of the page: ",(0,r.kt)("a",{parentName:"p",href:"#data-set-queries"},"Dataset queries"),"."),(0,r.kt)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),(0,r.kt)("h2",{id:"1-returning-nodes"},"1. Returning nodes"),(0,r.kt)("p",null,"The node variable needs to be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nRETURN c;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+-----------------------------------------------------------------------------------------------------+\n| c                                                                                                   |\n+-----------------------------------------------------------------------------------------------------+\n| (:Country {continent: "Europe", language: "English", name: "United Kingdom", population: 66000000}) |\n+-----------------------------------------------------------------------------------------------------+\n')),(0,r.kt)("h2",{id:"2-returning-relationships"},"2. Returning relationships"),(0,r.kt)("p",null,"The relationship variable needs to be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})<-[r]-(:Person {name: 'Harry'})\nRETURN type(r);\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------------+\n| type(r)    |\n+------------+\n| WORKING_IN |\n| LIVING_IN  |\n+------------+\n")),(0,r.kt)("h2",{id:"3-returning-properties"},"3. Returning properties"),(0,r.kt)("p",null,"The property of a node or a relationship can be returned by using the dot separator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nRETURN c.name;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+----------------+\n| c.name         |\n+----------------+\n| United Kingdom |\n+----------------+\n")),(0,r.kt)("h2",{id:"4-returning-multiple-elements"},"4. Returning multiple elements"),(0,r.kt)("p",null,"To return multiple elements separate them with a comma character:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nRETURN c.name, c.population, c.continent;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+----------------+----------------+----------------+\n| c.name         | c.population   | c.continent    |\n+----------------+----------------+----------------+\n| United Kingdom | 66000000       | Europe         |\n+----------------+----------------+----------------+\n")),(0,r.kt)("h2",{id:"5-returning-all-elements"},"5. Returning all elements"),(0,r.kt)("p",null,"To return all the elements from a query, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," symbol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (:Country {name: 'United Kingdom'})-[]-(p:Person)\nRETURN *;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+---------------------------+\n| p                         |\n+---------------------------+\n| (:Person {name: "Harry"}) |\n| (:Person {name: "Harry"}) |\n| (:Person {name: "Anna"})  |\n+---------------------------+\n')),(0,r.kt)("h2",{id:"6-handling-uncommon-characters"},"6. Handling uncommon characters"),(0,r.kt)("p",null,"Uncommon characters are handled using placeholder variables enclosed with the symbol `","`","`.\nFor example, a query could look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (`An uncommon variable!`)\nWHERE `An uncommon variable!`.name = 'A'\nRETURN `An uncommon variable!`.value;\n")),(0,r.kt)("h2",{id:"7-returning-elements-with-an-alias"},"7. Returning elements with an alias"),(0,r.kt)("p",null,"You can specify an alias for an element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement using ",(0,r.kt)("inlineCode",{parentName:"p"},"AS"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nRETURN c.name AS Name;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+----------------+\n| Name           |\n+----------------+\n| United Kingdom |\n+----------------+\n")),(0,r.kt)("h2",{id:"8-optional-properties"},"8. Optional properties"),(0,r.kt)("p",null,"If the property being returned does not exist, ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," will be returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nRETURN c.color;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+---------+\n| c.color |\n+---------+\n| Null    |\n+---------+\n")),(0,r.kt)("h2",{id:"9-returning-expressions"},"9. Returning expressions"),(0,r.kt)("p",null,"Expressions can be included in the ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nRETURN c.name = 'United Kingdom', \"Literal\";\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+---------------------------+---------------------------+\n| c.name = 'United Kingdom' | \"Literal\"                 |\n+---------------------------+---------------------------+\n| true                      | Literal                   |\n+---------------------------+---------------------------+\n")),(0,r.kt)("h2",{id:"10-returning-unique-results"},"10. Returning unique results"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement can be followed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"DISTINCT")," operator, which will remove duplicate results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH ()-[:LIVING_IN]->(c)\nRETURN DISTINCT c;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+-----------------------------------------------------------------------------------------------------+\n| c                                                                                                   |\n+-----------------------------------------------------------------------------------------------------+\n| (:Country {continent: "Europe", language: "German", name: "Germany", population: 83000000})         |\n| (:Country {continent: "Europe", language: "English", name: "United Kingdom", population: 66000000}) |\n+-----------------------------------------------------------------------------------------------------+\n')),(0,r.kt)("h2",{id:"11-returning-aggregated-results"},"11. Returning aggregated results"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement can be used with ",(0,r.kt)("a",{parentName:"p",href:"https://memgraph.com/docs/cypher-manual/functions#aggregation-functions"},(0,r.kt)("inlineCode",{parentName:"a"},"Aggregation"))," functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nRETURN AVG(c.population) as average_population;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+-----------------------------------------------------------------------------------------------------+\n| population                                                                                          |\n+-----------------------------------------------------------------------------------------------------+\n| 72,000,000                                                                                           |\n+-----------------------------------------------------------------------------------------------------+\n")),(0,r.kt)("p",null,"Aggregations functions can be also used with ",(0,r.kt)("inlineCode",{parentName:"p"},"DISTINCT")," operator, which will performe calculations only on unique values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH ()-[:LIVING_IN]->(c)\nRETURN AVG(DISTINCT c.population) as average population;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+-----------------------------------------------------------------------------------------------------+\n| population                                                                                          |\n+-----------------------------------------------------------------------------------------------------+\n| 74,500,000                                                                                            |\n+-----------------------------------------------------------------------------------------------------+\n")),(0,r.kt)("h2",{id:"12-limiting-the-number-of-returned-results"},"12. Limiting the number of returned results"),(0,r.kt)("p",null,"You can limit the number of returned results with the ",(0,r.kt)("inlineCode",{parentName:"p"},"LIMIT")," sub-clause.\nTo get the first ten results, you can use this query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person) RETURN n LIMIT 10;\n")),(0,r.kt)("h2",{id:"13-order-results"},"13. Order results"),(0,r.kt)("p",null,"Since the patterns which are matched can come in any order, it is very useful to\nbe able to enforce some ordering among the results. In such cases, you can use\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," sub-clause."),(0,r.kt)("p",null,"For example, the following query will get all ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," nodes and order them by\ntheir names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person) RETURN n ORDER BY n.name;\n")),(0,r.kt)("p",null,"By default, ordering will be ascending. To change the order to be descending,\nyou should append ",(0,r.kt)("inlineCode",{parentName:"p"},"DESC"),"."),(0,r.kt)("p",null,"For example, you can use this query to order people by their name descending:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person) RETURN n ORDER BY n.name DESC;\n")),(0,r.kt)("p",null,"You can also order by multiple variables. The results will be sorted by the\nfirst variable listed. If the values are equal, the results are sorted by the\nsecond variable, and so on."),(0,r.kt)("p",null,"For example, ordering by first name descending and last name ascending:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person) RETURN n ORDER BY n.name DESC, n.lastName;\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," sees only the variable names as carried over by ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN"),".\nThis means that the following will result in an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (old:Person) RETURN old AS new ORDER BY old.name;\n")),(0,r.kt)("p",null,"Instead, the ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," variable must be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (old:Person) RETURN old AS new ORDER BY new.name;\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," sub-clause may come in handy with ",(0,r.kt)("inlineCode",{parentName:"p"},"SKIP")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"LIMIT"),"\nsub-clauses. For example, to get the oldest person you can use the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Person) RETURN n ORDER BY n.age DESC LIMIT 1;\n")),(0,r.kt)("p",null,"You can also order result before returning them. The following query will order\nall the nodes according to name, and then return them in a list. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n)\nWITH n ORDER BY n.name DESC\nRETURN collect(n.name) AS names;\n")),(0,r.kt)("h2",{id:"dataset-queries"},"Dataset queries"),(0,r.kt)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our dataset locally by executing the following query block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country {name: 'Germany', language: 'German', continent: 'Europe', population: 83000000});\nCREATE (c2:Country {name: 'France', language: 'French', continent: 'Europe', population: 67000000});\nCREATE (c3:Country {name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000});\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN {date_of_start: 2014}]-(p:Person {name: 'John'})-[:LIVING_IN {date_of_start: 2014}]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN {date_of_start: 2014}]-(p:Person {name: 'Harry'})-[:LIVING_IN {date_of_start: 2013}]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH {date_of_start: 2011}]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH {date_of_start: 2012}]-(:Person {name: 'Anna'})-[:FRIENDS_WITH {date_of_start: 2014}]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN {date_of_start: 2014}]-(p)-[:LIVING_IN {date_of_start: 2014}]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}c.isMDXComponent=!0}}]);