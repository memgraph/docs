(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(8),i=(n(0),n(345)),o={id:"python-api",title:"Query modules Python API",sidebar_label:"Python API"},c={unversionedId:"reference-guide/query-modules/python-api",id:"version-1.4.0/reference-guide/query-modules/python-api",isDocsHomePage:!1,title:"Query modules Python API",description:"This is the API documentation for mgp.py  which contains definitions of the public Python API provided by Memgraph.",source:"@site/memgraph_versioned_docs/version-1.4.0/reference-guide/query-modules/python-api.md",slug:"/reference-guide/query-modules/python-api",permalink:"/memgraph/reference-guide/query-modules/python-api",editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-1.4.0/reference-guide/query-modules/python-api.md",version:"1.4.0",sidebar_label:"Python API",sidebar:"version-1.4.0/memgraph",previous:{title:"Query modules C API",permalink:"/memgraph/reference-guide/query-modules/c-api"},next:{title:"NetworkX",permalink:"/memgraph/reference-guide/networkx"}},l=[{value:"<code>mgp.read_proc(func)</code>",id:"mgpread_procfunc",children:[{value:"Examples",id:"examples",children:[]}]},{value:"<code>mgp._typing_to_cypher_type()</code>",id:"mgp_typing_to_cypher_type",children:[]},{value:"<code>class mgp.Properties(vertex_or_edge)</code>",id:"class-mgppropertiesvertex_or_edge",children:[{value:"<code>get(property_name, default)</code>",id:"getproperty_name-default",children:[]},{value:"<code>items()</code>",id:"items",children:[]},{value:"<code>keys()</code>",id:"keys",children:[]},{value:"<code>values()</code>",id:"values",children:[]}]},{value:"<code>class mgp.Label(name)</code>",id:"class-mgplabelname",children:[{value:"<code>name()</code>",id:"name",children:[]}]},{value:"<code>class mgp.EdgeType(name)</code>",id:"class-mgpedgetypename",children:[{value:"<code>name()</code>",id:"name-1",children:[]}]},{value:"<code>class mgp.Edge(edge)</code>",id:"class-mgpedgeedge",children:[{value:"<code>from_vertex()</code>",id:"from_vertex",children:[]},{value:"<code>id()</code>",id:"id",children:[]},{value:"<code>is_valid()</code>",id:"is_valid",children:[]},{value:"<code>properties()</code>",id:"properties",children:[]},{value:"<code>to_vertex()</code>",id:"to_vertex",children:[]},{value:"<code>type()</code>",id:"type",children:[]}]},{value:"<code>class mgp.Vertex(vertex)</code>",id:"class-mgpvertexvertex",children:[{value:"<code>id()</code>",id:"id-1",children:[]},{value:"<code>in_edges()</code>",id:"in_edges",children:[]},{value:"<code>is_valid()</code>",id:"is_valid-1",children:[]},{value:"<code>labels()</code>",id:"labels",children:[]},{value:"<code>out_edges()</code>",id:"out_edges",children:[]},{value:"<code>properties()</code>",id:"properties-1",children:[]}]},{value:"<code>class mgp.Path(starting_vertex_or_path: Union[&lt;sphinx.ext.autodoc.importer._MockObject object at 0x7f7fbd8d6700&gt;, mgp.Vertex])</code>",id:"class-mgppathstarting_vertex_or_path-unionsphinxextautodocimporter_mockobject-object-at-0x7f7fbd8d6700-mgpvertex",children:[{value:"<code>edges()</code>",id:"edges",children:[]},{value:"<code>expand(edge)</code>",id:"expandedge",children:[]},{value:"<code>is_valid()</code>",id:"is_valid-2",children:[]},{value:"<code>vertices()</code>",id:"vertices",children:[]}]},{value:"<code>class mgp.Record(**kwargs)</code>",id:"class-mgprecordkwargs",children:[{value:"<code>fields()</code>",id:"fields",children:[]}]},{value:"<code>class mgp.Vertices(graph)</code>",id:"class-mgpverticesgraph",children:[{value:"<code>is_valid()</code>",id:"is_valid-3",children:[]}]},{value:"<code>class mgp.Graph(graph)</code>",id:"class-mgpgraphgraph",children:[{value:"<code>get_vertex_by_id(vertex_id)</code>",id:"get_vertex_by_idvertex_id",children:[]},{value:"<code>is_valid()</code>",id:"is_valid-4",children:[]},{value:"<code>vertices()</code>",id:"vertices-1",children:[]}]},{value:"<code>class mgp.ProcCtx(graph)</code>",id:"class-mgpprocctxgraph",children:[{value:"<code>check_must_abort()</code>",id:"check_must_abort",children:[]},{value:"<code>graph()</code>",id:"graph",children:[]},{value:"<code>is_valid()</code>",id:"is_valid-5",children:[]},{value:"<code>must_abort()</code>",id:"must_abort",children:[]}]},{value:"<code>class mgp.Deprecated(type_)</code>",id:"class-mgpdeprecatedtype_",children:[{value:"<code>field_type()</code>",id:"field_type",children:[]}]},{value:"<code>class mgp.UnsupportedTypingError(type_)</code>",id:"class-mgpunsupportedtypingerrortype_",children:[]},{value:"<code>class mgp.AbortError()</code>",id:"class-mgpaborterror",children:[]},{value:"<code>class mgp.InvalidContextError()</code>",id:"class-mgpinvalidcontexterror",children:[]}],d={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This is the API documentation for ",Object(i.b)("inlineCode",{parentName:"p"},"mgp.py"),"  which contains definitions of the public Python API provided by Memgraph.\nIn essence, this is a wrapper around the ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",{parentName:"strong",href:"/memgraph/reference-guide/query-modules/c-api"},"C API")),". This source file can be found in the Memgraph installation directory,\nunder ",Object(i.b)("inlineCode",{parentName:"p"},"python_support"),". On the standard Debian installation, this will be under ",Object(i.b)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/python_support"),"."),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},Object(i.b)("strong",{parentName:"p"},"NOTE:")," This part of the documentation is still under development. An updated version will soon be available."))),Object(i.b)("h2",{id:"mgpread_procfunc"},Object(i.b)("inlineCode",{parentName:"h2"},"mgp.read_proc(func)")),Object(i.b)("p",null,"Register func as a a read-only procedure of the current module."),Object(i.b)("p",null,"read_proc is meant to be used as a decorator function to register module\nprocedures. The registered func needs to be a callable which optionally\ntakes ProcCtx as the first argument. Other arguments of func will be\nbound to values passed in the cypherQuery. The full signature of func\nneeds to be annotated with types. The return type must be\nRecord(field_name=type, \u2026) and the procedure must produce either a\ncomplete Record or None. To mark a field as deprecated, use\nRecord(field_name=Deprecated(type), \u2026). Multiple records can be\nproduced by returning an iterable of them. Registering generator functions\nis currently not supported."),Object(i.b)("h3",{id:"examples"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"    import mgp\n\n    @mgp.read_proc\n    def procedure(context: mgp.ProcCtx,\n                required_arg: mgp.Nullable[mgp.Any],\n                optional_arg: mgp.Nullable[mgp.Any] = None\n                ) -> mgp.Record(result=str, args=list):\n        args = [required_arg, optional_arg]\n        # Multiple rows can be produced by returning an iterable of mgp.Record\n        return mgp.Record(args=args, result='Hello World!')\n")),Object(i.b)("p",null,"The example procedure above returns 2 fields: args and result."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"args is a copy of arguments passed to the procedure.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"result is the result of this procedure, a \u201cHello World!\u201d string.")),Object(i.b)("p",null,"Any errors can be reported by raising an Exception."),Object(i.b)("p",null,"The procedure can be invoked in openCypher using the following calls:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"CALL example.procedure(1, 2) YIELD args, result;\nCALL example.procedure(1) YIELD args, result;\n")),Object(i.b)("p",null,"Naturally, you may pass in different arguments or yield less fields."),Object(i.b)("h2",{id:"mgp_typing_to_cypher_type"},Object(i.b)("inlineCode",{parentName:"h2"},"mgp._typing_to_cypher_type()")),Object(i.b)("p",null,"Convert typing annotation to a _mgp.CypherType instance."),Object(i.b)("h2",{id:"class-mgppropertiesvertex_or_edge"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Properties(vertex_or_edge)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"A collection of properties either on a Vertex or an Edge."),Object(i.b)("h3",{id:"getproperty_name-default"},Object(i.b)("inlineCode",{parentName:"h3"},"get(property_name, default)")),Object(i.b)("p",null,"Get the value of a property with the given name or return default."),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"items"},Object(i.b)("inlineCode",{parentName:"h3"},"items()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"keys"},Object(i.b)("inlineCode",{parentName:"h3"},"keys()")),Object(i.b)("p",null,"Iterate over property names."),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"values"},Object(i.b)("inlineCode",{parentName:"h3"},"values()")),Object(i.b)("p",null,"Iterate over property values."),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h2",{id:"class-mgplabelname"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Label(name)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Label of a Vertex."),Object(i.b)("h3",{id:"name"},Object(i.b)("inlineCode",{parentName:"h3"},"name()")),Object(i.b)("h2",{id:"class-mgpedgetypename"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.EdgeType(name)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Type of an Edge."),Object(i.b)("h3",{id:"name-1"},Object(i.b)("inlineCode",{parentName:"h3"},"name()")),Object(i.b)("h2",{id:"class-mgpedgeedge"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Edge(edge)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Edge in the graph database."),Object(i.b)("p",null,"Access to an Edge is only valid during a single execution of a procedure in\na query. You should not globally store an instance of an Edge. Using an\ninvalid Edge instance will raise InvalidContextError."),Object(i.b)("h3",{id:"from_vertex"},Object(i.b)("inlineCode",{parentName:"h3"},"from_vertex()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"id"},Object(i.b)("inlineCode",{parentName:"h3"},"id()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"is_valid"},Object(i.b)("inlineCode",{parentName:"h3"},"is_valid()")),Object(i.b)("p",null,"Return True if self is in valid context and may be used."),Object(i.b)("h3",{id:"properties"},Object(i.b)("inlineCode",{parentName:"h3"},"properties()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"to_vertex"},Object(i.b)("inlineCode",{parentName:"h3"},"to_vertex()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"type"},Object(i.b)("inlineCode",{parentName:"h3"},"type()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h2",{id:"class-mgpvertexvertex"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Vertex(vertex)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Vertex in the graph database."),Object(i.b)("p",null,"Access to a Vertex is only valid during a single execution of a procedure\nin a query. You should not globally store an instance of a Vertex. Using an\ninvalid Vertex instance will raise InvalidContextError."),Object(i.b)("h3",{id:"id-1"},Object(i.b)("inlineCode",{parentName:"h3"},"id()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"in_edges"},Object(i.b)("inlineCode",{parentName:"h3"},"in_edges()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"is_valid-1"},Object(i.b)("inlineCode",{parentName:"h3"},"is_valid()")),Object(i.b)("p",null,"Return True if self is in valid context and may be used"),Object(i.b)("h3",{id:"labels"},Object(i.b)("inlineCode",{parentName:"h3"},"labels()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"out_edges"},Object(i.b)("inlineCode",{parentName:"h3"},"out_edges()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h3",{id:"properties-1"},Object(i.b)("inlineCode",{parentName:"h3"},"properties()")),Object(i.b)("p",null,"Raise InvalidContextError."),Object(i.b)("h2",{id:"class-mgppathstarting_vertex_or_path-unionsphinxextautodocimporter_mockobject-object-at-0x7f7fbd8d6700-mgpvertex"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Path(starting_vertex_or_path: Union[<sphinx.ext.autodoc.importer._MockObject object at 0x7f7fbd8d6700>, mgp.Vertex])")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Path containing Vertex and Edge instances."),Object(i.b)("h3",{id:"edges"},Object(i.b)("inlineCode",{parentName:"h3"},"edges()")),Object(i.b)("p",null,"Edges ordered from the start to the end of the path."),Object(i.b)("p",null,"Raise InvalidContextError if using an invalid Path instance."),Object(i.b)("h3",{id:"expandedge"},Object(i.b)("inlineCode",{parentName:"h3"},"expand(edge)")),Object(i.b)("p",null,"Append an edge continuing from the last vertex on the path."),Object(i.b)("p",null,"The last vertex on the path will become the other endpoint of the given\nedge, as continued from the current last vertex."),Object(i.b)("p",null,"Raise ValueError if the current last vertex in the path is not part of\nthe given edge.\nRaise InvalidContextError if using an invalid Path instance or if\npassed in edge is invalid."),Object(i.b)("h3",{id:"is_valid-2"},Object(i.b)("inlineCode",{parentName:"h3"},"is_valid()")),Object(i.b)("h3",{id:"vertices"},Object(i.b)("inlineCode",{parentName:"h3"},"vertices()")),Object(i.b)("p",null,"Vertices ordered from the start to the end of the path."),Object(i.b)("p",null,"Raise InvalidContextError if using an invalid Path instance."),Object(i.b)("h2",{id:"class-mgprecordkwargs"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Record(**kwargs)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Represents a record of resulting field values."),Object(i.b)("h3",{id:"fields"},Object(i.b)("inlineCode",{parentName:"h3"},"fields()")),Object(i.b)("h2",{id:"class-mgpverticesgraph"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Vertices(graph)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Iterable over vertices in a graph."),Object(i.b)("h3",{id:"is_valid-3"},Object(i.b)("inlineCode",{parentName:"h3"},"is_valid()")),Object(i.b)("p",null,"Return True if self is in valid context and may be used."),Object(i.b)("h2",{id:"class-mgpgraphgraph"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Graph(graph)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"State of the graph database in current ProcCtx."),Object(i.b)("h3",{id:"get_vertex_by_idvertex_id"},Object(i.b)("inlineCode",{parentName:"h3"},"get_vertex_by_id(vertex_id)")),Object(i.b)("p",null,"Return the Vertex corresponding to given vertex_id from the graph."),Object(i.b)("p",null,"Access to a Vertex is only valid during a single execution of a\nprocedure in a query. You should not globally store the returned\nVertex."),Object(i.b)("p",null,"Raise IndexError if unable to find the given vertex_id.\nRaise InvalidContextError if context is invalid."),Object(i.b)("h3",{id:"is_valid-4"},Object(i.b)("inlineCode",{parentName:"h3"},"is_valid()")),Object(i.b)("p",null,"Return True if self is in valid context and may be used."),Object(i.b)("h3",{id:"vertices-1"},Object(i.b)("inlineCode",{parentName:"h3"},"vertices()")),Object(i.b)("p",null,"All vertices in the graph."),Object(i.b)("p",null,"Access to a Vertex is only valid during a single execution of a\nprocedure in a query. You should not globally store the returned Vertex\ninstances."),Object(i.b)("p",null,"Raise InvalidContextError if context is invalid."),Object(i.b)("h2",{id:"class-mgpprocctxgraph"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.ProcCtx(graph)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Context of a procedure being executed."),Object(i.b)("p",null,"Access to a ProcCtx is only valid during a single execution of a procedure\nin a query. You should not globally store a ProcCtx instance."),Object(i.b)("h3",{id:"check_must_abort"},Object(i.b)("inlineCode",{parentName:"h3"},"check_must_abort()")),Object(i.b)("h3",{id:"graph"},Object(i.b)("inlineCode",{parentName:"h3"},"graph()")),Object(i.b)("p",null,"Raise InvalidContextError if context is invalid."),Object(i.b)("h3",{id:"is_valid-5"},Object(i.b)("inlineCode",{parentName:"h3"},"is_valid()")),Object(i.b)("h3",{id:"must_abort"},Object(i.b)("inlineCode",{parentName:"h3"},"must_abort()")),Object(i.b)("h2",{id:"class-mgpdeprecatedtype_"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.Deprecated(type_)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"object")),Object(i.b)("p",null,"Annotate a resulting Record\u2019s field as deprecated."),Object(i.b)("h3",{id:"field_type"},Object(i.b)("inlineCode",{parentName:"h3"},"field_type()")),Object(i.b)("h2",{id:"class-mgpunsupportedtypingerrortype_"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.UnsupportedTypingError(type_)")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"Exception")),Object(i.b)("p",null,"Signals a typing annotation is not supported as a _mgp.CypherType."),Object(i.b)("h2",{id:"class-mgpaborterror"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.AbortError()")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"Exception")),Object(i.b)("p",null,"Signals that the procedure was asked to abort its execution."),Object(i.b)("h2",{id:"class-mgpinvalidcontexterror"},Object(i.b)("inlineCode",{parentName:"h2"},"class mgp.InvalidContextError()")),Object(i.b)("p",null,"Bases: ",Object(i.b)("inlineCode",{parentName:"p"},"Exception")),Object(i.b)("p",null,"Signals using a graph element instance outside of the registered procedure."))}p.isMDXComponent=!0},345:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),p=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(n),u=r,h=s["".concat(o,".").concat(u)]||s[u]||b[u]||i;return n?a.a.createElement(h,c(c({ref:t},d),{},{components:n})):a.a.createElement(h,c({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var d=2;d<i;d++)o[d]=n[d];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);