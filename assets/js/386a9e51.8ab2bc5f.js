"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2633],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(a),c=o,f=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function c(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},97544:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=a(87462),o=(a(67294),a(3905)),r=a(93996);const l={id:"table-to-graph-importer",title:"How to import table data to a graph database",sidebar_label:"Import table data as a graph",slug:"/how-to-guides/table-to-graph-importer"},i=void 0,s={unversionedId:"how-to-guides/loaders/table-to-graph-importer",id:"how-to-guides/loaders/table-to-graph-importer",title:"How to import table data to a graph database",description:"This guide will show you how to use loaders.py to translate table data from a",source:"@site/gqlalchemy/how-to-guides/loaders/import-table-data-to-graph-database.md",sourceDirName:"how-to-guides/loaders",slug:"/how-to-guides/table-to-graph-importer",permalink:"/docs/gqlalchemy/how-to-guides/table-to-graph-importer",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/loaders/import-table-data-to-graph-database.md",tags:[],version:"current",frontMatter:{id:"table-to-graph-importer",title:"How to import table data to a graph database",sidebar_label:"Import table data as a graph",slug:"/how-to-guides/table-to-graph-importer"},sidebar:"gqlalchemy",previous:{title:"Pulsar streams",permalink:"/docs/gqlalchemy/how-to-guides/streams/manage-pulsar-streams"},next:{title:"Make a custom file system importer",permalink:"/docs/gqlalchemy/how-to-guides/custom-file-system-importer"}},p={},d=[{value:"Loading a CSV file from the local file system",id:"loading-a-csv-file-from-the-local-file-system",level:2},{value:"Using a cloud storage solution",id:"using-a-cloud-storage-solution",level:2}],m={toc:d};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide will show you how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"loaders.py")," to translate table data from a\nfile to graph data and import it to ",(0,o.kt)("strong",{parentName:"p"},"Memgraph"),". Currently, we support reading\nof CSV, Parquet, ORC and IPC/Feather/Arrow file formats via the ",(0,o.kt)("strong",{parentName:"p"},"PyArrow")," package."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Make sure you have a running Memgraph instance. If you're not sure how to run\nMemgraph, check out the Memgraph ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/#quick-start"},"Quick start"),".")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"loaders.py")," module implements loading data from the local file system, as\nwell as Azure Blob and Amazon S3 remote file systems. Depending on where your\ndata is located, here are two guides on how to import it to Memgraph:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#loading-a-csv-file-from-the-local-file-system"},"Loading a CSV file from the local file\nsystem")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#using-a-cloud-storage-solution"},"Using a cloud storage solution"))),(0,o.kt)(r.ZP,{mdxType:"Neo4jWarning"}),(0,o.kt)("h2",{id:"loading-a-csv-file-from-the-local-file-system"},"Loading a CSV file from the local file system"),(0,o.kt)("p",null,"Let's say you have a simple table data in a CSV file stored at\n",(0,o.kt)("inlineCode",{parentName:"p"},"/home/user/table_data"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"name,surname,grade\nIvan,Horvat,4\nMarko,Andric,5\nLuka,Lukic,3\n")),(0,o.kt)("p",null,"To create a translation from table to graph data, you need to define a ",(0,o.kt)("strong",{parentName:"p"},"data\nconfiguration object"),". This can be done inside your code by defining a\ndictionary, but it is recommended to use a YAML file structured like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'indices:    # indices to be created for each table\n  individuals:    # name of table containing individuals with ind_id\n  - ind_id\n  address:\n  - add_id\n\n\nname_mappings:    # how we want to name node labels\n  individuals:\n    label: INDIVIDUAL    # nodes made from individuals table will have INDIVIDUAL label\n  address:\n    label: ADDRESS\n    column_names_mapping: {"current_column_name": "mapped_name"}    # (optional) map column names\n\n\none_to_many_relations:\n  address: []        # currently needed, leave [] if no relations to define\n  individuals:\n    - foreign_key: # foreign key used for mapping;\n      column_name: add_id         # specifies its column\n      reference_table: address    # name of table from which the foreign key is taken\n      reference_key: add_id       # column name in reference table from which the foreign key is taken\n    label: LIVES_IN        # label applied to relationship created\n      from_entity: False     # (optional) define direction of relationship created\n\n\nmany_to_many_relations:       # intended to be used in case of associative tables\n  example:\n    foreign_key_from:        # describes the source of the relationship\n      column_name:\n      reference_table:\n      reference_key:\n    foreign_key_to:          # describes the destination of the relationship\n      column_name:\n      reference_table:\n      reference_key:\n    label:\n\n')),(0,o.kt)("p",null,"For this example, you don't need all of those fields. You only need to define\n",(0,o.kt)("inlineCode",{parentName:"p"},"indices")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"one_to_many_relations"),". Hence, you have the following YAML file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"indices:\n  example:\n    - name\n\nname_mappings:\n  example:\n    label: PERSON\n\none_to_many_relations:\n  example: []\n")),(0,o.kt)("p",null,"In order to read the data configuration from the YAML file, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'with open("./example.yaml", "r") as stream:\n    try:\n        parsed_yaml = yaml.load(stream, Loader=SafeLoader)\n    except yaml.YAMLError as exc:\n        print(exc)\n')),(0,o.kt)("p",null,"Having defined the data configuration for the translation, all you need to do is\nmake an instance of an ",(0,o.kt)("inlineCode",{parentName:"p"},"Importer")," and call ",(0,o.kt)("inlineCode",{parentName:"p"},"translate()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'importer = ParquetLocalFileSystemImporter(\n    data_configuration=parsed_yaml,\n    path="/home/user/table_data",\n)\n\nimporter.translate(drop_database_on_start=True)\n')),(0,o.kt)("h2",{id:"using-a-cloud-storage-solution"},"Using a cloud storage solution"),(0,o.kt)("p",null,"To connect to Azure Blob, simply change the Importer object you are using. Like\nabove, first, define a data configuration object and then simply call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'importer = ParquetAzureBlobFileSystemImporter(\n    container_name="test",\n    data_configuration=parsed_yaml,\n    account_name="your_account_name",\n    account_key="your_account_key",\n)\n')),(0,o.kt)("p",null,"Hopefully, this guide has taught you how to import table data into Memgraph. If\nyou have any more questions, join our community and ping us on\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}u.isMDXComponent=!0},93996:(e,t,a)=>{a.d(t,{ZP:()=>l});var n=a(87462),o=(a(67294),a(3905));const r={toc:[]};function l(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"This feature only works with Memgraph. Neo4j is not supported.")))}l.isMDXComponent=!0}}]);