"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93328],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=s(t),h=o,c=u["".concat(l,".").concat(h)]||u[h]||m[h]||r;return t?a.createElement(c,i(i({ref:n},p),{},{components:t})):a.createElement(c,i({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},18364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(87462),o=(t(67294),t(3905)),r=t(59918);const i={id:"load-nodes-and-relationships",title:"How to load nodes and relationships",sidebar_label:"Load nodes and relationships"},d=void 0,l={unversionedId:"how-to-guides/ogm/load-nodes-and-relationships",id:"how-to-guides/ogm/load-nodes-and-relationships",title:"How to load nodes and relationships",description:"Through this guide, you will learn how to load nodes and relationships from a",source:"@site/gqlalchemy/how-to-guides/ogm/load-nodes-and-relationships.md",sourceDirName:"how-to-guides/ogm",slug:"/how-to-guides/ogm/load-nodes-and-relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/load-nodes-and-relationships",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/ogm/load-nodes-and-relationships.md",tags:[],version:"current",frontMatter:{id:"load-nodes-and-relationships",title:"How to load nodes and relationships",sidebar_label:"Load nodes and relationships"},sidebar:"gqlalchemy",previous:{title:"Save nodes and relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/save-nodes-and-relationships"},next:{title:"Index labels and properties",permalink:"/docs/gqlalchemy/how-to-guides/ogm/index-labels-and-properties"}},s={},p=[{value:"Load nodes",id:"load-nodes",level:2},{value:"Finding node properties",id:"finding-node-properties",level:3},{value:"Creating relationship between existing nodes",id:"creating-relationship-between-existing-nodes",level:3},{value:"Load relationships",id:"load-relationships",level:2}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Through this guide, you will learn how to load nodes and relationships from a\ngraph database. First, perform all necessary imports and create an instance of\nthe database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Memgraph, Node, Relationship, Field\nfrom typing import Optional\n\ndb = Memgraph()\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Make sure you have a running Memgraph instance. If you're not sure how to run\nMemgraph, check out the Memgraph ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/#quick-start"},"Quick start"),".")),(0,o.kt)(r.ZP,{mdxType:"Neo4jOption"}),(0,o.kt)("p",null,"Let's say you have defined ",(0,o.kt)("inlineCode",{parentName:"p"},"Streamer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Team")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"IsPartOf")," classes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Streamer(Node):\n    id: str = Field(index=True, unique=True, db=db)\n    name: Optional[str] = Field(index=True, exists=True, unique=True, db=db)\n\nclass Team(Node):\n    name: str = Field(unique=True, db=db)\n\nclass IsPartOf(Relationship, type="IS_PART_OF"):\n    date: Optional[str] = Field()\n')),(0,o.kt)("p",null,"There are two nodes already saved in the database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'streamer = Streamer(name="John", id="7").save(db)\nteam = Team(name="Warriors").save(db)\n')),(0,o.kt)("p",null,"We will use these objects in the following examples."),(0,o.kt)("h2",{id:"load-nodes"},"Load nodes"),(0,o.kt)("p",null,"There are many examples of when loading a node from the database may come in\nhandy, but let's cover the two most common. "),(0,o.kt)("h3",{id:"finding-node-properties"},"Finding node properties"),(0,o.kt)("p",null,"Suppose you just have the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," of the streamer and you want to know the\nstreamer's name. You have to load that node from the database and check its\n",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loaded_streamer = Streamer(id="7").load(db=db)\nprint(loaded_streamer.name)\n')),(0,o.kt)("p",null,"The code block above will print out the name of the stream whose ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," equals\n",(0,o.kt)("inlineCode",{parentName:"p"},'"7"'),", that is, ",(0,o.kt)("inlineCode",{parentName:"p"},'"John"'),". "),(0,o.kt)("h3",{id:"creating-relationship-between-existing-nodes"},"Creating relationship between existing nodes"),(0,o.kt)("p",null,"Suppose you want to create a new relationship of type ",(0,o.kt)("inlineCode",{parentName:"p"},"IS_PART_OF"),", between\nalready saved ",(0,o.kt)("inlineCode",{parentName:"p"},"streamer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"team")," nodes. Then you first need to load them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loaded_streamer = Stream(id="7").load(db=db)\nloaded_team = Team(name="Warriors").load(db=db)\n')),(0,o.kt)("p",null,"Since the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," property is unique, the ",(0,o.kt)("inlineCode",{parentName:"p"},"load()")," method will return a unique\nstreamer found in the database. Similarly, since the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property is unique\nfor each team, the ",(0,o.kt)("inlineCode",{parentName:"p"},"load()")," method will return a unique team found in the\ndatabase. When the given property is not unique, the ",(0,o.kt)("inlineCode",{parentName:"p"},"load()")," method will return\na list of matching results. Finally, you can create a relationship between\n",(0,o.kt)("inlineCode",{parentName:"p"},"loaded_streamer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"loaded_team")," nodes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'is_part_of = IsPartOf(\n                    _start_node_id=loaded_streamer._id, \n                    _end_node_id=loaded_team._id,\n                    date="2021-04-26"\n                ).save(db)\n')),(0,o.kt)("h2",{id:"load-relationships"},"Load relationships"),(0,o.kt)("p",null,"You can load a relationship from the database based on its start and end node.\nYou have already created ",(0,o.kt)("inlineCode",{parentName:"p"},"is_part_of")," relationship with ",(0,o.kt)("inlineCode",{parentName:"p"},"streamer._id")," as\n",(0,o.kt)("inlineCode",{parentName:"p"},"_start_node_id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"team._id")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"_end_node_id"),". Now you can load it from\nthe database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"loaded_is_part_of = IsPartOf(\n        _start_node_id=streamer._id,\n        _end_node_id=team._id\n    ).load(db)\n")),(0,o.kt)("p",null,"It's easy to get its ",(0,o.kt)("inlineCode",{parentName:"p"},"date")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(loaded_is_part_of.date)\n")),(0,o.kt)("p",null,"The output of the above print is ",(0,o.kt)("inlineCode",{parentName:"p"},"2021-04-26"),"."),(0,o.kt)("p",null,"Hopefully this guide has taught you how to load nodes and relationships. If you\nhave any more questions, join our community and ping us on\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}u.isMDXComponent=!0},59918:(e,n,t)=>{t.d(n,{ZP:()=>i});var a=t(87462),o=(t(67294),t(3905));const r={toc:[]};function i(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"You can also use this feature with Neo4j:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'db = Neo4j(host="localhost", port="7687", username="neo4j", password="test")\n'))))}i.isMDXComponent=!0}}]);