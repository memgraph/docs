"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6525],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(n),c=a,g=m["".concat(u,".").concat(c)]||m[c]||s[c]||l;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57431:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return c},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return s}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={id:"loading-modules",title:"How to load MAGE query modules?",sidebar_label:"Loading query modules"},u=void 0,d={unversionedId:"usage/loading-modules",id:"usage/loading-modules",title:"How to load MAGE query modules?",description:"Loading query modules",source:"@site/mage/usage/loading-modules.md",sourceDirName:"usage",slug:"/usage/loading-modules",permalink:"/docs/mage/usage/loading-modules",editUrl:"https://github.com/memgraph/docs/tree/master/mage/usage/loading-modules.md",tags:[],version:"current",frontMatter:{id:"loading-modules",title:"How to load MAGE query modules?",sidebar_label:"Loading query modules"},sidebar:"mage",previous:{title:"Build from source on Linux",permalink:"/docs/mage/installation/source"},next:{title:"Calling procedures",permalink:"/docs/mage/usage/calling-procedures"}},p={},s=[{value:"Loading query modules",id:"loading-query-modules",level:2},{value:"Utility query module",id:"utility-query-module",level:3}],m={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"loading-query-modules"},"Loading query modules"),(0,l.kt)("p",null,"When started, Memgraph will ",(0,l.kt)("strong",{parentName:"p"},"automatically attempt to load")," the query modules\nfrom all ",(0,l.kt)("inlineCode",{parentName:"p"},"*.so")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"*.py")," files it finds in the default\n",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory. The ",(0,l.kt)("inlineCode",{parentName:"p"},"*.so")," modules are written\nusing the C API and the ",(0,l.kt)("inlineCode",{parentName:"p"},"*.py")," modules are written using the Python API. Each\nfile corresponds to one query module with a bunch of different procedures within them.\nThe names of these files will be mapped to the query module names. For example, a procedure\n",(0,l.kt)("inlineCode",{parentName:"p"},"node_connectivity")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"nxalg.py")," will be mapped to ",(0,l.kt)("inlineCode",{parentName:"p"},"nxalg.node_connectivity()"),"\nin the Cypher query language."),(0,l.kt)("p",null,"If you want to change the directory in which Memgraph searches for query\nmodules, just change the ",(0,l.kt)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main\nconfiguration file (",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply it as a\ncommand-line parameter when running Memgraph (e.g. when using Docker)."),(0,l.kt)("h3",{id:"utility-query-module"},"Utility query module"),(0,l.kt)("p",null,"Query procedures that allow the users to gain more insight into other query\nmodules and their procedures are written under the utility query module named ",(0,l.kt)("inlineCode",{parentName:"p"},"mg"),".\nThis module offers three procedures with the following signatures:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Procedure"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mg.procedures() :: (name :: STRING, signature :: STRING)")),(0,l.kt)("td",{parentName:"tr",align:null},"Lists loaded procedures and their signatures.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mg.load(module_name :: STRING) :: ()")),(0,l.kt)("td",{parentName:"tr",align:null},"Loads or reloads the given module.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mg.load_all() :: ()")),(0,l.kt)("td",{parentName:"tr",align:null},"Loads or reloads all modules.")))),(0,l.kt)("p",null,"For example, invoking ",(0,l.kt)("inlineCode",{parentName:"p"},"mg.procedures()")," with Cypher looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.procedures() YIELD *;\n")),(0,l.kt)("p",null,"The result will be similar to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------+-------------------------------------------------------------------+\n| name                | signature                                                         |\n+---------------------+-------------------------------------------------------------------+\n| ...                 | ...                                                               |\n| graph_analyzer.help | graph_analyzer.help() :: (name :: STRING, value :: STRING)        |\n| mg.load             | mg.load(module_name :: STRING) :: ()                              |\n| mg.load_all         | mg.load_all() :: ()                                               |\n| mg.procedures       | mg.procedures() :: (name :: STRING, signature :: STRING)          |\n| ...                 | ...                                                               |\n+---------------------+-------------------------------------------------------------------+\n")),(0,l.kt)("p",null,"In this case, we can see that Memgraph has successfully loaded all the procedures implemented\nin query modules including the utility query procedures."),(0,l.kt)("p",null,"To load a module (named e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"hello"),") that wasn't loaded on startup (perhaps\nbecause it was added to Memgraph's query modules directory afterwards), we\ncan simply invoke:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("hello");\n')),(0,l.kt)("p",null,"If we wish to reload an existing module, say the ",(0,l.kt)("inlineCode",{parentName:"p"},"graph_analyzer")," module above, we\nagain use the same procedure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("graph_analyzer");\n')),(0,l.kt)("p",null,"Lastly, if we wish to reload all existing modules and load any newly added ones\nwe can use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load_all();\n")))}c.isMDXComponent=!0}}]);