"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[39979],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),h=s(n),u=o,g=h["".concat(c,".").concat(u)]||h[u]||p[u]||a;return n?r.createElement(g,l(l({ref:t},m),{},{components:n})):r.createElement(g,l({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},93316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={id:"mgconsole",title:"Querying with mgconsole",sidebar_label:"mgconsole"},l=void 0,i={unversionedId:"connect-to-memgraph/methods/mgconsole",id:"version-2.1.0/connect-to-memgraph/methods/mgconsole",title:"Querying with mgconsole",description:"The easiest way to execute openCypher queries against Memgraph is by using",source:"@site/memgraph_versioned_docs/version-2.1.0/connect-to-memgraph/methods/mgconsole.md",sourceDirName:"connect-to-memgraph/methods",slug:"/connect-to-memgraph/methods/mgconsole",permalink:"/docs/memgraph/2.1.0/connect-to-memgraph/methods/mgconsole",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/connect-to-memgraph/methods/mgconsole.md",tags:[],version:"2.1.0",frontMatter:{id:"mgconsole",title:"Querying with mgconsole",sidebar_label:"mgconsole"},sidebar:"version-2.1.0/memgraph",previous:{title:"Connection methods",permalink:"/docs/memgraph/2.1.0/connect-to-memgraph"},next:{title:"Drivers",permalink:"/docs/memgraph/2.1.0/connect-to-memgraph/methods/drivers"}},c={},s=[],m={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The easiest way to execute openCypher queries against Memgraph is by using\nMemgraph's command-line tool, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mgconsole"},"mgconsole"),", which is installed\ntogether with Memgraph."),(0,o.kt)("p",null,"If you installed Memgraph using Docker, you will need to run the client\nusing the following command (remember to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"HOST")," with valid IP of\nthe container - see ",(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/how-to-work-with-docker#docker-container-ip-address"},"Docker Note"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run -it --entrypoint=mgconsole memgraph --host HOST --use-ssl=False\n")),(0,o.kt)("p",null,"Otherwise, you can connect to the running Memgraph instance by\nissuing the following shell command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mgconsole --use-ssl=False\n")),(0,o.kt)("p",null,"After the client has started it should present a command prompt similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Type :help for shell usage\nQuit the shell by typing Ctrl-D(eof) or :quit\nConnected to 'memgraph://127.0.0.1:7687'\nmemgraph>\n")),(0,o.kt)("p",null,"At this point, it is possible to execute openCypher queries on Memgraph. Each\nquery needs to end with the ",(0,o.kt)("inlineCode",{parentName:"p"},";")," (",(0,o.kt)("em",{parentName:"p"},"semicolon"),") character. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (u:User {name: "Alice"})-[:Likes]->(m:Software {name: "Memgraph"});\n')),(0,o.kt)("p",null,'The above will create 2 nodes in the database, one labeled "User" with name\n"Alice" and the other labeled "Software" with name "Memgraph". It will also\ncreate a relationship that "Alice" ',(0,o.kt)("em",{parentName:"p"},"likes"),' "Memgraph".'),(0,o.kt)("p",null,"To find created nodes and relationships, execute the following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (u:User)-[r]->(x) RETURN u, r, x;\n")))}p.isMDXComponent=!0}}]);