(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2009],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(i,".").concat(d)]||m[d]||s[d]||p;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,l=new Array(p);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<p;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4045:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return i},default:function(){return c}});var a=n(2122),r=n(9756),p=(n(7294),n(3905)),l={id:"set",title:"SET clause",sidebar_label:"SET"},o={unversionedId:"clauses/set",id:"clauses/set",isDocsHomePage:!1,title:"SET clause",description:"The SET clause is used to update labels on nodes and properties on nodes and relationships.",source:"@site/cypher-manual/clauses/set.md",sourceDirName:"clauses",slug:"/clauses/set",permalink:"/cypher-manual/clauses/set",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/set.md",version:"current",sidebar_label:"SET",frontMatter:{id:"set",title:"SET clause",sidebar_label:"SET"},sidebar:"cypher_manual",previous:{title:"RETURN clause",permalink:"/cypher-manual/clauses/return"},next:{title:"UNION clause",permalink:"/cypher-manual/clauses/union"}},i=[{value:"Data Set",id:"data-set",children:[]},{value:"1. Setting a property",id:"1-setting-a-property",children:[]},{value:"2. Setting multiple properties",id:"2-setting-multiple-properties",children:[]},{value:"3. Setting node labels",id:"3-setting-node-labels",children:[]},{value:"4. Update a property",id:"4-update-a-property",children:[]},{value:"5. Remove a property",id:"5-remove-a-property",children:[]},{value:"6. Copy all properties",id:"6-copy-all-properties",children:[]},{value:"7. Replace all properties using map",id:"7-replace-all-properties-using-map",children:[]},{value:"8. Update all properties using map",id:"8-update-all-properties-using-map",children:[]},{value:"Data set Queries",id:"data-set-queries",children:[]}],u={toc:i};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,p.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," clause is used to update labels on nodes and properties on nodes and relationships."),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#1-setting-a-property"},"Setting a property")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#2-setting-multiple-properties"},"Setting multiple properties")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#3-setting-node-labels"},"Setting node labels")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#4-update-a-property"},"Update a property")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#5-remove-a-property"},"Remove a property")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#6-copy-all-properties"},"Copy all properties")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#7-replace-all-properties-using-map"},"Replace all properties using map")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("a",{parentName:"li",href:"#8-update-all-properties-using-map"},"Update all properties using map"))),(0,p.kt)("h2",{id:"data-set"},"Data Set"),(0,p.kt)("p",null,"The following examples are executed with this data set. You can create this data set\nlocally by executing the queries at the end of the page: ",(0,p.kt)("a",{parentName:"p",href:"#data-set-queries"},"Data Set"),"."),(0,p.kt)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),(0,p.kt)("h2",{id:"1-setting-a-property"},"1. Setting a property"),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," clause can be used to set the value of a property on a node or relationship."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c.population = 83000001\nRETURN c.name, c.population;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"+--------------+--------------+\n| c.name       | c.population |\n+--------------+--------------+\n| Germany      | 83000001     |\n+--------------+--------------+\n")),(0,p.kt)("h2",{id:"2-setting-multiple-properties"},"2. Setting multiple properties"),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," clause can be used to set the value of multiple properties nodes or relationships by separating them with a comma."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c.capital = 'Berlin', c.population = 83000002\nRETURN c.name, c.population, c.capital;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"+--------------+--------------+--------------+\n| c.name       | c.population | c.capital    |\n+--------------+--------------+--------------+\n| Germany      | 83000002     | Berlin       |\n+--------------+--------------+--------------+\n")),(0,p.kt)("h2",{id:"3-setting-node-labels"},"3. Setting node labels"),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," clause can be used to set the label on a node. If the node has a label, a new one will be added while the old one is left as is."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c { name: 'Germany' })\nSET c:Land\nRETURN labels(c);\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'+---------------------+\n| labels(c)           |\n+---------------------+\n| ["Country", "Land"] |\n+---------------------+\n')),(0,p.kt)("p",null,"Multiple labels can be also set."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c { name: 'Germany' })\nSET c:Place:Area\nRETURN labels(c);\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'+--------------------------------------+\n| labels(c)                            |\n+--------------------------------------+\n| ["Country", "Land", "Place", "Area"] |\n+--------------------------------------+\n')),(0,p.kt)("h2",{id:"4-update-a-property"},"4. Update a property"),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," clause can be used to update the value or type of a property on a node or relationship."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c.population = 'not available'\nRETURN c.population;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"+---------------+\n| c.population  |\n+---------------+\n| not available |\n+---------------+\n")),(0,p.kt)("h2",{id:"5-remove-a-property"},"5. Remove a property"),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," clause can be used to remove the value of a property on a node or relationship by setting it to ",(0,p.kt)("inlineCode",{parentName:"p"},"NULL"),". "),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c.population = NULL\nRETURN c.population;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"+--------------+\n| c.population |\n+--------------+\n| Null         |\n+--------------+\n")),(0,p.kt)("h2",{id:"6-copy-all-properties"},"6. Copy all properties"),(0,p.kt)("p",null,"If ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," is used to copy the properties of one node/relationship to another, all the properties of the latter will be removed and replaced with the new ones."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country { name: 'Germany' }), (c2:Country { name: 'France' })\nSET c2 = c1\nRETURN c2, c1;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'+----------------------------------------------------------------------------+----------------------------------------------------------------------------+\n| c2                                                                         | c1                                                                         |\n+----------------------------------------------------------------------------+----------------------------------------------------------------------------+\n| (:Country {continent: "Europe", language: "German", name: "Germany"})      | (:Country:Land {continent: "Europe", language: "German", name: "Germany"}) |\n+----------------------------------------------------------------------------+----------------------------------------------------------------------------+\n')),(0,p.kt)("h2",{id:"7-replace-all-properties-using-map"},"7. Replace all properties using map"),(0,p.kt)("p",null,"If ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," is used with the property replacement operator ",(0,p.kt)("inlineCode",{parentName:"p"},"="),", all the properties in the map that are on the node or relationship will be updated.\nThe properties that are not on the node or relationship but are in the map will be added. The properties that are not in the map will be removed. "),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c = { name: 'Germany', population: '85000000'}\nRETURN c;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'+------------------------------------------------------+\n| c                                                    |\n+------------------------------------------------------+\n| (:Country {name: "Germany", population: "85000000"}) |\n+------------------------------------------------------+\n')),(0,p.kt)("p",null,"If an empty map is used, all the properties of a node or relationship will be set to ",(0,p.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c = { }\nRETURN c;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"+------------+\n| c          |\n+------------+\n| (:Country) |\n+------------+\n")),(0,p.kt)("h2",{id:"8-update-all-properties-using-map"},"8. Update all properties using map"),(0,p.kt)("p",null,"If ",(0,p.kt)("inlineCode",{parentName:"p"},"SET")," is used with the property mutation operator ",(0,p.kt)("inlineCode",{parentName:"p"},"+="),", all the properties in the map that are on the node or relationship will be updated.\nThe properties that are not on the node or relationship but are in the map will be added. Properties that are not present in the map will be left as is. "),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'Germany' })\nSET c += { name: 'Germany', population: '85000000'}\nRETURN c;\n")),(0,p.kt)("p",null,"Output:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'+-----------------------------------------------------------------------------------------------+\n| c                                                                                             |\n+-----------------------------------------------------------------------------------------------+\n| (:Country {continent: "Europe", language: "German", name: "Germany", population: "85000000"}) |\n+-----------------------------------------------------------------------------------------------+\n')),(0,p.kt)("h2",{id:"data-set-queries"},"Data set Queries"),(0,p.kt)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our data set locally by executing the following query block."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country { name: 'Germany', language: 'German', continent: 'Europe', population: 83000000 });\nCREATE (c2:Country { name: 'France', language: 'French', continent: 'Europe', population: 67000000 });\nCREATE (c3:Country { name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000 });\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'John' })-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'Harry' })-[:LIVING_IN { date_of_start: 2013 }]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH { date_of_start: 2011 }]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH { date_of_start: 2012 }]-(:Person { name: 'Anna' })-[:FRIENDS_WITH { date_of_start: 2014 }]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN { date_of_start: 2014 }]-(p)-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}c.isMDXComponent=!0}}]);