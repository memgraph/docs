"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82129],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>g});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),i=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=i(e.components);return n.createElement(l.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=i(t),g=a,f=u["".concat(l,".").concat(g)]||u[g]||m[g]||o;return t?n.createElement(f,p(p({ref:r},c),{},{components:t})):n.createElement(f,p({ref:r},c))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=u;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,p[1]=s;for(var i=2;i<o;i++)p[i]=t[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1156:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=t(87462),a=(t(67294),t(3905));const o={sidebar_label:"graph_transporter",title:"gqlalchemy.transformations.export.graph_transporter"},p=void 0,s={unversionedId:"reference/transformations/export/graph_transporter",id:"reference/transformations/export/graph_transporter",title:"gqlalchemy.transformations.export.graph_transporter",description:"GraphTransporter Objects",source:"@site/gqlalchemy/reference/transformations/export/graph_transporter.md",sourceDirName:"reference/transformations/export",slug:"/reference/transformations/export/graph_transporter",permalink:"/docs/gqlalchemy/reference/transformations/export/graph_transporter",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/transformations/export/graph_transporter.md",tags:[],version:"current",frontMatter:{sidebar_label:"graph_transporter",title:"gqlalchemy.transformations.export.graph_transporter"},sidebar:"gqlalchemy",previous:{title:"memgraph_query_builder",permalink:"/docs/gqlalchemy/reference/query_builders/memgraph_query_builder"},next:{title:"transporter",permalink:"/docs/gqlalchemy/reference/transformations/export/transporter"}},l={},i=[{value:"GraphTransporter Objects",id:"graphtransporter-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"export",id:"export",level:4}],c={toc:i};function m(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"graphtransporter-objects"},"GraphTransporter Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class GraphTransporter(Transporter)\n")),(0,a.kt)("p",null,"Here is a possible example for using this module:\n",">",">",">"," transporter = GraphTransporter(",'"',"dgl",'"',")\ngraph = transporter.export()"),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(graph_type: str,\n             host: str = mg_consts.MG_HOST,\n             port: int = mg_consts.MG_PORT,\n             username: str = mg_consts.MG_USERNAME,\n             password: str = mg_consts.MG_PASSWORD,\n             encrypted: bool = mg_consts.MG_ENCRYPTED,\n             client_name: str = mg_consts.MG_CLIENT_NAME,\n             lazy: bool = mg_consts.MG_LAZY) -> None\n")),(0,a.kt)("p",null,"Initializes GraphTransporter. It is used for converting Memgraph graph to the specific graph type offered by some Python package (PyG, DGL, NX...)\nHere is a possible example for using this module:\n",">",">",">"," transporter = GraphTransporter(",'"',"dgl",'"',")\ngraph = transporter.export()"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graph_type")," - dgl, pyg or nx")),(0,a.kt)("h4",{id:"export"},"export"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def export()\n")),(0,a.kt)("p",null,"Creates graph instance for the wanted export option."))}m.isMDXComponent=!0}}]);