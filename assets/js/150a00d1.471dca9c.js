(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{345:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,m=s["".concat(l,".").concat(d)]||s[d]||u[d]||i;return n?r.a.createElement(m,c(c({ref:t},p),{},{components:n})):r.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var p=2;p<i;p++)l[p]=n[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(8),i=(n(0),n(345)),l={id:"where",title:"WHERE clause",sidebar_label:"WHERE"},c={unversionedId:"clauses/where",id:"clauses/where",isDocsHomePage:!1,title:"WHERE clause",description:"WHERE isn't usually considered a standalone clause but rather a part of the MATCH, OPTIONAL MATCH and WITH clauses.",source:"@site/cypher-manual/clauses/where.md",slug:"/clauses/where",permalink:"/cypher-manual/clauses/where",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/where.md",version:"current",sidebar_label:"WHERE",sidebar:"cypher_manual",previous:{title:"UNWIND clause",permalink:"/cypher-manual/clauses/unwind"},next:{title:"WITH clause",permalink:"/cypher-manual/clauses/with"}},o=[{value:"Data Set",id:"data-set",children:[]},{value:"1. Basic Usage",id:"1-basic-usage",children:[{value:"1.1 Boolean Operators",id:"11-boolean-operators",children:[]},{value:"1.2 Inequality Operators Operators",id:"12-inequality-operators-operators",children:[]},{value:"1.3 Filter with node labels",id:"13-filter-with-node-labels",children:[]},{value:"1.4 Filter with node properties",id:"14-filter-with-node-properties",children:[]},{value:"1.5 Filter with relationship properties",id:"15-filter-with-relationship-properties",children:[]},{value:"1.6 Check if property is not null",id:"16-check-if-property-is-not-null",children:[]}]},{value:"2. String matching",id:"2-string-matching",children:[]},{value:"3. Regular expressions",id:"3-regular-expressions",children:[]},{value:"Data set Queries",id:"data-set-queries",children:[]}],p={toc:o};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," isn't usually considered a standalone clause but rather a part of the ",Object(i.b)("inlineCode",{parentName:"p"},"MATCH"),", ",Object(i.b)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," and ",Object(i.b)("inlineCode",{parentName:"p"},"WITH")," clauses."),Object(i.b)("p",null,"The difference when using ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," with these clauses is that it only filter the results in the case of the ",Object(i.b)("inlineCode",{parentName:"p"},"WITH")," clause, while it adds constraints to the patterns described in the case of ",Object(i.b)("inlineCode",{parentName:"p"},"MATCH")," and ",Object(i.b)("inlineCode",{parentName:"p"},"OPTIONAL MATCH"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," is part of the directly preceding ",Object(i.b)("inlineCode",{parentName:"p"},"MATCH")," or ",Object(i.b)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause and should always be used like that to avoid problems with performance or results."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#1-basic-usage"},"Basic usage"),Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#11-boolean-operators"},"Boolean Operators")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#12-inequality-operators-operators"},"Inequality Operators Operators")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#13-filter-with-node-labels"},"Filter with node labels")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#14-filter-with-node-properties"},"Filter with node properties")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#15-filter-with-relationship-properties"},"Filter with relationship properties")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#16-check-if-property-is-not-null"},"Check if property is not null")))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#2-string-matching"},"String matching")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"#3-regular-expressions"},"Regular Expressions"))),Object(i.b)("h2",{id:"data-set"},"Data Set"),Object(i.b)("p",null,"The following examples are executed with this data set. You can create this data set\nlocally by executing the queries at the end of the page: ",Object(i.b)("a",{parentName:"p",href:"#data-set-queries"},"Data Set"),"."),Object(i.b)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),Object(i.b)("h2",{id:"1-basic-usage"},"1. Basic Usage"),Object(i.b)("h3",{id:"11-boolean-operators"},"1.1 Boolean Operators"),Object(i.b)("p",null,"Standard boolean operators like ",Object(i.b)("inlineCode",{parentName:"p"},"NOT"),", ",Object(i.b)("inlineCode",{parentName:"p"},"AND"),", ",Object(i.b)("inlineCode",{parentName:"p"},"OR")," and ",Object(i.b)("inlineCode",{parentName:"p"},"XOR")," can be used."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.language = 'English' AND  c.continent = 'Europe'\nRETURN c.name;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"+----------------+\n| c.name         |\n+----------------+\n| United Kingdom |\n+----------------+\n")),Object(i.b)("h3",{id:"12-inequality-operators-operators"},"1.2 Inequality Operators Operators"),Object(i.b)("p",null,"Standard inequality operators like ",Object(i.b)("inlineCode",{parentName:"p"},"<"),", ",Object(i.b)("inlineCode",{parentName:"p"},"<="),", ",Object(i.b)("inlineCode",{parentName:"p"},">")," and ",Object(i.b)("inlineCode",{parentName:"p"},">=")," can be used."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE (c.population > 80000000)\nRETURN c.name;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"+---------+\n| c.name  |\n+---------+\n| Germany |\n+---------+\n")),Object(i.b)("h3",{id:"13-filter-with-node-labels"},"1.3 Filter with node labels"),Object(i.b)("p",null,"Nodes can be filtered by their label using the ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," clause instead of specifying it directly in the ",Object(i.b)("inlineCode",{parentName:"p"},"MATCH")," clause."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c)\nWHERE c:Country\nRETURN c.name;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"+----------------+\n| c.name         |\n+----------------+\n| Germany        |\n| France         |\n| United Kingdom |\n+----------------+\n")),Object(i.b)("h3",{id:"14-filter-with-node-properties"},"1.4 Filter with node properties"),Object(i.b)("p",null,"Just as labels, node properties can be used in the WHERE clause to filter nodes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.population < 70000000\nRETURN c.name;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"+----------------+\n| c.name         |\n+----------------+\n| France         |\n| United Kingdom |\n+----------------+\n")),Object(i.b)("h3",{id:"15-filter-with-relationship-properties"},"1.5 Filter with relationship properties"),Object(i.b)("p",null,"Just as with node properties, relationship properties can be used as filters."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (:Country {name: 'United Kingdom'})-[r]-(p)\nWHERE r.date_of_start = 2014\nRETURN p;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'+---------------------------+\n| p                         |\n+---------------------------+\n| (:Person {name: "Harry"}) |\n| (:Person {name: "Anna"})  |\n+---------------------------+\n')),Object(i.b)("h3",{id:"16-check-if-property-is-not-null"},"1.6 Check if property is not null"),Object(i.b)("p",null,"To check if a node or relationship property exists use the ",Object(i.b)("inlineCode",{parentName:"p"},"IS NOT NULL")," option."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.name = 'United Kingdom' AND c.population IS NOT NULL\nRETURN c.name, c.population;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"+----------------+----------------+\n| c.name         | c.population   |\n+----------------+----------------+\n| United Kingdom | 66000000       |\n+----------------+----------------+\n")),Object(i.b)("h2",{id:"2-string-matching"},"2. String matching"),Object(i.b)("p",null,"Apart from comparison and concatenation operators openCypher provides special\nstring operators for easier matching of substrings:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Operator"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"a STARTS WITH b")),Object(i.b)("td",{parentName:"tr",align:null},"Returns true if the prefix of string a is equal to string b.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"a ENDS WITH b")),Object(i.b)("td",{parentName:"tr",align:null},"Returns true if the suffix of string a is equal to string b.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"a CONTAINS b")),Object(i.b)("td",{parentName:"tr",align:null},"Returns true if some substring of string a is equal to string b.")))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country)\nWHERE c.name STARTS WITH 'G' AND NOT c.name CONTAINS 't'\nRETURN c.name;\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"+---------+\n| c.name  |\n+---------+\n| Germany |\n+---------+\n")),Object(i.b)("h2",{id:"3-regular-expressions"},"3. Regular expressions"),Object(i.b)("p",null,"Inside ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," clause, you can use regular expressions for text filtering. To\nuse a regular expression, you need to use the ",Object(i.b)("inlineCode",{parentName:"p"},"=~")," operator."),Object(i.b)("p",null,"For example, finding all ",Object(i.b)("inlineCode",{parentName:"p"},"Person")," nodes which have a name ending with ",Object(i.b)("inlineCode",{parentName:"p"},"a"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n :Person) WHERE n.name =~ ".*a$" RETURN n;\n')),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'+--------------------------+\n| n                        |\n+--------------------------+\n| (:Person {name: "Anna"}) |\n+--------------------------+\n')),Object(i.b)("p",null,"The regular expression syntax is based on the modified ECMAScript regular\nexpression grammar. The ECMAScript grammar can be found\n",Object(i.b)("a",{parentName:"p",href:"http://ecma-international.org/ecma-262/5.1/#sec-15.10"},"here"),", while the\nmodifications are described in ",Object(i.b)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/regex/ecmascript"},"this\ndocument"),"."),Object(i.b)("h2",{id:"data-set-queries"},"Data set Queries"),Object(i.b)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our data set locally by executing the following query block."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country { name: 'Germany', language: 'German', continent: 'Europe', population: 83000000 });\nCREATE (c2:Country { name: 'France', language: 'French', continent: 'Europe', population: 67000000 });\nCREATE (c3:Country { name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000 });\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'John' })-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'Harry' })-[:LIVING_IN { date_of_start: 2013 }]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH { date_of_start: 2011 }]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH { date_of_start: 2012 }]-(:Person { name: 'Anna' })-[:FRIENDS_WITH { date_of_start: 2014 }]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN { date_of_start: 2014 }]-(p)-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}b.isMDXComponent=!0}}]);