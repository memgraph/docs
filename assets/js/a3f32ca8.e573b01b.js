"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3392],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=s(t),m=i,d=f["".concat(p,".").concat(m)]||f[m]||u[m]||a;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},21822:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return f}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],l={id:"differences",title:"Differences",sidebar_label:"Differences"},p=void 0,s={unversionedId:"differences",id:"differences",isDocsHomePage:!1,title:"Differences",description:"Although we try to implement openCypher query language as closely to the",source:"@site/cypher-manual/differences.md",sourceDirName:".",slug:"/differences",permalink:"/cypher-manual/differences",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/differences.md",version:"current",frontMatter:{id:"differences",title:"Differences",sidebar_label:"Differences"},sidebar:"cypher_manual",previous:{title:"Other features",permalink:"/cypher-manual/other-features"}},c=[{value:"Unicode codepoints in string literals",id:"unicode-codepoints-in-string-literals",children:[]},{value:"Difference from Neo4j&#39;s Cypher implementation",id:"difference-from-neo4js-cypher-implementation",children:[{value:"Unsupported constructs",id:"unsupported-constructs",children:[]},{value:"Unsupported functions",id:"unsupported-functions",children:[]}]}],u={toc:c};function f(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Although we try to implement ",(0,a.kt)("a",{parentName:"p",href:"https://www.opencypher.org/"},"openCypher")," query language as closely to the\nlanguage reference as possible, we had to make some changes to enhance the\nuser experience."),(0,a.kt)("h2",{id:"unicode-codepoints-in-string-literals"},"Unicode codepoints in string literals"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"\\u")," followed by 4 hex digits in string literals for UTF-16 codepoint and\n",(0,a.kt)("inlineCode",{parentName:"p"},"\\U")," with 8 hex digits for UTF-32 codepoint in Memgraph."),(0,a.kt)("h2",{id:"difference-from-neo4js-cypher-implementation"},"Difference from Neo4j's Cypher implementation"),(0,a.kt)("p",null,"The openCypher initiative stems from Neo4j's Cypher query language. Following is a list\nof most important differences between Neo's Cypher and Memgraph's openCypher implementation,\nfor users that are already familiar with Neo4j. There might be other differences not documented\nhere (especially subtle semantic ones)."),(0,a.kt)("h3",{id:"unsupported-constructs"},"Unsupported constructs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"FOREACH")," language construct for performing an operation on every list element."),(0,a.kt)("li",{parentName:"ul"},"Stored procedures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shortestPath")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"allShortestPaths")," functions. ",(0,a.kt)("inlineCode",{parentName:"li"},"shortestPath")," can be expressed using\nMemgraph's breadth-first expansion syntax."),(0,a.kt)("li",{parentName:"ul"},"Patterns in expressions. For example, Memgraph doesn't support ",(0,a.kt)("inlineCode",{parentName:"li"},"size((n)--\x3e())"),". Most of the time\nthe same functionalities can be expressed differently in Memgraph using ",(0,a.kt)("inlineCode",{parentName:"li"},"OPTIONAL")," expansions,\nfunction calls etc."),(0,a.kt)("li",{parentName:"ul"},"Map projections such as ",(0,a.kt)("inlineCode",{parentName:"li"},"MATCH (n) RETURN n {.property1, .property2}"),".")),(0,a.kt)("h3",{id:"unsupported-functions"},"Unsupported functions"),(0,a.kt)("p",null,"General purpose functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exists(n.property)")," - This can be expressed using ",(0,a.kt)("inlineCode",{parentName:"li"},"n.property IS NOT NULL"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"length()")," is named ",(0,a.kt)("inlineCode",{parentName:"li"},"size()")," in Memgraph.")),(0,a.kt)("p",null,"Aggregation functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"count(DISTINCT variable)")," - This can be expressed using ",(0,a.kt)("inlineCode",{parentName:"li"},"WITH DISTINCT variable RETURN count(variable)"),".")),(0,a.kt)("p",null,"Mathematical functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"percentileDisc()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stDev()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"point()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"distance()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"degrees()"))),(0,a.kt)("p",null,"List functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"none()"))))}f.isMDXComponent=!0}}]);