"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21640],{3905:function(e,n,l){l.d(n,{Zo:function(){return d},kt:function(){return N}});var t=l(67294);function a(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function i(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,t)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?i(Object(l),!0).forEach((function(n){a(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function o(e,n){if(null==e)return{};var l,t,a=function(e,n){if(null==e)return{};var l,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)l=i[t],n.indexOf(l)>=0||(a[l]=e[l]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)l=i[t],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var u=t.createContext({}),p=function(e){var n=t.useContext(u),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},d=function(e){var n=p(e.components);return t.createElement(u.Provider,{value:n},e.children)},k={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var l=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(l),N=a,s=m["".concat(u,".").concat(N)]||m[N]||k[N]||i;return l?t.createElement(s,r(r({ref:n},d),{},{components:l})):t.createElement(s,r({ref:n},d))}));function N(e,n){var l=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=l.length,r=new Array(i);r[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<i;p++)r[p]=l[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,l)}m.displayName="MDXCreateElement"},1169:function(e,n,l){l.r(n),l.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return N},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return k}});var t=l(87462),a=l(63366),i=(l(67294),l(3905)),r=["components"],o={id:"gss-functions",title:"Graph Style Script functions",sidebar_label:"GSS functions"},u=void 0,p={unversionedId:"style-script/gss-functions",id:"style-script/gss-functions",title:"Graph Style Script functions",description:"Built-in functions",source:"@site/lab/style-script/gss-functions.md",sourceDirName:"style-script",slug:"/style-script/gss-functions",permalink:"/docs/memgraph-lab/style-script/gss-functions",editUrl:"https://github.com/memgraph/docs/tree/master/lab/style-script/gss-functions.md",tags:[],version:"current",frontMatter:{id:"gss-functions",title:"Graph Style Script functions",sidebar_label:"GSS functions"},sidebar:"lab",previous:{title:"GSS reference guide",permalink:"/docs/memgraph-lab/style-script/reference-guide"},next:{title:"NodeStyle directive properties",permalink:"/docs/memgraph-lab/style-script/gss-nodestyle-directive"}},d={},k=[{value:"Built-in functions",id:"built-in-functions",level:2},{value:"<code>Add(value1, [value2, value3,...])</code>",id:"addvalue1-value2-value3",level:3},{value:"<code>And(value1, [value2, value3,...])</code>",id:"andvalue1-value2-value3",level:3},{value:"<code>Array([value1, value2,...])</code>",id:"arrayvalue1-value2",level:3},{value:"<code>AsNumber(value)</code>",id:"asnumbervalue",level:3},{value:"<code>AsText(value)</code>",id:"astextvalue",level:3},{value:"<code>Blue(color)</code>",id:"bluecolor",level:3},{value:"<code>Contains?(array, value)</code>",id:"containsarray-value",level:3},{value:"<code>Concat(string1, [string2, string3,...])</code>",id:"concatstring1-string2-string3",level:3},{value:"<code>Darker(color)</code>",id:"darkercolor",level:3},{value:"<code>Define(name, value)</code>",id:"definename-value",level:3},{value:"<code>Div(value1, value2)</code>",id:"divvalue1-value2",level:3},{value:"<code>Equals?(value1, value2)</code>",id:"equalsvalue1-value2",level:3},{value:"<code>Exp(value)</code>",id:"expvalue",level:3},{value:"<code>Format(formatString, [val1, val2,...])</code>",id:"formatformatstring-val1-val2",level:3},{value:"<code>Function([arg1, arg2,...], body)</code>",id:"functionarg1-arg2-body",level:3},{value:"<code>Get(obj, key)</code>",id:"getobj-key",level:3},{value:"<code>Greater?(value1, value2)</code>",id:"greatervalue1-value2",level:3},{value:"<code>Green(color)</code>",id:"greencolor",level:3},{value:"<code>HasLabel?(node, label)</code>",id:"haslabelnode-label",level:3},{value:"<code>HasProperty?(nodeOrEdge, propertyName)</code>",id:"haspropertynodeoredge-propertyname",level:3},{value:"<code>Identity(node)</code>",id:"identitynode",level:3},{value:"<code>If(condition, than, else)</code>",id:"ifcondition-than-else",level:3},{value:"<code>Join (array, delimiter)</code>",id:"join-array-delimiter",level:3},{value:"<code>Labels(node)</code>",id:"labelsnode",level:3},{value:"<code>Less?(value1, value2)</code>",id:"lessvalue1-value2",level:3},{value:"<code>Lighter(color)</code>",id:"lightercolor",level:3},{value:"<code>Like?(text, regex)</code>",id:"liketext-regex",level:3},{value:"<code>Log(value)</code>",id:"logvalue",level:3},{value:"<code>Log10(value)</code>",id:"log10value",level:3},{value:"<code>LowerCase(string)</code>",id:"lowercasestring",level:3},{value:"<code>Mix(color1, color2)</code>",id:"mixcolor1-color2",level:3},{value:"<code>Mul(value1, [value2, value3,...])</code>",id:"mulvalue1-value2-value3",level:3},{value:"<code>Not(value)</code>",id:"notvalue",level:3},{value:"<code>Or(value1, [value2, value3,...])</code>",id:"orvalue1-value2-value3",level:3},{value:"<code>Property(nodeOrEdge, propertyName)</code>",id:"propertynodeoredge-propertyname",level:3},{value:"<code>Random()</code>",id:"random",level:3},{value:"<code>RandomElement(array)</code>",id:"randomelementarray",level:3},{value:"<code>RandomInteger(bound)</code>",id:"randomintegerbound",level:3},{value:"<code>Red(color)</code>",id:"redcolor",level:3},{value:"<code>RGB(red, green, blue)</code>",id:"rgbred-green-blue",level:3},{value:"<code>Size(value)</code>",id:"sizevalue",level:3},{value:"<code>Sqrt(value)</code>",id:"sqrtvalue",level:3},{value:"<code>Sub(value1, value2)</code>",id:"subvalue1-value2",level:3},{value:"<code>Type(edge)</code>",id:"typeedge",level:3},{value:"<code>TypeOf(value)</code>",id:"typeofvalue",level:3},{value:"<code>UpperCase(string)</code>",id:"uppercasestring",level:3}],m={toc:k};function N(e){var n=e.components,l=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"built-in-functions"},"Built-in functions"),(0,i.kt)("p",null,"Graph Style Script has a large number of built-in functions. With these\nfunctions, you can achieve the right style for your graph."),(0,i.kt)("h3",{id:"addvalue1-value2-value3"},(0,i.kt)("inlineCode",{parentName:"h3"},"Add(value1, [value2, value3,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the sum of given values."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Add(10, Property(node, "age"))')," will give node.age + 10 if age is defined (as\na number).")),(0,i.kt)("h3",{id:"andvalue1-value2-value3"},(0,i.kt)("inlineCode",{parentName:"h3"},"And(value1, [value2, value3,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if all of the given values are ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),". Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise.\nExpressions after the first expression that evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," are not\nevaluated."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'And(HasProperty?(node, "a"), HasProperty?(node, "b"))')," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if\nnode has properties ",(0,i.kt)("inlineCode",{parentName:"li"},"a")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"b"),".")),(0,i.kt)("h3",{id:"arrayvalue1-value2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Array([value1, value2,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array"))),(0,i.kt)("p",null,"Creates and returns an array of given values."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Array("Alfa", "Bravo", "Charlie", "Delta", "Echo")'))),(0,i.kt)("h3",{id:"asnumbervalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"AsNumber(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Parses the given string and returns a number. The string should contain only one\nnumber in base 10 and nothing else."),(0,i.kt)("p",null,"Example: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'AsNumber("8")')," will return number 8.")),(0,i.kt)("h3",{id:"astextvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"AsText(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Example: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'AsText(Property(node, "age"))')," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"node.age")," as string.")),(0,i.kt)("p",null,"Returns a textual representation of a given value."),(0,i.kt)("h3",{id:"bluecolor"},(0,i.kt)("inlineCode",{parentName:"h3"},"Blue(color)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the blue component of a given color. The value will be between 0 and 255\n(both inclusive)."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Blue(mediumseagreen)")," will return value 113."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Blue(#6a0dad)")," will return value 173.")),(0,i.kt)("h3",{id:"containsarray-value"},(0,i.kt)("inlineCode",{parentName:"h3"},"Contains?(array, value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"array"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Array")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")," ")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"array")," contains ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Contains?(Array(2,7,8,9),2)")," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,i.kt)("h3",{id:"concatstring1-string2-string3"},(0,i.kt)("inlineCode",{parentName:"h3"},"Concat(string1, [string2, string3,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Concatenates given strings."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Concat("City", " ", "of", " ", "London")')," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"City of London"),".")),(0,i.kt)("h3",{id:"darkercolor"},(0,i.kt)("inlineCode",{parentName:"h3"},"Darker(color)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Color"))),(0,i.kt)("p",null,"Returns a darker version of the given color."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color-hover: Darker(#dd2222)")," will make the hover event color darker.")),(0,i.kt)("h3",{id:"definename-value"},(0,i.kt)("inlineCode",{parentName:"h3"},"Define(name, value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"))),(0,i.kt)("p",null,"Binds the given value to the given name. Names cannot be redefined."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Define(city, "London")')," will set the value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"city")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"London"),".")),(0,i.kt)("h3",{id:"divvalue1-value2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Div(value1, value2)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value2"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"value1")," divided by ",(0,i.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Div(Property(node, "population"), 2)')," will divide ",(0,i.kt)("inlineCode",{parentName:"li"},"node.population")," with 2 if\npopulation is defined (as a number).")),(0,i.kt)("h3",{id:"equalsvalue1-value2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Equals?(value1, value2)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"val1"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"val2"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if given values are equal, ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise. ",(0,i.kt)("inlineCode",{parentName:"p"},"Number"),"s,\n",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),"s are compared by value, while objects of all other types\nare compared by identity."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Equals?(Property(edge, "category"),"Food")')," checks if ",(0,i.kt)("inlineCode",{parentName:"li"},"edge.category"),' equals\nto text "Food".')),(0,i.kt)("h3",{id:"expvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"Exp(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns 2.71828... raised to the power ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Exp(2)")," will return the number 7.38905609893  ")),(0,i.kt)("h3",{id:"formatformatstring-val1-val2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Format(formatString, [val1, val2,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"formatString"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"val1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"val2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: `String``")),(0,i.kt)("p",null,"Substitutes occurrences of curly brace pairs in ",(0,i.kt)("inlineCode",{parentName:"p"},"formatString")," with textual\nrepresentations of given values. The first occurrence is substituted with the\nfirst value, the second occurrence with the second value and so on."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Format("{}, {}!", "Hello", "World")\n  -> Hello, World!\n')),(0,i.kt)("p",null,"Text inside curly braces is ignored."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Format("{name}: {age}", "Antun", 23)\n  -> Antun: 23\n')),(0,i.kt)("h3",{id:"functionarg1-arg2-body"},(0,i.kt)("inlineCode",{parentName:"h3"},"Function([arg1, arg2,...], body)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arg1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"arg2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"body"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Function"))),(0,i.kt)("p",null,"Creates a function. ",(0,i.kt)("inlineCode",{parentName:"p"},"body")," is the expression to evaluate when the function is\ncalled. All arguments except ",(0,i.kt)("inlineCode",{parentName:"p"},"body")," are argument names of the function to\ncreate. When the created function is called names ",(0,i.kt)("inlineCode",{parentName:"p"},"arg1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"arg2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"...")," are\nbound to function arguments and available in the ",(0,i.kt)("inlineCode",{parentName:"p"},"body")," expression. This\nfunction is most useful in combination with ",(0,i.kt)("inlineCode",{parentName:"p"},"Define"),"."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Define(makeGreeting, Function(firstName,\n  Format("Hello, {}!", firstName)))\nmakeGreeting("World")\n  -> Hello, World!\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Define(pow, Function(x, n,\n  If(Equals?(n, 1),\n    x,\n    Mul(x, pow(x, Sub(n, 1))))))\npow(2, 10)\n  -> 1024\n")),(0,i.kt)("h3",{id:"getobj-key"},(0,i.kt)("inlineCode",{parentName:"h3"},"Get(obj, key)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"obj"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Array")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"obj")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"Array"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"obj")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"obj")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Array"),", returns the element with index ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," of array ",(0,i.kt)("inlineCode",{parentName:"p"},"obj"),"\n(indexing is zero based). If ",(0,i.kt)("inlineCode",{parentName:"p"},"obj")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Dictionary")," returns the value for key\n",(0,i.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Get(Array(3,6,7,3), 2)")," returns number 7."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Get(Property(node, "map"), "year") will get the property '),"year` from the map\nof node properties. ")),(0,i.kt)("h3",{id:"greatervalue1-value2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Greater?(value1, value2)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value2"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"value1")," is greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Greater?(Size(Labels(node)), 0)"))),(0,i.kt)("h3",{id:"greencolor"},(0,i.kt)("inlineCode",{parentName:"h3"},"Green(color)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the green component of a given color. The value will be between 0 and\n255 (both inclusive)."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Green(mediumseagreen)")," will return value 179."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Green(#6a0dad)")," will return value 13.")),(0,i.kt)("h3",{id:"haslabelnode-label"},(0,i.kt)("inlineCode",{parentName:"h3"},"HasLabel?(node, label)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if given graph node ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," has label ",(0,i.kt)("inlineCode",{parentName:"p"},"label"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'HasLabel?(node, "Category")')," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if a node has a label with\nthe name ",(0,i.kt)("inlineCode",{parentName:"li"},"Category"),".")),(0,i.kt)("h3",{id:"haspropertynodeoredge-propertyname"},(0,i.kt)("inlineCode",{parentName:"h3"},"HasProperty?(nodeOrEdge, propertyName)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nodeOrEdge"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"propertyName"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if given graph node or graph edge ",(0,i.kt)("inlineCode",{parentName:"p"},"nodeOrEdge")," has property\n",(0,i.kt)("inlineCode",{parentName:"p"},"propertyName"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'HasProperty?(node, "City")')," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if a node has a property with\nthe name ",(0,i.kt)("inlineCode",{parentName:"li"},"City"),".")),(0,i.kt)("h3",{id:"identitynode"},(0,i.kt)("inlineCode",{parentName:"h3"},"Identity(node)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the id of the given graph node."),(0,i.kt)("p",null," Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label: AsText(Identity(node))")," sets the label to be the node ID. ")),(0,i.kt)("h3",{id:"ifcondition-than-else"},(0,i.kt)("inlineCode",{parentName:"h3"},"If(condition, than, else)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"condition"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"than"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"else"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"than"),", otherwise returns ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'label: If(HasProperty?(node, "name"), Property(node, "name"), "No name")'),"\nreturns the property ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," as label if the node has one, or ",(0,i.kt)("inlineCode",{parentName:"li"},"No name")," if the\nnode doesn't have it. ")),(0,i.kt)("h3",{id:"join-array-delimiter"},(0,i.kt)("inlineCode",{parentName:"h3"},"Join (array, delimiter)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"array"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Array")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delimiter"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Returns a new string by joining array elements with the delimiter."),(0,i.kt)("p",null,"Example:  "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'label: Join(Labels(node), ", ")')," creates a label which is a string made out\nof all the labels delimited with a comma. ")),(0,i.kt)("h3",{id:"labelsnode"},(0,i.kt)("inlineCode",{parentName:"h3"},"Labels(node)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array"))),(0,i.kt)("p",null,"Returns the array of labels of the given graph node."),(0,i.kt)("p",null,"Example: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label: Labels(node)")," sets the label to be a list of all the node's labels. ")),(0,i.kt)("h3",{id:"lessvalue1-value2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Less?(value1, value2)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value2"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"value1")," is less than ",(0,i.kt)("inlineCode",{parentName:"p"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Less?(Property(node, "age"),40)')," will return ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if given ",(0,i.kt)("inlineCode",{parentName:"li"},"node.age")," is\nless than 40.")),(0,i.kt)("h3",{id:"lightercolor"},(0,i.kt)("inlineCode",{parentName:"h3"},"Lighter(color)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Color"))),(0,i.kt)("p",null,"Returns a lighter version of the given color."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color-hover: Lighter(#dd2222)")," sets a lighter on hover event color.")),(0,i.kt)("h3",{id:"liketext-regex"},(0,i.kt)("inlineCode",{parentName:"h3"},"Like?(text, regex)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"text"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"regex"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if the text matches regex. The evaluation of the regex is done\nwith the Javascript function ",(0,i.kt)("inlineCode",{parentName:"p"},"RegExp.test(text)"),"."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Like?("Graph style script", "style")')," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"True")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Like?("Graph style script", "st.* script")')," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"True")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Like?("Graph style script", "^G")')," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"True")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Like?("Graph style script", "GRAPH?")')," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"False"))),(0,i.kt)("h3",{id:"logvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"Log(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the logarithm (to the base ",(0,i.kt)("inlineCode",{parentName:"p"},"e"),") of ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Log(Property(node, "sales"))'))),(0,i.kt)("h3",{id:"log10value"},(0,i.kt)("inlineCode",{parentName:"h3"},"Log10(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the logarithm (to the base 10) of ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Log10(Property(node, "sales"))'))),(0,i.kt)("h3",{id:"lowercasestring"},(0,i.kt)("inlineCode",{parentName:"h3"},"LowerCase(string)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Returns the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," converted to lower case."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'AsText(LowerCase(Property(node, "name")))')," will return node name in lower\ncase.")),(0,i.kt)("h3",{id:"mixcolor1-color2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Mix(color1, color2)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color1"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color2"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Color"))),(0,i.kt)("p",null,"Mixes given colors (performs linear interpolation)."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Mix(#1B5E20,orange)"))),(0,i.kt)("h3",{id:"mulvalue1-value2-value3"},(0,i.kt)("inlineCode",{parentName:"h3"},"Mul(value1, [value2, value3,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the product of given values."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Mul(2,10,3)")," returns 60 (2",(0,i.kt)("em",{parentName:"li"},"10"),"3).")),(0,i.kt)("h3",{id:"notvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"Not(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),", and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,i.kt)("p",null,"Example: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'@NodeStyle Not(HasProperty?(node, "count")) {...}')," will apply the defined\nstyles to the nodes without the ",(0,i.kt)("inlineCode",{parentName:"li"},"count")," property.")),(0,i.kt)("h3",{id:"orvalue1-value2-value3"},(0,i.kt)("inlineCode",{parentName:"h3"},"Or(value1, [value2, value3,...])")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"value3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if any of the given values is ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),". Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," otherwise.\nExpressions after the first expression that evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," are not\nevaluated."),(0,i.kt)("p",null,"Example: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Or(Less?(Property(node, "age"),20), Greater?(Property(node, "age"),40))'),"\nreturns ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if the node's ",(0,i.kt)("inlineCode",{parentName:"li"},"age")," property is either less than 20 or greater\nthan 40.")),(0,i.kt)("h3",{id:"propertynodeoredge-propertyname"},(0,i.kt)("inlineCode",{parentName:"h3"},"Property(nodeOrEdge, propertyName)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nodeOrEdge"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"propertyName"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: `Any``")),(0,i.kt)("p",null,"Returns the property with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"propertyName")," of given graph node or graph\nedge."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'label: AsText(Property(node, "name"))')," creates a label using the node's\n",(0,i.kt)("inlineCode",{parentName:"li"},"name")," property.")),(0,i.kt)("h3",{id:"random"},(0,i.kt)("inlineCode",{parentName:"h3"},"Random()")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns a random number between 0 (inclusive) and 1 (exclusive). All the\npossible numbers are equally likely to be returned."),(0,i.kt)("h3",{id:"randomelementarray"},(0,i.kt)("inlineCode",{parentName:"h3"},"RandomElement(array)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"array"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Array")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Random()"))),(0,i.kt)("p",null,"Returns a random element of the given array. All the elements are equally likely\nto be chosen."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RandomElement(Array(1,3,5,7,11,13))")," will return one of the array elements.")),(0,i.kt)("h3",{id:"randomintegerbound"},(0,i.kt)("inlineCode",{parentName:"h3"},"RandomInteger(bound)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bound"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns a random integer between 0 (inclusive) and ",(0,i.kt)("inlineCode",{parentName:"p"},"bound")," (exclusive). All the\npossible numbers are equally likely to be returned."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'RandomInteger(Property(node, "population"))')," will return a integer between 0\nand ",(0,i.kt)("inlineCode",{parentName:"li"},"node.population")," if population is defined (as a number).")),(0,i.kt)("h3",{id:"redcolor"},(0,i.kt)("inlineCode",{parentName:"h3"},"Red(color)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"color"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the red component of a given color. The value will be between 0 and 255\n(both inclusive)."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Red(mediumseagreen)")," will return value 60."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Red(#6a0dad)")," will return value 106.")),(0,i.kt)("h3",{id:"rgbred-green-blue"},(0,i.kt)("inlineCode",{parentName:"h3"},"RGB(red, green, blue)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"red"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"green"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blue"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Color"))),(0,i.kt)("p",null,"Creates a new color with given components."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RGB (128, 159, 255)")," will return the color that has value #809fff.")),(0,i.kt)("h3",{id:"sizevalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"Size(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Array"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Array")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Dictionary"),", returns its size. If ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," is\nof type ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", returns its length;"),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Size(Property(node, "name"))')," returns the size of the node's ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," property. ")),(0,i.kt)("h3",{id:"sqrtvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"Sqrt(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns the square root of ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Sqrt(Property(node, "surface"))')," will return the square root of a\n",(0,i.kt)("inlineCode",{parentName:"li"},"node.surface"),".")),(0,i.kt)("h3",{id:"subvalue1-value2"},(0,i.kt)("inlineCode",{parentName:"h3"},"Sub(value1, value2)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value2"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number"))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"value1")," minus ",(0,i.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Sub(Property(node, "age"),10)')," returns ",(0,i.kt)("inlineCode",{parentName:"li"},"node.age")," - 10 if age is defined (as\na number).")),(0,i.kt)("h3",{id:"typeedge"},(0,i.kt)("inlineCode",{parentName:"h3"},"Type(edge)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"edge"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Returns the type of the given graph edge."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label: Type(edge)")," sets the label to the relationship type.")),(0,i.kt)("h3",{id:"typeofvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"TypeOf(value)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Any")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Returns the type of the given value."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'TypeOf(Property(node, "name"))')," returns ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),".")),(0,i.kt)("h3",{id:"uppercasestring"},(0,i.kt)("inlineCode",{parentName:"h3"},"UpperCase(string)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"))),(0,i.kt)("p",null,"Returns the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," converted to upper case."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'AsText(UpperCase(Property(node, "name")))')," will return the node name in upper\ncase.")))}N.isMDXComponent=!0}}]);