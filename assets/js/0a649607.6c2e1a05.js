"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12470],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},14224:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>d,assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=(n(65488),n(85162),n(83523));const l={id:"graph-util",title:"graph_util",sidebar_label:"graph_util"},i=void 0,s={unversionedId:"query-modules/cpp/graph-util",id:"query-modules/cpp/graph-util",title:"graph_util",description:"docs-source",source:"@site/mage/query-modules/cpp/graph-util.md",sourceDirName:"query-modules/cpp",slug:"/query-modules/cpp/graph-util",permalink:"/docs/mage/query-modules/cpp/graph-util",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/cpp/graph-util.md",tags:[],version:"current",frontMatter:{id:"graph-util",title:"graph_util",sidebar_label:"graph_util"},sidebar:"mage",previous:{title:"graph_coloring",permalink:"/docs/mage/query-modules/python/graph-coloring"},next:{title:"igraphalg",permalink:"/docs/mage/query-modules/python/igraphalg"}},u={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:3},{value:"<code>ancestors(node)</code>",id:"ancestorsnode",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"<code>chain_nodes(nodes, edge_type)</code>",id:"chain_nodesnodes-edge_type",level:3},{value:"Input:",id:"input-1",level:4},{value:"Output:",id:"output-1",level:4},{value:"Usage:",id:"usage-1",level:4},{value:"<code>connect_nodes(nodes)</code>",id:"connect_nodesnodes",level:3},{value:"Input:",id:"input-2",level:4},{value:"Output:",id:"output-2",level:4},{value:"Usage:",id:"usage-2",level:4},{value:"<code>descendants(node)</code>",id:"descendantsnode",level:3},{value:"Input:",id:"input-3",level:4},{value:"Output:",id:"output-3",level:4},{value:"Usage:",id:"usage-3",level:4},{value:"<code>topological_sort()</code>",id:"topological_sort",level:3},{value:"Input:",id:"input-4",level:4},{value:"Output:",id:"output-4",level:4},{value:"Usage:",id:"usage-4",level:4}],d=e=>{let{children:t,color:n}=e;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},c={toc:p,Highlight:d};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/cpp/graph_util_module"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-graph_util-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Graph util")," is a collection of Memgraph's utility graph algorithms. The algorithms that are included in this module\nare the ones that may suit a developer's day-to-day job while prototyping new\nsolutions, with various graph manipulation tools to accelerate development. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Trait"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Module type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"module")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Implementation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"C++")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Graph direction")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"directed")),"/",(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"undirected")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Edge weights")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"unweighted")),"/",(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"weighted")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"sequential")))))),(0,r.kt)("h3",{id:"procedures"},"Procedures"),(0,r.kt)(o.ZP,{mdxType:"RunOnSubgraph"}),(0,r.kt)("h3",{id:"ancestorsnode"},(0,r.kt)("inlineCode",{parentName:"h3"},"ancestors(node)")),(0,r.kt)("p",null,"Find the ancestor nodes of the input node. Ancestor nodes are all the nodes from which\nthere exists a path to the input node."),(0,r.kt)("h4",{id:"input"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 node for which we want to find ancestors")),(0,r.kt)("h4",{id:"output"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ancestors: List[Vertex]")," \u27a1 List of ancestors from which a path to the source node exists")),(0,r.kt)("h4",{id:"usage"},"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n {id:1})\nCALL graph_util.ancestors(n)\nYIELD ancestors\nUNWIND ancestors AS ancestor\nRETURN ancestor;\n")),(0,r.kt)("h3",{id:"chain_nodesnodes-edge_type"},(0,r.kt)("inlineCode",{parentName:"h3"},"chain_nodes(nodes, edge_type)")),(0,r.kt)("p",null,"Creates a relationship between each of the neighboring nodes in the input list, ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes"),". Each of the relationships\ngets the edge type from the second input parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"edge_type"),"."),(0,r.kt)("h4",{id:"input-1"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nodes: List[Vertex]")," \u27a1 List of nodes between which we want to create corresponding relationships between them"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edge_type: String")," \u27a1 The name of the relationship that will be created between nodes.")),(0,r.kt)("h4",{id:"output-1"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connections: List[Edge]")," \u27a1 List of relationships that connect the nodes. Each node is connected with the node following it in the input list, using the relationship type specified as the second input parameter.")),(0,r.kt)("h4",{id:"usage-1"},"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n)\nWITH collect(n) AS nodes\nCALL graph_util.chain_nodes(nodes, "MY_EDGE")\nYIELD connections\nRETURN nodes, connections;\n')),(0,r.kt)("h3",{id:"connect_nodesnodes"},(0,r.kt)("inlineCode",{parentName:"h3"},"connect_nodes(nodes)")),(0,r.kt)("p",null,"Returns a list of relationships that connect the list of inputted nodes.\nTypically used to create a subgraph from returned nodes."),(0,r.kt)("h4",{id:"input-2"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nodes: List[Vertex]")," \u27a1 List of nodes for which we want to find corresponding connections, i.e., relationships between them")),(0,r.kt)("h4",{id:"output-2"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connections: List[Edge]")," \u27a1 List of relationships that connect the starting graph's input nodes")),(0,r.kt)("h4",{id:"usage-2"},"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n)\nWITH collect(n) AS nodes\nCALL graph_util.connect_nodes(nodes)\nYIELD connections\nRETURN nodes, connections;\n")),(0,r.kt)("h3",{id:"descendantsnode"},(0,r.kt)("inlineCode",{parentName:"h3"},"descendants(node)")),(0,r.kt)("p",null,"Find the descendant nodes of the input node. Descendant nodes are all the nodes to which\nthere exists a path from the input node."),(0,r.kt)("h4",{id:"input-3"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 node for which we want to find descendants")),(0,r.kt)("h4",{id:"output-3"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"descendants: List[Vertex]")," \u27a1 List of descendants to which a path from the source node exists")),(0,r.kt)("h4",{id:"usage-3"},"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n {id:1})\nCALL graph_util.descendants(n)\nYIELD descendants\nUNWIND descendants AS descendant\nRETURN descendant;\n")),(0,r.kt)("h3",{id:"topological_sort"},(0,r.kt)("inlineCode",{parentName:"h3"},"topological_sort()")),(0,r.kt)("p",null,"The topological sort algorithm takes a directed graph and returns an array of the nodes where each node appears before all the nodes it points to. The ordering of the nodes in the array is called a topological ordering."),(0,r.kt)("h4",{id:"input-4"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"there is no input to this graph. The sort is done either on the whole graph, or a graph projection.")),(0,r.kt)("h4",{id:"output-4"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sorted_nodes: List[Vertex]")," \u27a1 Node ordering in which each node appears before all nodes to which it points")),(0,r.kt)("h4",{id:"usage-4"},"Usage:"),(0,r.kt)("p",null,"Usage on the whole graph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL graph_util.topological_sort() YIELD sorted_nodes\nUNWIND sorted_nodes AS nodes\nRETURN nodes.name;\n")),(0,r.kt)("p",null,"Usage on a graph projection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH p=(sl:SomeLabel)-[*bfs]->(al:AnotherLabel)\nWITH project(p) AS graph\nCALL graph_util.topological_sort(graph) YIELD sorted_nodes\nUNWIND sorted_nodes AS nodes\nRETURN nodes.name;\n")))}h.isMDXComponent=!0},83523:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,r.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}l.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(87462),r=n(67294),o=n(86010),l=n(72389),i=n(67392),s=n(7094),u=n(12466);const p="tabList__CuJ",d="tabItem_LNqP";function c(e){var t;const{lazy:n,block:l,defaultValue:c,values:h,groupId:m,className:g}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=h??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:y}=(0,s.U)(),[w,E]=(0,r.useState)(v),_=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=m){const e=N[m];null!=e&&e!==w&&f.some((t=>t.value===e))&&E(e)}const C=e=>{const t=e.currentTarget,n=_.indexOf(t),a=f[n].value;a!==w&&(T(t),E(a),null!=m&&y(m,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;n=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;n=_[t]??_[_.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},g)},f.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>_.push(e),onKeyDown:O,onClick:C},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,r.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function h(e){const t=(0,l.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}}}]);