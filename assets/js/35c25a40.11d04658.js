"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78796],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(i,".").concat(d)]||c[d]||u[d]||l;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},91982:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>d,assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>i,metadata:()=>m,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),l=n(65488),o=n(85162),s=n(83523);const i={id:"set-cover",title:"set_cover",sidebar_label:"set_cover"},p=void 0,m={unversionedId:"query-modules/python/set-cover",id:"query-modules/python/set-cover",title:"set_cover",description:"docs-source",source:"@site/mage/query-modules/python/set-cover.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/set-cover",permalink:"/docs/mage/query-modules/python/set-cover",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/set-cover.md",tags:[],version:"current",frontMatter:{id:"set-cover",title:"set_cover",sidebar_label:"set_cover"},sidebar:"mage",previous:{title:"pagerank_online",permalink:"/docs/mage/query-modules/cpp/pagerank-online"},next:{title:"temporal_graph_networks",permalink:"/docs/mage/query-modules/python/temporal-graph-networks"}},u={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>cp_solve(element_vertexes, set_vertexes)</code>",id:"cp_solveelement_vertexes-set_vertexes",level:3},{value:"Input",id:"input",level:4},{value:"Output",id:"output",level:4},{value:"Usage",id:"usage",level:4},{value:"Example",id:"example",level:2},{value:"<code>greedy(context, element_vertexes, set_vertexes)</code>",id:"greedycontext-element_vertexes-set_vertexes",level:2},{value:"Input",id:"input-1",level:4},{value:"Output",id:"output-1",level:4},{value:"Usage",id:"usage-1",level:4}],d=e=>{let{children:t,color:n}=e;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},h={toc:c,Highlight:d};function g(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/set_cover.py"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-set_cover-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The Set Cover")," problem is one of the problems in graph theory that tries to solve the least possible set of sets that covers all elements inside those sets. Given a set of ",(0,r.kt)("em",{parentName:"p"},"n")," elements, and a collection of ",(0,r.kt)("em",{parentName:"p"},"m")," sets containing them, the algorithm tries to identify the ",(0,r.kt)("strong",{parentName:"p"},"smallest sub-collection")," of sets whose union equal to all the elements.\nIt is ",(0,r.kt)("em",{parentName:"p"},"NP-complete"),", however solvable with techniques such as constraint programming. The current algorithm uses ",(0,r.kt)("em",{parentName:"p"},"GEKKO")," optimizer as a constraint programming solver."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Trait"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Module type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"module")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Implementation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"Python")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Graph direction")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"undirected")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Edge weights")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"unweighted")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"sequential")))))),(0,r.kt)("h2",{id:"procedures"},"Procedures"),(0,r.kt)(s.ZP,{mdxType:"RunOnSubgraph"}),(0,r.kt)("h3",{id:"cp_solveelement_vertexes-set_vertexes"},(0,r.kt)("inlineCode",{parentName:"h3"},"cp_solve(element_vertexes, set_vertexes)")),(0,r.kt)("h4",{id:"input"},"Input"),(0,r.kt)("p",null,"The input itself represents an ",(0,r.kt)("em",{parentName:"p"},"element-set")," pair with each row of the lists."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"element_vertexes: List[Vertex]")," \u27a1 List of element nodes in pairs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set_vertexes: List[Vertex]")," \u27a1 List of set nodes in pairs")),(0,r.kt)("h4",{id:"output"},"Output"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"containing_set")," \u27a1 minimal set of sets in which all the elements are contained")),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL set_cover.cp_solve([(:Point), (:Point)], [(:Set), (:Set)])\nYIELD containing_set;\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(l.Z,{groupId:"example",defaultValue:"visualization",values:[{label:"Step 1: Input graph",value:"visualization"},{label:"Step 2: Cypher load commands",value:"cypher"},{label:"Step 3: Running command",value:"run"},{label:"Step 4: Results",value:"result"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"visualization",mdxType:"TabItem"},(0,r.kt)("img",{src:n(65961).Z})),(0,r.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (e:AnimalSpecies {name: 'Snake'});\nCREATE (e:AnimalSpecies {name: 'Bear'});\nCREATE (e:AnimalSpecies {name: 'Falcon'});\nCREATE (e:AnimalSpecies {name: 'Beaver'});\nCREATE (e:AnimalSpecies {name: 'Fox'});\n\nCREATE (s:NationalPark {name: 'Yosemite'});\nCREATE (s:NationalPark {name: 'Grand Canyon'});\nCREATE (s:NationalPark {name: 'Yellowstone'});\nCREATE (s:NationalPark {name: 'Glacier'});\nCREATE (s:NationalPark {name: 'Everglades'});\n\nMATCH (e: AnimalSpecies {name: 'Snake'}), (s:NationalPark {name: 'Yosemite'})\nCREATE (e)-[:LIVES_IN]->(s);\nMATCH (e: AnimalSpecies {name: 'Bear'}), (s:NationalPark {name: 'Yosemite'})\nCREATE (e)-[:LIVES_IN]->(s);\nMATCH (e: AnimalSpecies {name: 'Falcon'}), (s:NationalPark {name: 'Yosemite'})\nCREATE (e)-[:LIVES_IN]->(s);\nMATCH (e: AnimalSpecies {name: 'Beaver'}), (s:NationalPark {name: 'Yosemite'})\nCREATE (e)-[:LIVES_IN]->(s);\n\nMATCH (e: AnimalSpecies {name: 'Fox'}), (s:NationalPark {name: 'Yellowstone'})\nCREATE (e)-[:LIVES_IN]->(s);\nMATCH (e: AnimalSpecies {name: 'Beaver'}), (s:NationalPark {name: 'Yellowstone'})\nCREATE (e)-[:LIVES_IN]->(s);\n\nMATCH (e: AnimalSpecies {name: 'Snake'}), (s:NationalPark {name: 'Glacier'})\nCREATE (e)-[:LIVES_IN]->(s);\nMATCH (e: AnimalSpecies {name: 'Bear'}), (s:NationalPark {name: 'Glacier'})\nCREATE (e)-[:LIVES_IN]->(s);\n\nMATCH (e: AnimalSpecies {name: 'Falcon'}), (s:NationalPark {name: 'Everglades'})\nCREATE (e)-[:LIVES_IN]->(s);\n\n"))),(0,r.kt)(o.Z,{value:"run",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (e:AnimalSpecies)-[l:LIVES_IN]-(s:NationalPark)\nWITH collect(e) AS animal_list, collect(s) AS park_list\nCALL set_cover.cp_solve(animal_list, park_list)\nYIELD containing_set\nWITH containing_set AS national_park\nMATCH (animal:AnimalSpecies)-[l:LIVES_IN]->(national_park)\nRETURN animal, l, national_park;\n"))),(0,r.kt)(o.Z,{value:"result",mdxType:"TabItem"},(0,r.kt)("img",{src:n(83324).Z}))),(0,r.kt)("h2",{id:"greedycontext-element_vertexes-set_vertexes"},(0,r.kt)("inlineCode",{parentName:"h2"},"greedy(context, element_vertexes, set_vertexes)")),(0,r.kt)("p",null,"Not bad, not terrible."),(0,r.kt)("h4",{id:"input-1"},"Input"),(0,r.kt)("p",null,"The input itself represents an ",(0,r.kt)("em",{parentName:"p"},"element-set")," pair with each row of the lists."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"element_vertexes: List[Vertex]")," \u27a1 List of element nodes in pairs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set_vertexes: List[Vertex]")," \u27a1 List of set nodes in pairs")),(0,r.kt)("h4",{id:"output-1"},"Output"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"containing_set")," \u27a1 minimal set of sets in which all the elements are contained")),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL set_cover.greedy([(:Point), (:Point)], [(:Set), (:Set)])\nYIELD containing_set;\n")))}g.isMDXComponent=!0},83523:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,r.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}o.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),r=n(67294),l=n(86010),o=n(72389),s=n(67392),i=n(7094),p=n(12466);const m="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:n,block:o,defaultValue:c,values:d,groupId:h,className:g}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=d??v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,s.l)(k,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===c?c:c??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:f}=(0,i.U)(),[E,T]=(0,r.useState)(y),_=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=N[h];null!=e&&e!==E&&k.some((t=>t.value===e))&&T(e)}const A=e=>{const t=e.currentTarget,n=_.indexOf(t),a=k[n].value;a!==E&&(x(t),T(a),null!=h&&f(h,String(a)))},C=e=>{var t;let n=null;switch(e.key){case"Enter":A(e);break;case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;n=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;n=_[t]??_[_.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},g)},k.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:e=>_.push(e),onKeyDown:C,onClick:A},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":E===t})}),n??t)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==E})))))}function d(e){const t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},65961:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/set-cover-1-28a31b4a1d04e75504177518fadeaa45.png"},83324:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/set-cover-2-5c72e2dbe4826678e306bb115560e1e4.png"}}]);