"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38856],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>c});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function u(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):u(u({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),c=a,y=m["".concat(i,".").concat(c)]||m[c]||d[c]||l;return t?n.createElement(y,u(u({ref:r},p),{},{components:t})):n.createElement(y,u({ref:r},p))}));function c(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,u=new Array(l);u[0]=m;var o={};for(var i in r)hasOwnProperty.call(r,i)&&(o[i]=r[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,u[1]=o;for(var s=2;s<l;s++)u[s]=t[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},56642:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=t(87462),a=(t(67294),t(3905)),l=t(74866),u=t(85162);const o={id:"return-results",title:"How to return results",sidebar_label:"Return results"},i=void 0,s={unversionedId:"how-to-guides/query-builder/return-results",id:"how-to-guides/query-builder/return-results",title:"How to return results",description:"You can use the methods return(), limit(), skip() and orderby() to",source:"@site/gqlalchemy/how-to-guides/query-builder/return-results.md",sourceDirName:"how-to-guides/query-builder",slug:"/how-to-guides/query-builder/return-results",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/return-results",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/query-builder/return-results.md",tags:[],version:"current",frontMatter:{id:"return-results",title:"How to return results",sidebar_label:"Return results"},sidebar:"gqlalchemy",previous:{title:"Create nodes and relationships",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/create-nodes-relationships"},next:{title:"Filter data",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/filter-data"}},p={},d=[{value:"Return all variables from a query",id:"return-all-variables-from-a-query",level:2},{value:"Return specific variables from a query",id:"return-specific-variables-from-a-query",level:2},{value:"Limit the number of returned results",id:"limit-the-number-of-returned-results",level:2},{value:"Order the returned results",id:"order-the-returned-results",level:2},{value:"Order by one value",id:"order-by-one-value",level:3},{value:"Order by a list of values",id:"order-by-a-list-of-values",level:3}],m={toc:d};function c(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can use the methods ",(0,a.kt)("inlineCode",{parentName:"p"},"return_()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"limit()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"skip()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"order_by()")," to\nconstruct queries that will return data from the database."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"return_(results: Optional[Union[str, Tuple[str, str], Dict[str, str],\nList[Union[str, Tuple[str, str]]], Set[Union[str, Tuple[str, str]]]]] =\nNone)")," - Return data from the database with aliases formatted as ",(0,a.kt)("inlineCode",{parentName:"li"},"key AS\nvalue"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"limit(integer_expression: Union[str, int])")," - Limits the number of returned results equal\nto ",(0,a.kt)("inlineCode",{parentName:"li"},"integer_expression"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"skip(integer_expression: Union[str, int])")," - Skip the number of results to be returned\nequal to ",(0,a.kt)("inlineCode",{parentName:"li"},"integer_expression"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"order_by(properties: Union[str, Tuple[str, Order], List[Union[str, Tuple[str,\nOrder]]]])")," - Order the returned results either descending or ascending.")),(0,a.kt)("h2",{id:"return-all-variables-from-a-query"},"Return all variables from a query"),(0,a.kt)("p",null,"To return all the variables from a query, just use the ",(0,a.kt)("inlineCode",{parentName:"p"},"return_()")," method at the\nend of your query:"),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\n\nquery = Match().node(labels="Person", variable="p").return_().execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) RETURN *;\n")))),(0,a.kt)("h2",{id:"return-specific-variables-from-a-query"},"Return specific variables from a query"),(0,a.kt)("p",null,"To return only a subset of variables from a query, specify them in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"return()")," method:"),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\n\nquery = Match()\n        .node(labels="Person", variable="p1")\n        .to()\n        .node(labels="Person", variable="p2")\n        .return_(results=[("p1", "first"), "p2"])\n        .execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[]->(p2:Person) RETURN p1 AS first, p2;\n")))),(0,a.kt)("h2",{id:"limit-the-number-of-returned-results"},"Limit the number of returned results"),(0,a.kt)("p",null,"To limit the number of returned results, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"limit()")," method after the\n",(0,a.kt)("inlineCode",{parentName:"p"},"return_()")," method:"),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\n\nquery = match().node(labels="Person", variable="p").return_().limit(10).execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) RETURN * LIMIT 10;\n")))),(0,a.kt)("h2",{id:"order-the-returned-results"},"Order the returned results"),(0,a.kt)("p",null,"You can order the returned results ",(0,a.kt)("a",{parentName:"p",href:"#order-by-one-value"},"by one")," or ",(0,a.kt)("a",{parentName:"p",href:"#order-by-list-of-values"},"more\nvalues")," in an ascending or descending order. The\ndefault ordering in the Cypher query language is ascending (",(0,a.kt)("inlineCode",{parentName:"p"},"ASC")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"ASCENDING"),"), and if you want the descending order, you need to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"DESC"),"\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"DESCENDING")," keyword to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clause."),(0,a.kt)("h3",{id:"order-by-one-value"},"Order by one value"),(0,a.kt)("p",null,"To order the return results by one value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"order_by(properties)")," method,\nwhere ",(0,a.kt)("inlineCode",{parentName:"p"},"properties")," can be a string (a property) or a tuple of two strings (a\nproperty and an order)."),(0,a.kt)("p",null,"The following query will order the results in an ascending (default) order by\nthe property ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of a node."),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\n\nquery = Match().node(variable="n").return_().order_by(properties="n.id").execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.id;\n")))),(0,a.kt)("p",null,"You can also emphasize that you want an ascending order:"),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nquery = Match().node(variable="n").return_().order_by(properties=("n.id", Order.ASC).execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.id ASC;\n")))),(0,a.kt)("p",null,"The same can be done with the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"ASCENDING"),":"),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nquery = Match().node(variable="n").return_().order_by(properties=("n.id", Order.ASCENDING).execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.id ASCENDING;\n")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Order")," is an enumeration class defined in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/blob/main/gqlalchemy/query_builder.py"},(0,a.kt)("inlineCode",{parentName:"a"},"query_module.py")),".\nIt will help you in adding the correct order. If you don't want to import it,\nyou can use strings: ",(0,a.kt)("inlineCode",{parentName:"p"},'"ASC"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"ASCENDING"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"DESC"')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'"DESCENDING"'),".")),(0,a.kt)("p",null,"To order the query results in descending order, you need to specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"DESC"),"\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"DESCENDING")," keyword. Hence, the argument of the ",(0,a.kt)("inlineCode",{parentName:"p"},"order_by()")," method must be\na tuple."),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nquery = Match().node(variable="n").return_().order_by(properties=("n.id", Order.DESC).execute()\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.id DESC;\n")))),(0,a.kt)("p",null,"Similarly, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Order.DESCENDING")," to get ",(0,a.kt)("inlineCode",{parentName:"p"},"DESCENDING")," keyword in ",(0,a.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clause."),(0,a.kt)("h3",{id:"order-by-a-list-of-values"},"Order by a list of values"),(0,a.kt)("p",null,"To order the returned results by more than one value, use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"order_by(properties)")," method, where ",(0,a.kt)("inlineCode",{parentName:"p"},"properties")," can be a list of strings or\ntuples of strings (list of properties with or without order)."),(0,a.kt)("p",null,"The following query will order the results in ascending order by the property\n",(0,a.kt)("inlineCode",{parentName:"p"},"id"),", then again in ascending (default) order by the property ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," of a node.\nAfter that, it will order the results in descending order by the property\n",(0,a.kt)("inlineCode",{parentName:"p"},"last_name"),", then in ascending order by the property ",(0,a.kt)("inlineCode",{parentName:"p"},"age")," of a node. Lastly,\nthe query will order the results in descending order by the node property\n",(0,a.kt)("inlineCode",{parentName:"p"},"middle_name"),"."),(0,a.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,a.kt)(u.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Order\n\nquery = Match()\n        .node(variable="n")\n        .return_()\n        .order_by(\n            properties=[\n                ("n.id", Order.ASC),\n                "n.name",\n                ("n.last_name", Order.DESC),\n                ("n.age", Order.ASCENDING),\n                ("n.middle_name", Order.DESCENDING),\n            ]\n        )\n'))),(0,a.kt)(u.Z,{value:"cypher",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) RETURN * ORDER BY n.id ASC, n.name, n.last_name DESC, n.age ASCENDING, n.middle_name DESCENDING;\n")))),(0,a.kt)("p",null,"Hopefully, this guide has taught you how to return the query results. If you\nhave any more questions, join our community and ping us on\n",(0,a.kt)("a",{parentName:"p",href:"https://www.discord.gg/memgraph"},"Discord"),"."))}c.isMDXComponent=!0},85162:(e,r,t)=>{t.d(r,{Z:()=>u});var n=t(67294),a=t(86010);const l="tabItem_Ymn6";function u(e){let{children:r,hidden:t,className:u}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,u),hidden:t},r)}},74866:(e,r,t)=>{t.d(r,{Z:()=>q});var n=t(87462),a=t(67294),l=t(86010),u=t(12466),o=t(16550),i=t(91980),s=t(67392),p=t(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:a}}=e;return{value:r,label:t,attributes:n,default:a}}))}function m(e){const{values:r,children:t}=e;return(0,a.useMemo)((()=>{const e=r??d(t);return function(e){const r=(0,s.l)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function c(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function y(e){let{queryString:r=!1,groupId:t}=e;const n=(0,o.k6)(),l=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,i._X)(l),(0,a.useCallback)((e=>{if(!l)return;const r=new URLSearchParams(n.location.search);r.set(l,e),n.replace({...n.location,search:r.toString()})}),[l,n])]}function h(e){const{defaultValue:r,queryString:t=!1,groupId:n}=e,l=m(e),[u,o]=(0,a.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!c({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:l}))),[i,s]=y({queryString:t,groupId:n}),[d,h]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[n,l]=(0,p.Nk)(t);return[n,(0,a.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:n}),b=(()=>{const e=i??d;return c({value:e,tabValues:l})?e:null})();(0,a.useEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:u,selectValue:(0,a.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),h(e)}),[s,h,l]),tabValues:l}}var b=t(72389);const g="tabList__CuJ",f="tabItem_LNqP";function k(e){let{className:r,block:t,selectedValue:o,selectValue:i,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,u.o5)(),m=e=>{const r=e.currentTarget,t=p.indexOf(r),n=s[t].value;n!==o&&(d(r),i(n))},c=e=>{var r;let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const r=p.indexOf(e.currentTarget)+1;t=p[r]??p[0];break}case"ArrowLeft":{const r=p.indexOf(e.currentTarget)-1;t=p[r]??p[p.length-1];break}}null==(r=t)||r.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},r)},s.map((e=>{let{value:r,label:t,attributes:u}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===r?0:-1,"aria-selected":o===r,key:r,ref:e=>p.push(e),onKeyDown:c,onClick:m},u,{className:(0,l.Z)("tabs__item",f,null==u?void 0:u.className,{"tabs__item--active":o===r})}),t??r)})))}function v(e){let{lazy:r,children:t,selectedValue:n}=e;if(r){const e=t.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},t.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==n}))))}function N(e){const r=h(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",g)},a.createElement(k,(0,n.Z)({},e,r)),a.createElement(v,(0,n.Z)({},e,r)))}function q(e){const r=(0,b.Z)();return a.createElement(N,(0,n.Z)({key:String(r)},e))}}}]);