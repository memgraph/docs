(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7274],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(h,i(i({ref:n},s),{},{components:t})):a.createElement(h,i({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4842:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return s}});var a=t(2122),r=t(9756),o=(t(7294),t(3905)),i={id:"optional-match",title:"OPTIONAL MATCH clause",sidebar_label:"OPTIONAL MATCH"},l={unversionedId:"clauses/optional-match",id:"clauses/optional-match",isDocsHomePage:!1,title:"OPTIONAL MATCH clause",description:"The MATCH clause can be modified by prepending the OPTIONAL keyword.",source:"@site/cypher-manual/clauses/optional-match.md",sourceDirName:"clauses",slug:"/clauses/optional-match",permalink:"/cypher-manual/clauses/optional-match",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/optional-match.md",version:"current",sidebar_label:"OPTIONAL MATCH",frontMatter:{id:"optional-match",title:"OPTIONAL MATCH clause",sidebar_label:"OPTIONAL MATCH"},sidebar:"cypher_manual",previous:{title:"MERGE clause",permalink:"/cypher-manual/clauses/merge"},next:{title:"REMOVE clause",permalink:"/cypher-manual/clauses/remove"}},p=[{value:"Data Set",id:"data-set",children:[]},{value:"1. Get optional relationships",id:"1-get-optional-relationships",children:[]},{value:"2. Optional typed and named relationship",id:"2-optional-typed-and-named-relationship",children:[]},{value:"Data set Queries",id:"data-set-queries",children:[]}],c={toc:p};function s(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"MATCH")," clause can be modified by prepending the ",(0,o.kt)("inlineCode",{parentName:"p"},"OPTIONAL")," keyword.\n",(0,o.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause behaves the same as a regular ",(0,o.kt)("inlineCode",{parentName:"p"},"MATCH"),", but when it fails to find the pattern,\nmissing parts of the pattern will be filled with null values."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#1-get-optional-relationships"},"Get optional relationships")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#2-optional-typed-and-named-relationship"},"Optional typed and named relationship"))),(0,o.kt)("h2",{id:"data-set"},"Data Set"),(0,o.kt)("p",null,"The following examples are executed with this data set. You can create this data set\nlocally by executing the queries at the end of the page: ",(0,o.kt)("a",{parentName:"p",href:"#data-set-queries"},"Data Set"),"."),(0,o.kt)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),(0,o.kt)("h2",{id:"1-get-optional-relationships"},"1. Get optional relationships"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," when returning a relationship that doesn't exist will return the default value ",(0,o.kt)("inlineCode",{parentName:"p"},"NULL")," instead."),(0,o.kt)("p",null,"The returned property of an optional element that is ",(0,o.kt)("inlineCode",{parentName:"p"},"NULL")," will also be ",(0,o.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country { name: 'France' })\nOPTIONAL MATCH (c1)--(c2:Country { name: 'Germany' })\nRETURN c2;\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+------+\n| c2   |\n+------+\n| Null |\n+------+\n")),(0,o.kt)("h2",{id:"2-optional-typed-and-named-relationship"},"2. Optional typed and named relationship"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause allows you to use the same conventions as ",(0,o.kt)("inlineCode",{parentName:"p"},"MATCH")," when it comes to handling variables and relationship types."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country { name: 'United Kingdom' })\nOPTIONAL MATCH (c)-[r:LIVES_IN]->()\nRETURN c.name, r;\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+----------------+----------------+\n| c.name         | r              |\n+----------------+----------------+\n| United Kingdom | Null           |\n+----------------+----------------+\n")),(0,o.kt)("p",null,"Because there are no outgoing relationships of type ",(0,o.kt)("inlineCode",{parentName:"p"},"LIVES_IN")," for the node, the value of r is ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," while the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"contry.name")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"'United Kingdom'"),"."),(0,o.kt)("h2",{id:"data-set-queries"},"Data set Queries"),(0,o.kt)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our data set locally by executing the following query block."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country { name: 'Germany', language: 'German', continent: 'Europe', population: 83000000 });\nCREATE (c2:Country { name: 'France', language: 'French', continent: 'Europe', population: 67000000 });\nCREATE (c3:Country { name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000 });\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'John' })-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN { date_of_start: 2014 }]-(p:Person { name: 'Harry' })-[:LIVING_IN { date_of_start: 2013 }]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH { date_of_start: 2011 }]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH { date_of_start: 2012 }]-(:Person { name: 'Anna' })-[:FRIENDS_WITH { date_of_start: 2014 }]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN { date_of_start: 2014 }]-(p)-[:LIVING_IN { date_of_start: 2014 }]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}s.isMDXComponent=!0}}]);