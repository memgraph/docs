"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4696],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),l=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=l(a),u=n,f=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return a?r.createElement(f,i(i({ref:t},p),{},{components:a})):r.createElement(f,i({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m.mdxType="string"==typeof e?e:n,i[1]=m;for(var l=2;l<o;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},81750:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return m},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=a(87462),n=a(63366),o=(a(67294),a(3905)),i=["components"],m={id:"overview",title:"Importing data from Kafka streams",sidebar_label:"Kafka streams overview",slug:"/import-data/kafka"},s=void 0,l={unversionedId:"import-data/kafka/overview",id:"version-2.1.1/import-data/kafka/overview",title:"Importing data from Kafka streams",description:"Memgraph can natively ingest streaming data from upstream sources using [Apache",source:"@site/memgraph_versioned_docs/version-2.1.1/import-data/kafka/overview.md",sourceDirName:"import-data/kafka",slug:"/import-data/kafka",permalink:"/docs/memgraph/import-data/kafka",editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.1/import-data/kafka/overview.md",tags:[],version:"2.1.1",frontMatter:{id:"overview",title:"Importing data from Kafka streams",sidebar_label:"Kafka streams overview",slug:"/import-data/kafka"},sidebar:"version-2.1.1/memgraph",previous:{title:"CSV Import Tool",permalink:"/docs/memgraph/import-data/csv-import-tool"},next:{title:"Avro",permalink:"/docs/memgraph/import-data/kafka/avro"}},p=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Importing data",id:"importing-data",children:[{value:"1. Start Memgraph with Kafka configuration",id:"1-start-memgraph-with-kafka-configuration",children:[],level:3},{value:"2. Define the transformation module",id:"2-define-the-transformation-module",children:[],level:3},{value:"3. Create a stream in Memgraph",id:"3-create-a-stream-in-memgraph",children:[],level:3},{value:"4. Start ingesting data from the stream",id:"4-start-ingesting-data-from-the-stream",children:[],level:3}],level:2}],c={toc:p};function d(e){var t=e.components,m=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,m,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Memgraph can natively ingest streaming data from upstream sources using ",(0,o.kt)("a",{parentName:"p",href:"https://kafka.apache.org"},"Apache\nKafka")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.confluent.io"},"Confulent\nPlatform"),". To import data using streams, a user must:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Start Memgraph with Kafka cofiguration"),(0,o.kt)("li",{parentName:"ol"},"Define a transformation module"),(0,o.kt)("li",{parentName:"ol"},"Create the stream in Memgraph"),(0,o.kt)("li",{parentName:"ol"},"Start ingesting data from the stream")),(0,o.kt)("img",{src:a(19990).Z,height:"300px"}),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"To create a Kafka pipeline, you must meet the following prerequisites:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Have a working Kafka stream"),(0,o.kt)("li",{parentName:"ul"},"Have access to a Memgraph instance")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Errors")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"All of the errors regarding streams are contained in Memgraph's\nlog files which can be found at ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/log/memgraph/memgraph_<date>.log")," Just\nsearch for the name of your stream in the log file to find the error. You can\nuse the ",(0,o.kt)("inlineCode",{parentName:"p"},"grep")," command to search for the stream in the log file:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"grep '<stream_name>' /var/log/memgraph/memgraph_<date>.log\n")))),(0,o.kt)("h2",{id:"importing-data"},"Importing data"),(0,o.kt)("p",null,"When importing data, we have to take note of all the different nodes and\nrelationships our stream contains. The best practice is to handle them all\nseparately. Each node and each relationship type should have a dedicated topic.\nThis kind of strategy always assumes one message represents one node or one\nrelationship."),(0,o.kt)("p",null,"Topics that contain multiple differently formatted messages should be avoided\nwhenever possible.  Sending data in different topics allows for better control\nof when either data type is created. It is easier to parse the data from a\nsingle topic for events of the same type. You only need to create a separate\ntransformation module to handle the conversion."),(0,o.kt)("h3",{id:"1-start-memgraph-with-kafka-configuration"},"1. Start Memgraph with Kafka configuration"),(0,o.kt)("p",null,"As Memgraph can only connect to one Kafka cluster at once, the list of bootstrap\nservers can be explicitly set by the ",(0,o.kt)("inlineCode",{parentName:"p"},"--kafka-bootstrap-servers")," configuration\noption. This can be edited in the ",(0,o.kt)("inlineCode",{parentName:"p"},"memgraph.conf")," file or supplied as a\ncommand-line parameter (e.g., when using Docker)."),(0,o.kt)("h3",{id:"2-define-the-transformation-module"},"2. Define the transformation module"),(0,o.kt)("p",null,"A transformation module is a user-defined program that receives data from Kafka\nand returns processed data in the form of Cypher queries. The most common\nformats received from Kafka are ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/memgraph/import-data/kafka/json"},"JSON")),",\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/memgraph/import-data/kafka/avro"},"Avro")),", or\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/memgraph/import-data/kafka/protobuf"},"Protobuf")),". Transformation modules can be\nwritten in either ",(0,o.kt)("strong",{parentName:"p"},"Python")," or ",(0,o.kt)("strong",{parentName:"p"},"C"),"."),(0,o.kt)("p",null,"By default, all of the modules load on startup. If you want to change the\ndirectory in which Memgraph searches for transformation modules, just change or\nextend the ",(0,o.kt)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main configuration file\n(",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply it as a command-line parameter (e.g.,\nwhen using Docker)."),(0,o.kt)("p",null,"Check ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/database-functionalities/streams/kafka/implement-transformation-module/#python-api"},"this\nguide"),"\nfor an example of how to implement transformation modules in Python."),(0,o.kt)("p",null,"Load the transformation module from ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," by using\nthe following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load('<transformation_name>');\n")),(0,o.kt)("p",null,"If you want to check if your module has properly loaded in Memgraph, you can\ncheck it with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.transformations() YIELD *;\n")),(0,o.kt)("p",null,"You should see an output similar to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'+-------------------------------------------------------+\n| name                                                  |\n+-------------------------------------------------------+\n| "transformation_name.my_transformation_module"        |\n+-------------------------------------------------------+\n')),(0,o.kt)("h3",{id:"3-create-a-stream-in-memgraph"},"3. Create a stream in Memgraph"),(0,o.kt)("p",null,"Creating, starting, and deleting the streams can be done with Cypher queries.\nThe list of available stream commands can be found\n",(0,o.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/streams/"},"here"),"."),(0,o.kt)("p",null,"To import data, first, make sure Kafka and Memgraph are running and there is a\ntopic available."),(0,o.kt)("p",null,"After making sure the transformation module is loaded, connect Memgraph to the\nstream with the following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE KAFKA STREAM <name_of_the_stream>\nTOPICS <name_of_the_topics_created>\nTRANSFORM <transformation_module_name.transformation>;\n")),(0,o.kt)("h3",{id:"4-start-ingesting-data-from-the-stream"},"4. Start ingesting data from the stream"),(0,o.kt)("p",null,"This query only created the stream. To start streaming data, execute the\nfollowing query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"START STREAM <name_of_the_stream>\n")),(0,o.kt)("p",null,"Your data should be slowly arriving in your Memgraph instance. To check if\neverything is working, run the following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CHECK STREAM <stream_name>\n")))}d.isMDXComponent=!0},19990:function(e,t,a){t.Z=a.p+"assets/images/kafka-overview-2198147f99c60687be97b288be4b2e54.png"}}]);