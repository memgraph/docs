"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64691],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79014:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>c,assets:()=>m,contentTitle:()=>s,default:()=>g,frontMatter:()=>p,metadata:()=>u,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),l=n(85162),i=n(83523);const p={id:"import-util",title:"import_util",sidebar_label:"import_util"},s=void 0,u={unversionedId:"query-modules/python/import-util",id:"query-modules/python/import-util",title:"import_util",description:"docs-source",source:"@site/mage/query-modules/python/import-util.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/import-util",permalink:"/docs/mage/query-modules/python/import-util",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/import-util.md",tags:[],version:"current",frontMatter:{id:"import-util",title:"import_util",sidebar_label:"import_util"},sidebar:"mage",previous:{title:"igraphalg",permalink:"/docs/mage/query-modules/python/igraphalg"},next:{title:"json_util",permalink:"/docs/mage/query-modules/python/json-util"}},m={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>json(path)</code>",id:"jsonpath",level:3},{value:"Input:",id:"input",level:4},{value:"Usage:",id:"usage",level:4},{value:"Example - Importing JSON file to create a database",id:"example---importing-json-file-to-create-a-database",level:2}],c=e=>{let{children:t,color:n}=e;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},h={toc:d,Highlight:c};function g(e){let{components:t,...p}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,p,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/import_util.py"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-import_util-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"Module for importing data from different formats. Currently, this module\nsupports only the import of JSON file format."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Trait"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Module type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(c,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"util")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Implementation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(c,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"Python")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(c,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"sequential")))))),(0,r.kt)("h2",{id:"procedures"},"Procedures"),(0,r.kt)(i.ZP,{mdxType:"RunOnSubgraph"}),(0,r.kt)("h3",{id:"jsonpath"},(0,r.kt)("inlineCode",{parentName:"h3"},"json(path)")),(0,r.kt)("h4",{id:"input"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path: string")," \u27a1 Path to the JSON file that is being imported.")),(0,r.kt)("h4",{id:"usage"},"Usage:"),(0,r.kt)("p",null,"The JSON file you're importing needs to be structured the same as the JSON file\nthat the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/mage/query-modules/python/export-util"},(0,r.kt)("inlineCode",{parentName:"a"},"export_util.json()")),"\nprocedure generates. The generated JSON file is a list of objects representing\nnodes or relationships. If the object is node, then it looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 4000,\n    "labels": [\n        "City"\n    ],\n    "properties": {\n        "id": 0,\n        "name": "Amsterdam",\n    },\n    "type": "node"\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," key has the value of the Memgraph's internal node ide. The ",(0,r.kt)("inlineCode",{parentName:"p"},"labels")," key\nholds the information about node labels in a list. The ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," are\nkey-value pairs representing properties of the certain node. Each node needs to\nhave the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"node"'),"."),(0,r.kt)("p",null,"On the other hand, if the object is a relationship, then it is structured like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "end": 4052,\n    "id": 7175,\n    "label": "CloseTo",\n    "properties": {\n        "eu_border": true\n    },\n    "start": 4035,\n    "type": "relationship"\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," keys hold the information about the internal ids of start\nand end node of the relationship. Each relationship also has it's internal id\nexported as a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," key. A relationship can only have one label which is\nexported to the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," key. Properties are again key-value pairs, and the value\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," needs to be set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"relationship"'),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," you have to provide as procedure argument depends on how you started\nMemgraph."),(0,r.kt)(o.Z,{groupId:"import_to_json_usage",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"docker",mdxType:"TabItem"},(0,r.kt)("p",null,"If you ran Memgraph with Docker, you need to save the JSON file inside the\nDocker container. We recommend saving the JSON file inside the\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory."),(0,r.kt)("p",null,"You can call the procedure by running the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL export_util.json(path);\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is the path to the JSON file inside the\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory in the running Docker container (e.g.,\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules/import.json"),")."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can copy the JSON file to the running Docker container with the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/cp/"},(0,r.kt)("inlineCode",{parentName:"a"},"docker cp"))," command: "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"docker cp /path_to_local_folder/import.json <container_id>:/usr/lib/memgraph/query_modules/import.json\n")))),(0,r.kt)(l.Z,{value:"linux",mdxType:"TabItem"},(0,r.kt)("p",null,"To import a local JSON file call the procedure by running the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL export_util.json(path);\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is the path to a local JSON file that will be created inside the\n",(0,r.kt)("inlineCode",{parentName:"p"},"import_folder")," (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/my_user/import_folder/export.json"),")."))),(0,r.kt)("h2",{id:"example---importing-json-file-to-create-a-database"},"Example - Importing JSON file to create a database"),(0,r.kt)(o.Z,{groupId:"import_json_example",defaultValue:"input",values:[{label:"Step 1: Input file",value:"input"},{label:"Step 2: Running command",value:"run"},{label:"Step 3: Created database",value:"result"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"input",mdxType:"TabItem"},(0,r.kt)("p",null,"Below is the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"import.json")," file. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you're using ",(0,r.kt)("strong",{parentName:"p"},"Memgraph with Docker"),", then you have to save the\n",(0,r.kt)("inlineCode",{parentName:"p"},"import.json")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory inside\nthe running Docker container. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you're using ",(0,r.kt)("strong",{parentName:"p"},"Memgraph on Ubuntu, Debian, RPM package or WSL"),", then you\nhave to save the ",(0,r.kt)("inlineCode",{parentName:"p"},"import.json")," file in the local\n",(0,r.kt)("inlineCode",{parentName:"p"},"/users/my_user/import_folder")," directory."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id": 6114,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "Anna"\n        },\n        "type": "node"\n    },\n    {\n        "id": 6115,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "John"\n        },\n        "type": "node"\n    },\n    {\n        "id": 6116,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "Kim"\n        },\n        "type": "node"\n    },\n    {\n        "end": 6115,\n        "id": 21120,\n        "label": "IS_FRIENDS_WITH",\n        "properties": {},\n        "start": 6114,\n        "type": "relationship"\n    },\n    {\n        "end": 6116,\n        "id": 21121,\n        "label": "IS_FRIENDS_WITH",\n        "properties": {},\n        "start": 6114,\n        "type": "relationship"\n    },\n    {\n        "end": 6116,\n        "id": 21122,\n        "label": "IS_MARRIED_TO",\n        "properties": {},\n        "start": 6115,\n        "type": "relationship"\n    }\n]\n\n'))),(0,r.kt)(l.Z,{value:"run",mdxType:"TabItem"},(0,r.kt)("p",null,"If you're using ",(0,r.kt)("strong",{parentName:"p"},"Memgraph with Docker"),", then the following Cypher query will\ncreate a graph database from the provided JSON file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL import_util.json("/usr/lib/memgraph/query_modules/import.json");\n')),(0,r.kt)("p",null,"If you're using ",(0,r.kt)("strong",{parentName:"p"},"Memgraph on Ubuntu, Debian, RPM package or WSL"),", then the\nfollowing Cypher query will create a graph database from the provided JSON file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL import_util.json("/users/my_user/import_folder/import.json");\n'))),(0,r.kt)(l.Z,{value:"result",mdxType:"TabItem"},(0,r.kt)("p",null,"After you import the ",(0,r.kt)("inlineCode",{parentName:"p"},"import.json")," file, you get the following graph database:"),(0,r.kt)("img",{src:n(6851).Z}))))}g.isMDXComponent=!0},83523:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,r.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}l.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(87462),r=n(67294),o=n(86010),l=n(72389),i=n(67392),p=n(7094),s=n(12466);const u="tabList__CuJ",m="tabItem_LNqP";function d(e){var t;const{lazy:n,block:l,defaultValue:d,values:c,groupId:h,className:g}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,i.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===d?d:d??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:v}=(0,p.U)(),[C,T]=(0,r.useState)(b),_=[],{blockElementScrollPositionUntilNextRender:j}=(0,s.o5)();if(null!=h){const e=N[h];null!=e&&e!==C&&y.some((t=>t.value===e))&&T(e)}const w=e=>{const t=e.currentTarget,n=_.indexOf(t),a=y[n].value;a!==C&&(j(t),T(a),null!=h&&v(h,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;n=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;n=_[t]??_[_.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},g)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>_.push(e),onKeyDown:O,onClick:w},l,{className:(0,o.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,r.cloneElement)(k.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function c(e){const t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},6851:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/import-util-1-6f272764c2ffb63fae58905c1dded702.png"}}]);