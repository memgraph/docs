"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[54601],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),h=i,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},82249:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return d}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],p={id:"connecting-nodes",title:"Connecting nodes",sidebar_label:"Connecting nodes"},s=void 0,l={unversionedId:"connecting-nodes",id:"connecting-nodes",title:"Connecting nodes",description:"Relationships (or edges) are the lines that connect nodes to each other",source:"@site/cypher-manual/connecting-nodes.md",sourceDirName:".",slug:"/connecting-nodes",permalink:"/docs/cypher-manual/connecting-nodes",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/connecting-nodes.md",tags:[],version:"current",frontMatter:{id:"connecting-nodes",title:"Connecting nodes",sidebar_label:"Connecting nodes"},sidebar:"cypher_manual",previous:{title:"Import data",permalink:"/docs/cypher-manual/import-data"},next:{title:"Reading existing data",permalink:"/docs/cypher-manual/reading-existing-data"}},c={},d=[{value:"Creating relationships",id:"creating-relationships",level:3},{value:"Retrieving relationship types",id:"retrieving-relationship-types",level:3},{value:"Querying using relationships",id:"querying-using-relationships",level:3},{value:"Relationship properties",id:"relationship-properties",level:3}],u={toc:d};function h(e){var n=e.components,p=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,p,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Relationships")," (or edges) are the ",(0,a.kt)("strong",{parentName:"p"},"lines that connect nodes")," to each other\nand represent a defined connection between them. Every relationship has a source\nnode and a target node that represent in which direction the relationship works.\nIf this direction is important, the relationship is considered directed,\notherwise, it's undirected."),(0,a.kt)("p",null,"Relationships can also store data in the form of ",(0,a.kt)("strong",{parentName:"p"},"properties"),", just as nodes.\nIn most cases, relationships store quantitative properties such as weight,\ncosts, distances, ratings, etc."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:t(32315).Z,width:"992",height:"523"})),(0,a.kt)("p",null,"In our example, the relationship between two nodes labeled ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," could be of\nthe type ",(0,a.kt)("inlineCode",{parentName:"p"},"MARRIED_TO"),". The relationship between ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"City")," is\nrepresented by the type ",(0,a.kt)("inlineCode",{parentName:"p"},"LIVES_IN"),"."),(0,a.kt)("p",null,"The relationship of the type ",(0,a.kt)("inlineCode",{parentName:"p"},"MARRIED_TO")," has the property ",(0,a.kt)("inlineCode",{parentName:"p"},"weddingDate"),", which\nrepresents the date when the marriage was formed. Relationships of the type\n",(0,a.kt)("inlineCode",{parentName:"p"},"LIVES_IN")," have the property ",(0,a.kt)("inlineCode",{parentName:"p"},"durationInYears")," which denotes how long a person\nhas lived in the specified location."),(0,a.kt)("h3",{id:"creating-relationships"},"Creating relationships"),(0,a.kt)("p",null,"To create a relationship between two nodes, we need to specify which nodes\neither by creating them or filtering them with the ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (p1:Person {name: 'Harry'}), (p2:Person {name: 'Anna'})\nCREATE (p1)-[r:MARRIED_TO]->(p2)\nRETURN p1, r, p2;\n")),(0,a.kt)("p",null,"If the nodes already existed, the query would look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person),(p2:Person)\nWHERE p1.name = 'Harry' AND p2.name = 'Anna'\nCREATE (p1)-[r:MARRIED_TO]->(p2)\nRETURN p1, r, p2;\n")),(0,a.kt)("p",null,"Instead of using the ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE")," clause, you are just searching for existing nodes\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause and accessing them using variables ",(0,a.kt)("inlineCode",{parentName:"p"},"p1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,a.kt)("h3",{id:"retrieving-relationship-types"},"Retrieving relationship types"),(0,a.kt)("p",null,"The built-in function ",(0,a.kt)("inlineCode",{parentName:"p"},"type()")," can be used to return the type of a relationship:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (p1:Person {name: 'Harry'}), (p2:Person {name: 'Anna'})\nCREATE (p1)-[r:MARRIED_TO {weddingDate: '27-06-2019'}]->(p2)\nRETURN type(r);\n")),(0,a.kt)("h3",{id:"querying-using-relationships"},"Querying using relationships"),(0,a.kt)("p",null,"You can query the database using relationship types. The following query will\nreturn nodes connected with the relationship of the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1)-[r:MARRIED_TO]->(p2)\nRETURN p1, r, p2;\n")),(0,a.kt)("h3",{id:"relationship-properties"},"Relationship properties"),(0,a.kt)("p",null,"Just like with properties on nodes, the same rules apply when creating or\nmatching a relationship. You can add properties to relationships at the time of\ncreation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (p1:Person {name: 'Harry'}), (p2:Person {name: 'Anna'})\nCREATE (p1)-[r:MARRIED_TO {weddingDate: '27-06-2019'}]->(p2)\nRETURN p1, r, p2;\n")),(0,a.kt)("p",null,"You can also specify them in the ",(0,a.kt)("inlineCode",{parentName:"p"},"MATCH")," clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1)-[r:MARRIED_TO {weddingDate: '27-06-2019'}]->(p2)\nRETURN p1, r, p2;\n")))}h.isMDXComponent=!0},32315:function(e,n,t){n.Z=t.p+"assets/images/connecting-nodes-0efdc11879395a7fc79df1d70af64a64.png"}}]);