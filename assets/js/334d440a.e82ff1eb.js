(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{128:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),o=n(8),a=(n(0),n(345)),i={id:"tsp",title:"The tsp module",sidebar_label:"tsp"},c={unversionedId:"query-modules/python/tsp",id:"query-modules/python/tsp",isDocsHomePage:!1,title:"The tsp module",description:"solve(context, points, method)",source:"@site/mage/query-modules/python/tsp.md",slug:"/query-modules/python/tsp",permalink:"/mage/query-modules/python/tsp",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/tsp.md",version:"current",sidebar_label:"tsp",sidebar:"mage",previous:{title:"The set_cover module",permalink:"/mage/query-modules/python/set-cover"},next:{title:"How to contribute to MAGE?",permalink:"/mage/contributing"}},l=[{value:"<code>solve(context, points, method)</code>",id:"solvecontext-points-method",children:[]}],p={toc:l};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"solvecontext-points-method"},Object(a.b)("inlineCode",{parentName:"h2"},"solve(context, points, method)")),Object(a.b)("p",null,"The tsp_module solver returns 2 fields whose elements at indexes are correlated"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"sources")," - elements from 1st to n-1th element"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"destinations")," - elements from 2nd to nth element")),Object(a.b)("p",null,"The pairs of them represent individual edges between 2 nodes in the graph."),Object(a.b)("p",null,"The required argument is the list of cities one wants to find the path from. The\noptional argument ",Object(a.b)("inlineCode",{parentName:"p"},"method")," is by default 'greedy'. Other arguments that can be\nspecified are '2-approx' and '1.5-approx'"),Object(a.b)("p",null,"The procedure can be invoked in openCypher using the following calls:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Point)\nWITH collect(n) as points\nCALL tsp_module.solve(points) YIELD sources, destinations;\n")))}s.isMDXComponent=!0},345:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,b=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return n?o.a.createElement(b,c(c({ref:t},p),{},{components:n})):o.a.createElement(b,c({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);