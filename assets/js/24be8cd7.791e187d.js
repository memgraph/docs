"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25644],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=l(n),h=r,u=g["".concat(c,".").concat(h)]||g[h]||m[h]||o;return n?a.createElement(u,i(i({ref:t},p),{},{components:n})):a.createElement(u,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},36206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(93996);const i={id:"memgraph-docker-instance",title:"How to manage Memgraph Docker instances in Python",sidebar_label:"Manage Memgraph Docker instances",slug:"/how-to-guides/memgraph-docker-instance"},s=void 0,c={unversionedId:"how-to-guides/instance-runner/memgraph-docker-instance",id:"how-to-guides/instance-runner/memgraph-docker-instance",title:"How to manage Memgraph Docker instances in Python",description:"Through this guide, you will learn how to start, stop, connect to and monitor",source:"@site/gqlalchemy/how-to-guides/instance-runner/memgraph-docker-instance.md",sourceDirName:"how-to-guides/instance-runner",slug:"/how-to-guides/memgraph-docker-instance",permalink:"/docs/gqlalchemy/how-to-guides/memgraph-docker-instance",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/instance-runner/memgraph-docker-instance.md",tags:[],version:"current",frontMatter:{id:"memgraph-docker-instance",title:"How to manage Memgraph Docker instances in Python",sidebar_label:"Manage Memgraph Docker instances",slug:"/how-to-guides/memgraph-docker-instance"},sidebar:"gqlalchemy",previous:{title:"Make a custom file system importer",permalink:"/docs/gqlalchemy/how-to-guides/custom-file-system-importer"},next:{title:"Manage Memgraph binary instances",permalink:"/docs/gqlalchemy/how-to-guides/memgraph-binary-instance"}},l={},p=[{value:"Start the Memgraph instance",id:"start-the-memgraph-instance",level:2},{value:"Pass configuration flags",id:"pass-configuration-flags",level:2},{value:"Stop the Memgraph instance",id:"stop-the-memgraph-instance",level:2},{value:"Check if a Memgraph instance is running",id:"check-if-a-memgraph-instance-is-running",level:2},{value:"Where to next?",id:"where-to-next",level:2}],m={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Through this guide, you will learn how to start, stop, connect to and monitor\nMemgraph instances with GQLAlchemy."),(0,r.kt)(o.ZP,{mdxType:"Neo4jWarning"}),(0,r.kt)("p",null,"First, perform all the necessary imports:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy.instance_runner import (\n    DockerImage,\n    MemgraphInstanceDocker\n)\n")),(0,r.kt)("h2",{id:"start-the-memgraph-instance"},"Start the Memgraph instance"),(0,r.kt)("p",null,"The following code will create a Memgraph instance, start it and return a\nconnection object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'memgraph_instance = MemgraphInstanceDocker(\n    docker_image=DockerImage.MEMGRAPH, docker_image_tag="latest", host="0.0.0.0", port=7687\n)\nmemgraph = memgraph_instance.start_and_connect(restart=False)\n')),(0,r.kt)("p",null,"We used the default values for the arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker_image=DockerImage.MEMGRAPH"),": This will start the ",(0,r.kt)("inlineCode",{parentName:"li"},"memgraph/memgraph"),"\nDocker image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'docker_image_tag="latest"'),": We use the ",(0,r.kt)("inlineCode",{parentName:"li"},"latest")," tag to start the most recent\nversion of Memgraph."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'host="0.0.0.0"'),": This is the wildcard address which indicates that the\ninstance should accept connections from all interfaces."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"port=7687"),": This is the default port Memgraph listens to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"restart=False"),": If the instance is already running, it won't be stopped and\nstarted again.")),(0,r.kt)("p",null,"After we have created the connection, we can start querying the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'memgraph.execute_and_fetch("RETURN \'Memgraph is running\' AS result"))[0]["result"]\n')),(0,r.kt)("h2",{id:"pass-configuration-flags"},"Pass configuration flags"),(0,r.kt)("p",null,"You can pass ",(0,r.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/configuration"},"configuration flags"),"\nusing a dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'config={"--log-level": "TRACE"}\nmemgraph_instance = MemgraphInstanceDocker(config=config)\n')),(0,r.kt)("h2",{id:"stop-the-memgraph-instance"},"Stop the Memgraph instance"),(0,r.kt)("p",null,"To stop a Memgraph instance, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"stop()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"memgraph_instance.stop()\n")),(0,r.kt)("h2",{id:"check-if-a-memgraph-instance-is-running"},"Check if a Memgraph instance is running"),(0,r.kt)("p",null,"To check if a Memgraph instance is running, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"is_running()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"memgraph_instance.is_running()\n")),(0,r.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,r.kt)("p",null,"Hopefully, this guide has taught you how to manage Memgraph Docker instances. If\nyou have any more questions, join our community and ping us on\n",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}g.isMDXComponent=!0},93996:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This feature only works with Memgraph. Neo4j is not supported.")))}i.isMDXComponent=!0}}]);