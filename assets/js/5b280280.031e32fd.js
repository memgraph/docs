"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[24136],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),h=r,u=c["".concat(l,".").concat(h)]||c[h]||m[h]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},26293:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294);const r=e=>{let{videoId:t,width:n="560"}=e;const r={position:"relative",width:n,paddingBottom:"56.25%",height:0};return a.createElement("div",{style:r},a.createElement("iframe",{style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",border:"1px solid #cccccc"},src:`https://www.youtube.com/embed/${t}`,frameBorder:"0",allow:"encrypted-media; picture-in-picture",allowFullScreen:!0}))}},21430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),o=n(26293);const i={id:"migrate-from-neo4j",title:"Migrate from Neo4j to Memgraph",sidebar_label:"Migrate from Neo4j"},p=void 0,l={unversionedId:"tutorials/migrate-from-neo4j",id:"version-2.9.0/tutorials/migrate-from-neo4j",title:"Migrate from Neo4j to Memgraph",description:"Memgraph is a native in-memory graph database specialized for real-time",source:"@site/memgraph_versioned_docs/version-2.9.0/tutorials/migrate-from-neo4j.md",sourceDirName:"tutorials",slug:"/tutorials/migrate-from-neo4j",permalink:"/docs/memgraph/2.9.0/tutorials/migrate-from-neo4j",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.9.0/tutorials/migrate-from-neo4j.md",tags:[],version:"2.9.0",frontMatter:{id:"migrate-from-neo4j",title:"Migrate from Neo4j to Memgraph",sidebar_label:"Migrate from Neo4j"},sidebar:"memgraph",previous:{title:"Migrate from RDBMS",permalink:"/docs/memgraph/2.9.0/tutorials/migrate-relational-database"},next:{title:"Exploring datasets with graph analytics",permalink:"/docs/memgraph/2.9.0/tutorials/exploring-datasets"}},s={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Data schema",id:"data-schema",level:2},{value:"Exporting data from Neo4j",id:"exporting-data-from-neo4j",level:2},{value:"Importing data into Memgraph",id:"importing-data-into-memgraph",level:2},{value:"1. Starting Memgraph with Docker",id:"1-starting-memgraph-with-docker",level:3},{value:"2. Gaining speed with indexes and analytical storage mode",id:"2-gaining-speed-with-indexes-and-analytical-storage-mode",level:3},{value:"3. Importing nodes",id:"3-importing-nodes",level:3},{value:"Employee nodes",id:"employee-nodes",level:4},{value:"Order nodes",id:"order-nodes",level:4},{value:"Product nodes",id:"product-nodes",level:4},{value:"4. Graph improvements",id:"4-graph-improvements",level:3},{value:"5. Importing relationships",id:"5-importing-relationships",level:3},{value:":REPORTS_TO relationships",id:"reports_to-relationships",level:4},{value:":SOLD relationships",id:"sold-relationships",level:4},{value:":CONTAINS relationships",id:"contains-relationships",level:4},{value:"After import",id:"after-import",level:2}],m={toc:d};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Memgraph is a native in-memory graph database specialized for real-time\nuse-cases such us streaming, analytical processing etc. It uses Cypher query\nlanguage and Bolt protocol. This means that you can use the same tools and\ndrivers that you are already using with Neo4j. Due to the ACID compliance, data\npersistency and replication support in community version, Memgraph can be used\nas main database for your applications, instead of Neo4j. "),(0,r.kt)("p",null,"This tutorial is also available as a video:"),(0,r.kt)(o.Z,{videoId:"LNHH1Od6ZqM",width:"100%",mdxType:"EmbedYTVideo"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"To follow this tutorial, you will need to have the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Running Neo4j instance (with your data, or use the sample data provided)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://memgraph.com/download"},"Latest ",(0,r.kt)("inlineCode",{parentName:"a"},"memgraph/memgraph-platform")," Docker image"))),(0,r.kt)("h2",{id:"data-schema"},"Data schema"),(0,r.kt)("p",null,"One of the first steps to consider is how to migrate your data. If you have your\ndata in the form of ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/import-data/files/cypherl"},"Cypher queries")," or\n",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/import-data/load-csv-clause"},"CSV")," or\n",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/import-data/files/load-json"},"JSON")," format, you can import these formats\ninto Memgraph. Keep in mind that for importing larger datasets it is recommended\nto use CSV format or pure Cypher queries (Memgraph's CYPHERL format), since they\ncan be imported into Memgraph natively, faster than JSON format."),(0,r.kt)("p",null,"This tutorial will go through exporting data from Neo4j into CSV files and\nimporting it into Memgraph using ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/import-data/load-csv-clause"},"LOAD CSV"),"\nquery and Memgraph's user visual interface ",(0,r.kt)("a",{parentName:"p",href:"/memgraph-lab"},"Memgraph Lab"),"."),(0,r.kt)("p",null,"The sample dataset consists of 3 different kinds of nodes (Employee, Order and\nProduct) connected with 3 types of relationships as described by the graph\nschema below: "),(0,r.kt)("img",{src:n(51191).Z,className:"imgBorder"}),(0,r.kt)("p",null,"To create this graph in your Neo4j instance run the following queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV WITH HEADERS FROM 'https://gist.githubusercontent.com/jexp/054bc6baf36604061bf407aa8cd08608/raw/8bdd36dfc88381995e6823ff3f419b5a0cb8ac4f/orders.csv' AS column\nMERGE (order:Order {orderID: column.OrderID})\n    ON CREATE SET order.shipName = column.ShipName;\n\nLOAD CSV WITH HEADERS FROM 'https://gist.githubusercontent.com/jexp/054bc6baf36604061bf407aa8cd08608/raw/8bdd36dfc88381995e6823ff3f419b5a0cb8ac4f/products.csv' AS column\nMERGE (product:Product {productID: column.ProductID})\n  ON CREATE SET product.productName = column.ProductName, product.unitPrice = toFloat(column.UnitPrice);\n\nLOAD CSV WITH HEADERS FROM 'https://gist.githubusercontent.com/jexp/054bc6baf36604061bf407aa8cd08608/raw/8bdd36dfc88381995e6823ff3f419b5a0cb8ac4f/employees.csv' AS column\nMERGE (e:Employee {employeeID:column.EmployeeID})\n  ON CREATE SET e.firstName = column.FirstName, e.lastName = column.LastName, e.title = column.Title;\n\nCREATE INDEX product_id FOR (p:Product) ON (p.productID);\nCREATE INDEX product_name FOR (p:Product) ON (p.productName);\nCREATE INDEX employee_id FOR (e:Employee) ON (e.employeeID);\nCALL db.awaitIndexes();\n\nLOAD CSV WITH HEADERS FROM 'https://gist.githubusercontent.com/jexp/054bc6baf36604061bf407aa8cd08608/raw/8bdd36dfc88381995e6823ff3f419b5a0cb8ac4f/orders.csv' AS column\nMATCH (order:Order {orderID: column.OrderID})\nMATCH (product:Product {productID: column.ProductID})\nMERGE (order)-[op:CONTAINS]->(product)\n  ON CREATE SET op.unitPrice = toFloat(column.UnitPrice), op.quantity = toFloat(column.Quantity);\n\nLOAD CSV WITH HEADERS FROM 'https://gist.githubusercontent.com/jexp/054bc6baf36604061bf407aa8cd08608/raw/8bdd36dfc88381995e6823ff3f419b5a0cb8ac4f/orders.csv' AS column\nMATCH (order:Order {orderID: column.OrderID})\nMATCH (employee:Employee {employeeID: column.EmployeeID})\nMERGE (employee)-[:SOLD]->(order);\n\nLOAD CSV WITH HEADERS FROM 'https://gist.githubusercontent.com/jexp/054bc6baf36604061bf407aa8cd08608/raw/8bdd36dfc88381995e6823ff3f419b5a0cb8ac4f/employees.csv' AS column\nMATCH (employee:Employee {employeeID: column.EmployeeID})\nMATCH (manager:Employee {employeeID: column.ReportsTo})\nMERGE (employee)-[:REPORTS_TO]->(manager);\n")),(0,r.kt)("p",null,"If you are going to use different dataset to migrate, be aware of the\ndifferences between Neo4j and ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/reference-guide/data-types"},"Memgraph data\ntypes")," (for example, Memgraph doesn't support\n",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime()")," as there is no temporal type in Memgraph that supports timezones yet,\nbut you can modify data to use ",(0,r.kt)("inlineCode",{parentName:"p"},"localDateTime()"),")."),(0,r.kt)("h2",{id:"exporting-data-from-neo4j"},"Exporting data from Neo4j"),(0,r.kt)("p",null,"Download the CSV file\n",(0,r.kt)("a",{parentName:"p",href:"https://public-assets.memgraph.com/import-data/load-csv-cypher/shipping.csv"},"shipping.csv"),"\ncontaining the data above if you don't want to go through the exporting process. "),(0,r.kt)("p",null,"To get your data out of Neo4j instance, use the Neo4j APOC export functionality.\nTo install APOC, select the project, then in the right-side menu select ",(0,r.kt)("em",{parentName:"p"},"Plugins\n-> APOC")," and press install."),(0,r.kt)("img",{src:n(3338).Z,className:"imgBorder"}),(0,r.kt)("p",null,"Then enable export by setting the configuration flag ",(0,r.kt)("inlineCode",{parentName:"p"},"apoc.export.file.enabled"),"\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"apoc.config")," file located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," directory. To open\nthe directory, select the active project, click on ",(0,r.kt)("em",{parentName:"p"},"...")," -> ",(0,r.kt)("em",{parentName:"p"},"Open folder")," ->\n",(0,r.kt)("em",{parentName:"p"},"Configuration"),". "),(0,r.kt)("p",null,"Export the data into a CSV file using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL apoc.export.csv.all("shipping.csv", {})\n')),(0,r.kt)("p",null,"Once exported, the file is located in Neo4j's ",(0,r.kt)("em",{parentName:"p"},"Import")," folder. To open it,\nselect the active project, click on ",(0,r.kt)("em",{parentName:"p"},"...")," -> ",(0,r.kt)("em",{parentName:"p"},"Open folder")," -> ",(0,r.kt)("em",{parentName:"p"},"Import"),"."),(0,r.kt)("img",{src:n(37247).Z,className:"imgBorder"}),(0,r.kt)("h2",{id:"importing-data-into-memgraph"},"Importing data into Memgraph"),(0,r.kt)("p",null,"Now that the CSV file containing the needed data has been generated,  let's\nimport data into Memgraph. "),(0,r.kt)("p",null,"As the original location of file is quite cumbersome, relocate it somewhere\nmore accessible. "),(0,r.kt)("h3",{id:"1-starting-memgraph-with-docker"},"1. Starting Memgraph with Docker"),(0,r.kt)("p",null,"When working with Docker, the file need to be transferred from your local\ndirectory into the Docker container where Memgraph can access it."),(0,r.kt)("p",null,"This can be done by copying the file into your running instance. "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run Memgraph with"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"docker run -it -p 7687:7687 -p 7444:7444 -p 3000:3000 memgraph/memgraph-platform\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"To copy the file inside the container, open a new terminal to find out the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINER ID")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker ps"),", then run:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"docker cp /path_to_local_folder/shipping.csv <container_ID>:/usr/lib/memgraph/shipping.csv\n")),(0,r.kt)("p",{parentName:"li"},"If the container ID is ",(0,r.kt)("inlineCode",{parentName:"p"},"bed1e5c9192d")," and the file is locally located at\n",(0,r.kt)("inlineCode",{parentName:"p"},"C:/Data")," the command would look like this:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"docker cp C:/Data/shipping.csv bed1:/usr/lib/memgraph/shipping.csv\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"To check if the files are inside the container, first run: "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"docker exec -it CONTAINER_ID bash\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"List the files inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph"),". "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'C:\\Users\\Vlasta>docker ps\nCONTAINER ID   IMAGE                        COMMAND                  CREATED         STATUS         PORTS                                                                    NAMES\nbed1e5c9192d   memgraph/memgraph-platform   "/bin/sh -c \'/usr/bi\u2026"   2 minutes ago   Up 2 minutes   0.0.0.0:3000->3000/tcp, 0.0.0.0:7444->7444/tcp, 0.0.0.0:7687->7687/tcp   recursing_blackburn\n\nC:\\Users\\Vlasta>docker cp C:/Data/shipping.csv bed1:/usr/lib/memgraph/shipping.csv\n\nC:\\Users\\Vlasta>docker exec -it bed1 bash\nroot@bed1e5c9192d:/# ls /usr/lib/memgraph\nauth_module  memgraph  python_support  query_modules  shipping.csv\nroot@bed1e5c9192d:/#\n')))),(0,r.kt)("h3",{id:"2-gaining-speed-with-indexes-and-analytical-storage-mode"},"2. Gaining speed with indexes and analytical storage mode"),(0,r.kt)("p",null,"Although the dataset imported in this tutorial is quite small, one day you might\nwant to import really big datasets with billions of nodes and relationships and\nyou will require all the extra speed you can get. "),(0,r.kt)("p",null,"To gain speed you can ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/reference-guide/indexing"},"create indexes")," on the\nproperties used to connect nodes with relationships which are the values in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," column in the CSV files, and in Memgraph they will be named ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeID"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To create indexes, run: ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE INDEX ON :Employee(nodeID);\nCREATE INDEX ON :Order(nodeID);\nCREATE INDEX ON :Product(nodeID);\n")),(0,r.kt)("p",null,"You can also change the ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/2.9.0/reference-guide/storage-modes"},"storage mode")," from\n",(0,r.kt)("inlineCode",{parentName:"p"},"IN_MEMORY_TRANSACTIONAL")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"IN_MEMORY_ANALYTICAL"),". This will disable the\ncreation of durability files (snapshots and WAL files) and you will no longer\nhave any ACID guarantees. Other transactions will be able to see the changes of\nongoing transactions. Also, transaction will be able to see the changes they are\ndoing. This means that the transactions can be committed in random orders, and\nthe updates to the data, in the end, might not be correct. "),(0,r.kt)("p",null,"But, if you import on one thread, batch of data after a batch of data, there\nshould be absolutely no issues, and you will gain 6 times faster import with 6\ntimes less memory consumption."),(0,r.kt)("p",null,"After import you can switch back to the ",(0,r.kt)("inlineCode",{parentName:"p"},"IN_MEMORY_TRANSACTIONAL")," storage mode or\ncontinue running analytics queries (only read queries) in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"IN_MEMORY_ANALYTICAL")," mode to continue benefiting from low memory consumption. "),(0,r.kt)("p",null,"To switch between modes, run the following queries on a running instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"STORAGE MODE IN_MEMORY_ANALYTICAL;\nSTORAGE MODE IN_MEMORY_TRANSACTIONAL;\n")),(0,r.kt)("p",null,"To check the current storage mode, run: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW STORAGE INFO;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Change the storage mode to analytical before import.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"STORAGE MODE IN_MEMORY_ANALYTICAL;\n")),(0,r.kt)("h3",{id:"3-importing-nodes"},"3. Importing nodes"),(0,r.kt)("p",null,"To import nodes using a LOAD CSV clause let's examine the clause syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "csv-file-path.csv" ( WITH | NO ) HEADER [IGNORE BAD] [DELIMITER <delimiter-string>] [QUOTE <quote-string>] AS <variable-name>\n')),(0,r.kt)("p",null,"The file is now located at ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/shipping.csv")," and it has a header\nrow. There is no need to ignore bad rows, the default deliminator is ",(0,r.kt)("inlineCode",{parentName:"p"},",")," and\nthe default quote character ",(0,r.kt)("inlineCode",{parentName:"p"},'"'),", the same as in the exported CSV file, so no\nchanges are necessary."),(0,r.kt)("p",null,"The first row of the LOAD CSV clause therefore looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/usr/lib/memgraph/shipping.csv" WITH HEADER AS row\n')),(0,r.kt)("p",null,"Nodes are always imported before relationships so they will be imported first. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"shipping.csv")," file contains the following columns important for node\ncreation: ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"labels"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"employeeID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lastName"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orderID"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"productID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"productName"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"shipName"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"unitPrice"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," property is actually an internal node ID needed to create\nrelationships later on."),(0,r.kt)("p",null,"Execute queries in Memgraph Lab. Open your browser and go to\n",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/"),", ",(0,r.kt)("strong",{parentName:"p"},"Connect now")," to the instance and go to the ",(0,r.kt)("strong",{parentName:"p"},"Query\nExecution")," section."),(0,r.kt)("h4",{id:"employee-nodes"},"Employee nodes"),(0,r.kt)("p",null,"Begin with ",(0,r.kt)("inlineCode",{parentName:"p"},"Employee")," nodes. "),(0,r.kt)("p",null,"After establishing the location and format of the CSV file, filter out the rows\nthat contain the label ",(0,r.kt)("inlineCode",{parentName:"p"},":Employee"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._labels = ':Employee'\n")),(0,r.kt)("p",null,"Then, create nodes with a certain label and properties. As an example, let's\nlook at the property ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),". To add the property to the node, define its name in\nMemgraph and assigned the value of a specific column in the CSV file. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._labels = ':Employee'\nCREATE (e:Employee {nodeID: row._id})\n")),(0,r.kt)("p",null,"So ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeID: row._id")," part of the query instructs Memgraph to create a property\nnamed ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeID")," and assign it the value paired with key ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),". First created\nnode will be assigned the value from the first data row, second node from the\nsecond data row, etc."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After matching up the keys and values for all properties, the finished query looks like this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._labels = ':Employee'\nCREATE (e:Employee {nodeID: row._id, employeeID: row.employeeID, firstName: row.firstName, lastName: row.lastName, title: row.title});\n\nMATCH (e:Employee)\nRETURN e; \n")),(0,r.kt)("p",null,"The second query will show all 9 created nodes. "),(0,r.kt)("p",null,"Copy the query in the ",(0,r.kt)("strong",{parentName:"p"},"Cypher Editor")," and ",(0,r.kt)("strong",{parentName:"p"},"Run Query"),"."),(0,r.kt)("img",{src:n(55881).Z,className:"imgBorder"}),(0,r.kt)("h4",{id:"order-nodes"},"Order nodes"),(0,r.kt)("p",null,"Relevant properties for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Order")," nodes are ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orderID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"shipName"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To create ",(0,r.kt)("inlineCode",{parentName:"strong"},"Order")," nodes run the following query:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._labels = ':Order'\nCREATE (o:Order {nodeID: row._id, orderID: row.orderID, shipName: row.shipName});\n\nMATCH (o:Order)\nRETURN o; \n")),(0,r.kt)("p",null,"The second query will show all 830 created nodes:"),(0,r.kt)("img",{src:n(479).Z,className:"imgBorder"}),(0,r.kt)("h4",{id:"product-nodes"},"Product nodes"),(0,r.kt)("p",null,"Relevant properties for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Product")," nodes are ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"productID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"productName"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"unitPrice"),"."),(0,r.kt)("p",null,"As the parser parses all the values as strings, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"unitPrice")," are numbers,\nthey need to be converted to appropriate data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To create ",(0,r.kt)("inlineCode",{parentName:"strong"},"Product")," nodes run the following query:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._labels = ':Product'\nCREATE (p:Product {nodeID: row._id, productID: row.productID, productName: row.productName, unitPrice: ToFloat(row.unitPrice)});\n\nMATCH (p:Product)\nRETURN p; \n")),(0,r.kt)("p",null,"The second query will show all 77 created nodes:"),(0,r.kt)("img",{src:n(19116).Z,className:"imgBorder"}),(0,r.kt)("h3",{id:"4-graph-improvements"},"4. Graph improvements"),(0,r.kt)("p",null,"At this point it would be nice to improve the look of the nodes visually. At the\nmoment, nodes in the graph are represented with their labels, but it would be\nmore useful if their name attribute was written. "),(0,r.kt)("p",null,"To adjust the look of the graph using Graph Style Language, open the Graph Style\nEditor. Find the following code block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@NodeStyle HasProperty(node, "name") {\n  label: AsText(Property(node, "name"))\n}\n')),(0,r.kt)("p",null,"It defines that if the node has the property ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", its label on the visual\ngraph will be that property. "),(0,r.kt)("p",null,"As none of the imported nodes have the property ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", this part of the code\nneeds to be adjusted to use the properties nodes do have. "),(0,r.kt)("p",null,"Replace those three lines of code with the following block and ",(0,r.kt)("strong",{parentName:"p"},"Apply")," the\nchanges:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@NodeStyle HasProperty(node, "firstName") {\n  label: AsText(Property(node, "firstName"))\n}\n\n@NodeStyle HasProperty(node, "orderID") {\n  label: AsText(Property(node, "orderID"))\n}\n\n@NodeStyle HasProperty(node, "productName") {\n  label: AsText(Property(node, "productName"))\n}\n')),(0,r.kt)("img",{src:n(53254).Z,className:"imgBorder"}),(0,r.kt)("p",null,"Visual appearance of the graph can be changed in many different ways, so be sure\nto check the ",(0,r.kt)("a",{parentName:"p",href:"/memgraph-lab/graph-style-script-language"},"GSS documentation"),". "),(0,r.kt)("h3",{id:"5-importing-relationships"},"5. Importing relationships"),(0,r.kt)("p",null,"Now that all the 916 nodes have been imported, they can be connected with relationships. "),(0,r.kt)("p",null,"The first row of the LOAD CSV remains the same:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'LOAD CSV FROM "/usr/lib/memgraph/shipping.csv" WITH HEADER AS row\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"shipping.csv")," file contains the following values important for relationship\ncreation:  ",(0,r.kt)("inlineCode",{parentName:"p"},"_type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_end"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"quantity")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"unitPrice"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_type")," defines relationships type,  ",(0,r.kt)("inlineCode",{parentName:"p"},"_start")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_end")," values define which\nnodes need to be connected based on their ID. "),(0,r.kt)("h4",{id:"reports_to-relationships"},":REPORTS_TO relationships"),(0,r.kt)("p",null,"Begin with ",(0,r.kt)("inlineCode",{parentName:"p"},":REPORTS_TO")," relationship. "),(0,r.kt)("p",null,"After establishing the location and format of the CSV file, filter out the rows\nthat contain the type ",(0,r.kt)("inlineCode",{parentName:"p"},"REPORTS_TO"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._type = 'REPORTS_TO'\n")),(0,r.kt)("p",null,"Now instruct Memgraph to find the nodes with certain IDs in order to create a\nrelationship between them. As node IDs are unique we can just define that any\nnode with a certain ID is a starting point, and another node with a certain ID\nis the end point of the relationship type ",(0,r.kt)("inlineCode",{parentName:"p"},"REPORTS_TO"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The LOAD CSV query creates 8 ",(0,r.kt)("inlineCode",{parentName:"strong"},":REPORTS_TO")," relationships:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._type = 'REPORTS_TO'\nMATCH (n {nodeID: row._start}), (n2 {nodeID: row._end})\nCREATE (n)-[:REPORTS_TO]->(n2);\n\nMATCH p=()-[:REPORTS_TO]->()\nRETURN p;\n")),(0,r.kt)("p",null,"The second query returns all the nodes connected with the ",(0,r.kt)("inlineCode",{parentName:"p"},"REPORTS_TO")," type of\nrelationship. "),(0,r.kt)("img",{src:n(73938).Z,className:"imgBorder"}),(0,r.kt)("h4",{id:"sold-relationships"},":SOLD relationships"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The LOAD CSV query creates 830 ",(0,r.kt)("inlineCode",{parentName:"strong"},":SOLD")," relationships:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._type = 'SOLD'\nMATCH (n {nodeID: row._start}), (n2 {nodeID: row._end})\nCREATE (n)-[:SOLD]->(n2);\n\nMATCH p=()-[:SOLD]->()\nRETURN p;\n")),(0,r.kt)("p",null,"The second query returns all the nodes connected with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SOLD")," type of\nrelationship. "),(0,r.kt)("img",{src:n(2740).Z,className:"imgBorder"}),(0,r.kt)("h4",{id:"contains-relationships"},":CONTAINS relationships"),(0,r.kt)("p",null,"This relationship type has properties about the ",(0,r.kt)("inlineCode",{parentName:"p"},"quantity")," of products one order\ncontains."),(0,r.kt)("p",null,"As the parser parses all the values as strings, and the value of this\nrelationship property are numbers, they need to be converted to appropriate\ntype. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The LOAD CSV query creates 2155 ",(0,r.kt)("inlineCode",{parentName:"strong"},"CONTAINS")," relationships:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"LOAD CSV FROM \"/usr/lib/memgraph/shipping.csv\" WITH HEADER AS row\nWITH row WHERE row._type = 'CONTAINS'\nMATCH (n {nodeID: row._start}), (n2 {nodeID: row._end})\nCREATE (n)-[:CONTAINS {quantity: ToInteger(row.quantity)}]->(n2);\n\nMATCH p=()-[:CONTAINS]->()\nRETURN p;\n")),(0,r.kt)("p",null,"The second query returns all the nodes connected with the ",(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINS")," type of\nrelationship. "),(0,r.kt)("img",{src:n(35158).Z,className:"imgBorder"}),(0,r.kt)("h2",{id:"after-import"},"After import"),(0,r.kt)("p",null,"Once all the 916 nodes and 2993 relationships have been imported decide whether\nyou want to switch back to the transactional storage mode or not. Remember that\nthe analytical storage mode you are using right now has no ACID compliance. "),(0,r.kt)("p",null,"To switch back to the analytical storage mode, run: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"STORAGE MODE IN_MEMORY_TRANSACTIONAL;\n")),(0,r.kt)("p",null,"To check the switch was successful, run: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW STORAGE INFO;\n")),(0,r.kt)("p",null,"You can query the database using the ",(0,r.kt)("a",{parentName:"p",href:"/cypher-manual"},(0,r.kt)("strong",{parentName:"a"},"Cypher query\nlanguage")),", use various graph algorithms and modules from our\nopen-source repository ",(0,r.kt)("a",{parentName:"p",href:"/mage"},(0,r.kt)("strong",{parentName:"a"},"MAGE"))," to solve graph analytics problems,\ncreate awesome customized visual displays of your nodes and relationships with\n",(0,r.kt)("a",{parentName:"p",href:"/memgraph-lab/graph-style-script-language"},(0,r.kt)("strong",{parentName:"a"},"Graph Style Script")),", find out\nhow to connect any ",(0,r.kt)("a",{parentName:"p",href:"/memgraph/import-data/kafka"},(0,r.kt)("strong",{parentName:"a"},"streams of data"))," you might\nhave with Memgraph and above all - enjoy your new graph database!"))}c.isMDXComponent=!0},53254:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/GSS-b9e052fdfb8fc2737313175441e7310c.png"},35158:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/contains-74b84ec15e5c2cb09566868ab5732038.png"},55881:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/employees-8122b541c49e274a007b97e10be7c4b8.png"},37247:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/import_folder-5b6850c63fbb1a7582b3abbb53d33219.png"},3338:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/install_APOC-235b7a07dced9f861c053744a4b5d6df.png"},479:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/orders-10225ee12e52f7b7c69f41ee57b7c28a.png"},19116:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/product-46af26797ba83991311cf63e77f6fc8c.png"},73938:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/reports_to-7b286f4410656ee5a266857450e4e39e.png"},51191:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/shipping_schema-05e8c939c4632263be7d43a6729ad753.png"},2740:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/sold-1ff7d0c4cf1d989d76d46fbb2e4f172c.png"}}]);