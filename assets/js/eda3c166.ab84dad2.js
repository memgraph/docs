"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[65423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,h=u["".concat(d,".").concat(g)]||u[g]||c[g]||o;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},31722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var a=n(87462),r=(n(67294),n(3905)),o=n(93996);const i={id:"on-disk-storage",title:"How to use on-disk storage",sidebar_label:"Use on-disk storage",slug:"/how-to-guides/on-disk-storage"},s=void 0,d={unversionedId:"how-to-guides/on-disk-storage/on-disk-storage",id:"how-to-guides/on-disk-storage/on-disk-storage",title:"How to use on-disk storage",description:"Since Memgraph is an in-memory graph database, the GQLAlchemy library provides",source:"@site/gqlalchemy/how-to-guides/on-disk-storage/on-disk-storage.md",sourceDirName:"how-to-guides/on-disk-storage",slug:"/how-to-guides/on-disk-storage",permalink:"/docs/gqlalchemy/how-to-guides/on-disk-storage",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/on-disk-storage/on-disk-storage.md",tags:[],version:"current",frontMatter:{id:"on-disk-storage",title:"How to use on-disk storage",sidebar_label:"Use on-disk storage",slug:"/how-to-guides/on-disk-storage"},sidebar:"gqlalchemy",previous:{title:"Manage database triggers",permalink:"/docs/gqlalchemy/how-to-guides/triggers"},next:{title:"Create a graph projection",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/graph-projection"}},p={},l=[{value:"Connect to Memgraph and an SQL database",id:"connect-to-memgraph-and-an-sql-database",level:2},{value:"Define schema",id:"define-schema",level:2},{value:"Create data",id:"create-data",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Since Memgraph is an in-memory graph database, the GQLAlchemy library provides\nan on-disk storage solution for large properties not used in graph algorithms.\nThis is useful when nodes or relationships have metadata that doesn\u2019t need to be\nused in any of the graph algorithms that need to be carried out in Memgraph, but\ncan be fetched after. In this how-to guide, you'll learn how to use an SQL\ndatabase to store node properties seamlessly as if they were being stored in\nMemgraph."),(0,r.kt)(o.ZP,{mdxType:"Neo4jWarning"}),(0,r.kt)("h2",{id:"connect-to-memgraph-and-an-sql-database"},"Connect to Memgraph and an SQL database"),(0,r.kt)("p",null,"First you need to do all necessary imports and connect to the running Memgraph\nand SQL database instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Memgraph, SQLitePropertyDatabase, Node, Field\nfrom typing import Optional\n\ngraphdb = Memgraph()\nSQLitePropertyDatabase('path-to-my-db.db', graphdb)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"graphdb")," creates a connection to an in-memory graph database and\n",(0,r.kt)("inlineCode",{parentName:"p"},"SQLitePropertyDatabase")," attaches to ",(0,r.kt)("inlineCode",{parentName:"p"},"graphdb")," in its constructor."),(0,r.kt)("h2",{id:"define-schema"},"Define schema"),(0,r.kt)("p",null,"For example, you can create the class ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," which maps to a node object in the\ngraph database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class User(Node):\n    id: int = Field(unique=True, exists=True, index=True, db=graphdb)\n    huge_string: Optional[str] = Field(on_disk=True)\n")),(0,r.kt)("p",null,"Here the property ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is a required ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," that creates uniqueness and existence\nconstraints inside Memgraph. You can notice that the property ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is also\nindexed on label ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"huge_string")," property is optional, and because the\n",(0,r.kt)("inlineCode",{parentName:"p"},"on_disk")," argument is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),", it will be saved into the SQLite database."),(0,r.kt)("h2",{id:"create-data"},"Create data"),(0,r.kt)("p",null,"Next, you can create some huge string, which won't be saved into the graph\ndatabase, but rather into the SQLite databse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'my_secret = "I LOVE DUCKS" * 1000\njohn = User(id=5, huge_string=my_secret).save(db)\njohn2 = User(id=5).load(db)\nprint(john2.huge_string)  # prints I LOVE DUCKS, a 1000 times\n')),(0,r.kt)("p",null,"Hopefully this guide has taught you how to use on-disk storage along with the\nin-memory graph database. If you have any more questions, join our community and\nping us on ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}u.isMDXComponent=!0},93996:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This feature only works with Memgraph. Neo4j is not supported.")))}i.isMDXComponent=!0}}]);