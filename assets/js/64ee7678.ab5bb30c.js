"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42286],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return h}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),h=r,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||o;return t?a.createElement(m,i(i({ref:n},d),{},{components:t})):a.createElement(m,i({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89790:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],l={id:"updating-nodes-and-relationships",title:"Updating nodes and relationships",sidebar_label:"Updating nodes and relationships"},p=void 0,s={unversionedId:"updating-nodes-and-relationships",id:"updating-nodes-and-relationships",title:"Updating nodes and relationships",description:"SET clause",source:"@site/cypher-manual/updating-nodes-and-relationships.md",sourceDirName:".",slug:"/updating-nodes-and-relationships",permalink:"/docs/cypher-manual/updating-nodes-and-relationships",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/updating-nodes-and-relationships.md",tags:[],version:"current",frontMatter:{id:"updating-nodes-and-relationships",title:"Updating nodes and relationships",sidebar_label:"Updating nodes and relationships"},sidebar:"cypher_manual",previous:{title:"Reading existing data",permalink:"/docs/cypher-manual/reading-existing-data"},next:{title:"Deleting nodes and relationships",permalink:"/docs/cypher-manual/deleting-nodes-and-relationships"}},d=[{value:"SET clause",id:"set-clause",children:[{value:"Creating and updating properties",id:"creating-and-updating-properties",children:[],level:3},{value:"Creating and updating node labels",id:"creating-and-updating-node-labels",children:[],level:3},{value:"Removing a property",id:"removing-a-property",children:[],level:3},{value:"Copy all properties",id:"copy-all-properties",children:[],level:3},{value:"Bulk update",id:"bulk-update",children:[],level:3}],level:2}],c={toc:d};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"set-clause"},"SET clause"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"SET")," clause to update labels on nodes and properties on nodes and\nrelationships."),(0,o.kt)("p",null,"Click ",(0,o.kt)("a",{parentName:"p",href:"/docs/cypher-manual/clauses/set"},"here")," for a more detailed explanation of what can be\ndone with ",(0,o.kt)("inlineCode",{parentName:"p"},"SET"),"."),(0,o.kt)("p",null,"Cypher supports combining multiple reads and writes using the ",(0,o.kt)("inlineCode",{parentName:"p"},"WITH")," clause.\nIn addition to combining, the ",(0,o.kt)("inlineCode",{parentName:"p"},"MERGE")," clause is provided which may create\npatterns if they do not exist."),(0,o.kt)("h3",{id:"creating-and-updating-properties"},"Creating and updating properties"),(0,o.kt)("p",null,"The SET clause can be used to create/update the value of a property on a node or\nrelationship:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:City)\nWHERE c.name = 'London'\nSET c.population = 8900000\nRETURN c\n")),(0,o.kt)("p",null,"The SET clause can be used to create/update the value of multiple properties\nnodes or relationships by separating them with a comma:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:City)\nWHERE c.name = 'London'\nSET c.population = 8900000, c.country = 'United Kingdom'\nRETURN c\n")),(0,o.kt)("h3",{id:"creating-and-updating-node-labels"},"Creating and updating node labels"),(0,o.kt)("p",null,"The SET clause can be used to create/update the label on a node. If the node has\na label, a new one will be added while the old one is left as is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:City:Location)\nSET c:City\nRETURN labels(c)\n")),(0,o.kt)("h3",{id:"removing-a-property"},"Removing a property"),(0,o.kt)("p",null,"The SET clause can be used to remove the value of a property on a node or\nrelationship by setting it to NULL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:City)\nWHERE c.name = 'London'\nSET c.country = NULL\nRETURN c\n")),(0,o.kt)("h3",{id:"copy-all-properties"},"Copy all properties"),(0,o.kt)("p",null,"If SET is used to copy the properties of one node/relationship to another, all\nthe properties of the latter will be removed and replaced with the new ones:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (p1:Person { name: 'Harry' }), (p2:Person { name: 'Anna' })\nSET p1 = p2\nRETURN p1, p2\n")),(0,o.kt)("h3",{id:"bulk-update"},"Bulk update"),(0,o.kt)("p",null,"You can use SET clause to do a bulk update. Here is an example of how to\nincrement everyone's age by 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n :Person) SET n.age = n.age + 1;\n")))}u.isMDXComponent=!0}}]);