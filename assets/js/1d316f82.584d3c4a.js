"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[28748],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=m(a),u=r,c=h["".concat(l,".").concat(u)]||h[u]||d[u]||o;return a?n.createElement(c,i(i({ref:t},p),{},{components:a})):n.createElement(c,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},91502:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=["components"],s={id:"graph-stream-processing-with-kafka",title:"Graph stream processing with Kafka and Memgraph",sidebar_label:"Graph stream processing with Kafka"},l=void 0,m={unversionedId:"tutorials/graph-stream-processing-with-kafka",id:"version-2.2.0/tutorials/graph-stream-processing-with-kafka",title:"Graph stream processing with Kafka and Memgraph",description:"In this tutorial, you will learn how to connect Memgraph to an existing Kafka",source:"@site/memgraph_versioned_docs/version-2.2.0/tutorials/graph-stream-processing-with-kafka.md",sourceDirName:"tutorials",slug:"/tutorials/graph-stream-processing-with-kafka",permalink:"/docs/memgraph/2.2.0/tutorials/graph-stream-processing-with-kafka",editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.2.0/tutorials/graph-stream-processing-with-kafka.md",tags:[],version:"2.2.0",frontMatter:{id:"graph-stream-processing-with-kafka",title:"Graph stream processing with Kafka and Memgraph",sidebar_label:"Graph stream processing with Kafka"},sidebar:"memgraph",previous:{title:"Migrate from a relational database to Memgraph",permalink:"/docs/memgraph/2.2.0/tutorials/migrate-relational-database"},next:{title:"Social network analysis with NetworkX",permalink:"/docs/memgraph/2.2.0/tutorials/social-network-analysis"}},p={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Data model",id:"data-model",level:2},{value:"1. Start the Kafka stream",id:"1-start-the-kafka-stream",level:3},{value:"2. Start Memgraph",id:"2-start-memgraph",level:3},{value:"3. Create a transformation module",id:"3-create-a-transformation-module",level:3},{value:"4. Copy transformation module into Docker",id:"4-copy-transformation-module-into-docker",level:3},{value:"5. Load the transformation module into Memgraph",id:"5-load-the-transformation-module-into-memgraph",level:3},{value:"6. Connect Memgraph to the Kafka stream",id:"6-connect-memgraph-to-the-kafka-stream",level:3},{value:"7. Analyze the streaming data",id:"7-analyze-the-streaming-data",level:3},{value:"Where to next?",id:"where-to-next",level:2}],h={toc:d};function u(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, you will learn how to connect Memgraph to an existing Kafka\nstream in order to analyze data in real-time."),(0,o.kt)("p",null,"If you are still very new to streaming, feel free to first read some of our blog\nposts about the topic to learn ",(0,o.kt)("a",{parentName:"p",href:"https://memgraph.com/blog/introduction-to-stream-processing"},"what stream processing\nis"),", ",(0,o.kt)("a",{parentName:"p",href:"https://memgraph.com/blog/batch-processing-vs-stream-processing"},"how it\ndiffers from batch\nprocessing")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://memgraph.com/blog/streaming-databases"},"how streaming databases work"),"."),(0,o.kt)("p",null,"Now that you've covered theory let's dive into practice!"),(0,o.kt)("p",null,"We will focus on processing real-time movie ratings that are streamed through\nKafka in order to generate movie recommendations using Memgraph and the Cypher\nquery language."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"To follow this tutorial, you will need:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},(0,o.kt)("strong",{parentName:"a"},"Docker"))),(0,o.kt)("li",{parentName:"ol"},"If you are using Linux, you will also need ",(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},(0,o.kt)("strong",{parentName:"a"},"Docker\nCompose"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://memgraph.com/download/#memgraph-lab"},(0,o.kt)("strong",{parentName:"a"},"Memgraph Lab"))," - visual user\ninterface that enables you to visualize graphs and execute Cypher queries"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://www.python.org/downloads/"},(0,o.kt)("strong",{parentName:"a"},"Python")))),(0,o.kt)("h2",{id:"data-model"},"Data model"),(0,o.kt)("p",null,"We didn't want you to worry about setting up Kafka and streaming data, that's\nwhy we've prepared a Kafka dummy stream of the reduced\n",(0,o.kt)("a",{parentName:"p",href:"https://movielens.org/"},"MovieLens")," dataset for you to practice on."),(0,o.kt)("p",null,"Each JSON message in the stream will be structured like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nocopy"},'"userId": "112",\n"movie": {\n  "movieId": "4993",\n  "title": "Lord of the Rings: The Fellowship of the Ring, The (2001)",\n  "genres": ["Adventure", "Fantasy"]\n},\n"rating": "5",\n"timestamp": "1442535783"\n')),(0,o.kt)("p",null,'If we were to describe in one sentence the process that generated this data, it\nwould be: "A user rated a movie of a genre". That is how we get the nodes and\nrelationships for our graph data model.'),(0,o.kt)("p",null,"Nodes are labeled ",(0,o.kt)("inlineCode",{parentName:"p"},"User"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Genre")," while the relationships are of\ntype ",(0,o.kt)("inlineCode",{parentName:"p"},"RATED")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"OF_GENRE"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"User")," has the property ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," has the properties ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"Genre")," has the property ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"RATED")," has ",(0,o.kt)("inlineCode",{parentName:"p"},"rating")," (1.0 - 5.0) and\n",(0,o.kt)("inlineCode",{parentName:"p"},"timestamp")," properties, and ",(0,o.kt)("inlineCode",{parentName:"p"},"OF_GENRE")," relationship has no properties."),(0,o.kt)("img",{src:a(60089).Z,className:"imgBorder"}),(0,o.kt)("h3",{id:"1-start-the-kafka-stream"},"1. Start the Kafka stream"),(0,o.kt)("p",null,"Start by making a clone of the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/memgraph/data-streams"},"data-streams")," repository. This\nproject contains the data stream, a Kafka setup and MemgraphDB."),(0,o.kt)("p",null,"Open a terminal and use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"git clone https://github.com/memgraph/data-streams.git\n")),(0,o.kt)("p",null,"Now place yourself in the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-streams")," directory and run the following command\nto start the Kafka stream:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"python start.py --platforms kafka --dataset movielens\n")),(0,o.kt)("p",null,"Give the script a couple of minutes, and you should see messages being consumed\nin the console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nocopy"},"All topics:\n['ratings']\nKafka  : {'userId': '1', 'movie': {'movieId': '1', 'title': 'Toy Story (1995)', 'genres': ['Adventure', 'Animation', 'Children', 'Comedy', 'Fantasy']}, 'rating': '4.0', 'timestamp': '964982703'}\nKafka  : {'userId': '1', 'movie': {'movieId': '3', 'title': 'Grumpier Old Men (1995)', 'genres': ['Comedy', 'Romance']}, 'rating': '4.0', 'timestamp': '964981247'}\nKafka  : {'userId': '1', 'movie': {'movieId': '6', 'title': 'Heat (1995)', 'genres': ['Action', 'Crime', 'Thriller']}, 'rating': '4.0', 'timestamp': '964982224'}\nKafka  : {'userId': '1', 'movie': {'movieId': '47', 'title': 'Seven (a.k.a. Se7en) (1995)', 'genres': ['Mystery', 'Thriller']}, 'rating': '5.0', 'timestamp': '964983815'}\nKafka  : {'userId': '1', 'movie': {'movieId': '50', 'title': 'Usual Suspects, The (1995)', 'genres': ['Crime', 'Mystery', 'Thriller']}, 'rating': '5.0', 'timestamp': '964982931'}\n")),(0,o.kt)("h3",{id:"2-start-memgraph"},"2. Start Memgraph"),(0,o.kt)("p",null,"If we were using a proper Kafka stream, we would start Memgraph independently\nusing Docker, but because we are using a dummy stream, we will start Memgraph\nwithin the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-streams")," project. Given that we need to access the data stream\nrunning in a separate Docker container, we need to run Memgraph on the same\nnetwork."),(0,o.kt)("p",null,"Open a new terminal and position yourself in the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-streams")," directory you\ncloned earlier, then build the Memgraph image with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"docker-compose build memgraph-mage\n")),(0,o.kt)("p",null,"When the image is built, start the container with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"docker-compose up memgraph-mage\n")),(0,o.kt)("p",null,"You should get the following reply:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nocopy"},"Container data-streams-memgraph-mage-1  Created 0.2s\nAttaching to data-streams-memgraph-mage-1\ndata-streams-memgraph-mage-1  | You are running Memgraph v2.1.0\ndata-streams-memgraph-mage-1  | To get started with Memgraph, visit https://memgr.ph/start\n")),(0,o.kt)("p",null,"To check if Memgraph is indeed running, open ",(0,o.kt)("strong",{parentName:"p"},"Memgraph Lab")," and connect to the\nempty database."),(0,o.kt)("h3",{id:"3-create-a-transformation-module"},"3. Create a transformation module"),(0,o.kt)("p",null,"Before we can connect Memgraph to a data stream, we need to instruct it on how\nto transform the incoming messages, so they can be consumed correctly. This is\ndone through a Python transformation module. If you open the\n",(0,o.kt)("inlineCode",{parentName:"p"},"data-streams/memgraph/transformations/movielens.py")," you'll see one such\ntransformation file we've created for this tutorial."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import mgp\nimport json\n\n\n@mgp.transformation\ndef rating(messages: mgp.Messages\n             ) -> mgp.Record(query=str, parameters=mgp.Nullable[mgp.Map]):\n    result_queries = []\n\n    for i in range(messages.total_messages()):\n        message = messages.message_at(i)\n        movie_dict = json.loads(message.payload().decode(\'utf8\'))\n        result_queries.append(\n            mgp.Record(\n                query=("MERGE (u:User {id: $userId}) "\n                       "MERGE (m:Movie {id: $movieId, title: $title}) "\n                       "WITH u, m "\n                       "UNWIND $genres as genre "\n                       "MERGE (m)-[:OF_GENRE]->(:Genre {name: genre}) "\n                       "CREATE (u)-[:RATED {rating: ToFloat($rating), timestamp: $timestamp}]->(m)"),\n                parameters={\n                    "userId": movie_dict["userId"],\n                    "movieId": movie_dict["movie"]["movieId"],\n                    "title": movie_dict["movie"]["title"],\n                    "genres": movie_dict["movie"]["genres"],\n                    "rating": movie_dict["rating"],\n                    "timestamp": movie_dict["timestamp"]}))\n\n    return result_queries\n')),(0,o.kt)("p",null,"Each JSON message triggers a Cypher query that maps the elements of the message\nas a graph object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MERGE (u:User {id: $userId})\nMERGE (m:Movie {id: $movieId, title: $title})\nWITH u, m\nUNWIND $genres as genre\nMERGE (m)-[:OF_GENRE]->(:Genre {name: genre})\nCREATE (u)-[:RATED {rating: ToFloat($rating), timestamp: $timestamp}]->(m)\n")),(0,o.kt)("p",null,"In the first two line we define two nodes, ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie"),", and define their\nproperties. If you look at the messages you are receiving from Kafka, you will\nnotice each movie has several genres. We want to store each genre as a separate\nnode and that is why we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"UNWIND")," clause to separate types of genre."),(0,o.kt)("p",null,"In the last two lines, we create relationships between nodes and define their\nproperties. ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," nodes belong to a certain ",(0,o.kt)("inlineCode",{parentName:"p"},"Genre"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," nodes rated\n",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," nodes by a certain ",(0,o.kt)("inlineCode",{parentName:"p"},"rating")," in the form of a decimal number (",(0,o.kt)("inlineCode",{parentName:"p"},"Float"),") at\na certain time."),(0,o.kt)("h3",{id:"4-copy-transformation-module-into-docker"},"4. Copy transformation module into Docker"),(0,o.kt)("p",null,"Once again, the transformation module you will need to complete this tutorial is\nalready locked among the project files so feel free to skip this step and go\nstraight to loading. But hopefully, there will come a time when you will need to\ncreate your own transformation modules and you need to know how to copy them\ninto the Docker container."),(0,o.kt)("p",null,"Let's play around a bit:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-streams/memgraph/transformations/movielens.py")," file to the\nroot directory of your computer and rename it ",(0,o.kt)("inlineCode",{parentName:"p"},"movielens2.py"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open the file ",(0,o.kt)("inlineCode",{parentName:"p"},"movielens2.py")," and rename the relationship ",(0,o.kt)("inlineCode",{parentName:"p"},"OF_GENRE")," to just\n",(0,o.kt)("inlineCode",{parentName:"p"},"OF"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'"MERGE (m)-[:OF]->(:Genre {name: genre}) "\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open a new terminal and find out the CONTAINER ID of the ",(0,o.kt)("inlineCode",{parentName:"p"},"memgraph-mage"),"\ncontainer by running:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"docker ps\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Position yourself in the root directory (or in the folder where\n",(0,o.kt)("inlineCode",{parentName:"p"},"movielens2.py")," file is) and copy the file ",(0,o.kt)("inlineCode",{parentName:"p"},"movielens2.py")," transformation\nmodule to the ",(0,o.kt)("inlineCode",{parentName:"p"},"memgraph-mage")," container by running:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"docker cp movielens2.py CONTAINER_ID:/usr/lib/memgraph/query_modules/movielens2.py\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check if you copied the file correctly! Enter the container:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"docker exec -it CONTAINER_ID bash\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"List all the files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," folder and check\nif the ",(0,o.kt)("inlineCode",{parentName:"p"},"movielens2.py")," file is there:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"ls /usr/lib/memgraph/query_modules\n")))),(0,o.kt)("h3",{id:"5-load-the-transformation-module-into-memgraph"},"5. Load the transformation module into Memgraph"),(0,o.kt)("p",null,"Once your transformation module is safe in Docker, you can load it into\nMemgraph."),(0,o.kt)("p",null,"All modules are automatically loaded into Memgraph when it starts, but if the\nmodule was copied into Docker while the Memgraph was already running, like it\nwas now in step 4, it needs to be loaded by using a Cypher procedure."),(0,o.kt)("p",null,"You can either use the ",(0,o.kt)("inlineCode",{parentName:"p"},"CALL mg.load_all()")," procedure to reload all existing\nmodules and load any newly added ones, or ",(0,o.kt)("inlineCode",{parentName:"p"},'CALL mg.load("module_name")')," to\n(re)load a specific module."),(0,o.kt)("p",null,"Switch to Memgraph Lab and switch to the ",(0,o.kt)("strong",{parentName:"p"},"Query")," tab. In the ",(0,o.kt)("strong",{parentName:"p"},"Query editor"),"\n(the black part of the Lab, looking like a terminal) enter the procedure of your\nchoice and then press ",(0,o.kt)("strong",{parentName:"p"},"Run query")," to load the transformation module."),(0,o.kt)("p",null,"I am going to load the original transformation module created for this tutorial\n",(0,o.kt)("inlineCode",{parentName:"p"},"movielens.py"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("movielens");\n')),(0,o.kt)("p",null,"If you don\u2019t receive an error, the module was loaded successfully."),(0,o.kt)("img",{src:a(50110).Z,className:"imgBorder"}),(0,o.kt)("h3",{id:"6-connect-memgraph-to-the-kafka-stream"},"6. Connect Memgraph to the Kafka stream"),(0,o.kt)("p",null,"We will connect Memgraph to the Kafka stream by running several queries in\nMemgraph Lab."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Position yourself in the ",(0,o.kt)("strong",{parentName:"p"},"Query")," tab and enter the following query into the\n",(0,o.kt)("strong",{parentName:"p"},"Query editor")," (terminal looking area):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE KAFKA STREAM movielens_stream\nTOPICS ratings\nTRANSFORM movielens.rating\nBOOTSTRAP_SERVERS "kafka:9092";\n')),(0,o.kt)("p",{parentName:"li"},"In the first line, we gave the stream a custom name, and in the second, we\ndefined the name of the topic we are reading the data from. In the third line\nwe defined the transformation procedure by writing the name of the .py file\nwe are using to transform the data, followed by the function we defined in\nthat file. In the last line we defined the bootstrap servers.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Hit the ",(0,o.kt)("strong",{parentName:"p"},"Run query")," and if no error appears, you are good to go to the next\nstep.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Now that we have created the stream, it needs to be started in order to\nconsume messages:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"START STREAM movielens_stream;\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To check if the stream was created and started correctly, run the following\nquery:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW STREAMS;\n")),(0,o.kt)("img",{src:a(75955).Z,className:"imgBorder"}))),(0,o.kt)("p",null,"That\u2019s it! You just connected to a real-time data source with Memgraph. If you\nopen the ",(0,o.kt)("strong",{parentName:"p"},"Overview")," tab in Memgraph Lab, you should see that a number of nodes\nand edges has already been created."),(0,o.kt)("img",{src:a(96993).Z,className:"imgBorder"}),(0,o.kt)("p",null,"Just to be sure, open the tab ",(0,o.kt)("strong",{parentName:"p"},"Graph Schema")," and click on the ",(0,o.kt)("strong",{parentName:"p"},"Generate graph\nschema")," button to see if the graph follows the ",(0,o.kt)("strong",{parentName:"p"},"Data model")," we defined at the\nbeginning of the article."),(0,o.kt)("img",{src:a(44563).Z,className:"imgBorder"}),(0,o.kt)("p",null,"We are all set to start exploring the data!"),(0,o.kt)("h3",{id:"7-analyze-the-streaming-data"},"7. Analyze the streaming data"),(0,o.kt)("p",null,"We will use Cypher for data analysis, the most popular query language when it\ncomes to graph databases. It provides an intuitive way to work with property\ngraphs."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let\u2019s return 10 movies from the database:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (movie:Movie)\nRETURN movie.title\nLIMIT 10;\n")),(0,o.kt)("p",{parentName:"li"},"In the first line, we are matching all ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," nodes and saving them in\n",(0,o.kt)("inlineCode",{parentName:"p"},"movie")," variable. Then we are return the ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," property of those nodes but\nlimiting the result to show only the first 10."),(0,o.kt)("img",{src:a(27815).Z,className:"imgBorder"})),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Find Adventure and Fantasy movies:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (movie:Movie)-[:OF_GENRE]->(:Genre {name:"Fantasy"})\nMATCH (movie)-[:OF_GENRE]->(:Genre {name:"Adventure"})\nRETURN movie.title\nORDER BY movie.title\nLIMIT 10;\n')),(0,o.kt)("p",{parentName:"li"},"In the first line, we are matching all ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," nodes of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Fantasy")," genre.\nThen we are further filtering those ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," nodes to be of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Adventure"),"\ngenre as well. The result of this query will be an alphabetized list of 10\nmovie titles of those two genres."),(0,o.kt)("p",{parentName:"li"},"Also, don't worry if the results show less than 10 movies - it just means not\nenough movies of that genre were received from the stream."),(0,o.kt)("img",{src:a(18682).Z,className:"imgBorder"})),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Calculate the average rating score for the movie Matrix:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (:User)-[r:RATED]->(m:Movie)\nWHERE m.title = "Matrix, The (1999)"\nRETURN avg(r.rating)\n')),(0,o.kt)("p",{parentName:"li"},"We are matching users and their ratings of specific movies. Then we filter\nonly the ratings given to the movie Matrix and return the average rating."),(0,o.kt)("p",{parentName:"li"},"If your result is ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", check your stream for some other movie title and\nedit the query."),(0,o.kt)("img",{src:a(97064).Z,className:"imgBorder"})),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Things will now get a little bit complicated. Let\u2019s find a recommendation for\na specific user, for example, with the id 150:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (u:User {id: "150"})-[r:RATED]-(p:Movie)-[other_r:RATED]-(other:User)\nWITH other.id AS other_id, avg(r.rating-other_r.rating) AS similarity\nORDER BY similarity\nLIMIT 10\nWITH collect(other_id) AS similar_user_set\nMATCH (some_movie: Movie)-[fellow_rate:RATED]-(fellow_user:User)\nWHERE fellow_user.id IN similar_user_set\nWITH some_movie, avg(fellow_rate.rating) AS prediction_score\nRETURN some_movie.title AS Title, prediction_score\nORDER BY prediction_score DESC;\n')),(0,o.kt)("p",{parentName:"li"},"If you don't get any data using the id 150, check what user IDs you have in\nyour Kafka stream, and just pick one at random. I got data for user ids 144\nto 177."),(0,o.kt)("p",{parentName:"li"},"In the first line, we matched all the users who rated the same movie as our\nuser 150."),(0,o.kt)("p",{parentName:"li"},"We got their ids, and then we wanted to filter out only those users who gave\nthe same or similar rating as our user 150. That is why we subtracted their\nrating scores from the rating scores of user 150 and got an average score. If\nthe result is 0 the users gave the same rating and had a similar taste. As\nthat number grows, users have different tastes."),(0,o.kt)("p",{parentName:"li"},"Then, we ordered the users by the similarity of their taste with the taste of\nuser 150 and collected 10 users into a list called ",(0,o.kt)("inlineCode",{parentName:"p"},"similar_user_set"),"."),(0,o.kt)("p",{parentName:"li"},"With the next ",(0,o.kt)("inlineCode",{parentName:"p"},"MATCH")," clause we got all the movies rated by all the users in\nthe database, then filtered the results to get only the movies rated by the\nusers from the ",(0,o.kt)("inlineCode",{parentName:"p"},"similar_user_set"),". We got the average rating score those\nusers gave to a particular movie with the presumption that the user 150 might\nrate the movie as well, being that he has a similar taste as these 10 users."),(0,o.kt)("p",{parentName:"li"},"At the end, we returned the movie titles and prediction score starting with\nthe movie with the highest prediction score."),(0,o.kt)("img",{src:a(87339).Z,className:"imgBorder"}),(0,o.kt)("p",{parentName:"li"},"And that\u2019s it, you have generated recommendations based on the similarity of\nratings between users."))),(0,o.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,o.kt)("p",null,"Congratulations! You have connected Memgraph to a Kafka stream and analyzed the\ndata. You can continue to do so using the ",(0,o.kt)("a",{parentName:"p",href:"/cypher-manual"},(0,o.kt)("strong",{parentName:"a"},"Cypher query\nlanguage")),". You can also try using various graph algorithms and\nmodules from our open-source repository ",(0,o.kt)("a",{parentName:"p",href:"/mage"},(0,o.kt)("strong",{parentName:"a"},"MAGE"))," to solve graph\nanalytics problems, create awesome customized visual displays of your nodes and\nrelationships with ",(0,o.kt)("a",{parentName:"p",href:"/memgraph-lab/style-script/quick-start"},(0,o.kt)("strong",{parentName:"a"},"Style script")),"\nand above all - enjoy your graph database!"))}u.isMDXComponent=!0},60089:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-data-model-f9694814074994e856a5b7961029cc72.png"},18682:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-genre-movies-2e00d1a4a1fcfd34053f7a901f273108.png"},44563:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-graph-schema-3c5434af354ea4e65492abb9dd37ea2d.png"},97064:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-matrix-291a0933ca4c7c48842652f3ba08534e.png"},96993:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-overview-f787fe3381f16b710f766960feab1669.png"},75955:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-running-stream-c425689c5c14ea3d29bfc741e0120332.png"},87339:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-similar-ratings-5a1c3aa14629237f810cc49674350f79.png"},27815:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-ten-movies-1f89413e393c14f96266b881459c6b07.png"},50110:function(e,t,a){t.Z=a.p+"assets/images/analyzing-data-streamed-from-kafka-trans-module-49118029eccef723cce6966cb2b53a3a.png"}}]);