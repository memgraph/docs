"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92257],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),g=a,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||i;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90717:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],o={sidebar_label:"instance_runner",title:"gqlalchemy.instance_runner"},s=void 0,p={unversionedId:"reference/instance_runner",id:"reference/instance_runner",title:"gqlalchemy.instance_runner",description:"wait\\for\\port",source:"@site/gqlalchemy/reference/instance_runner.md",sourceDirName:"reference",slug:"/reference/instance_runner",permalink:"/docs/gqlalchemy/reference/instance_runner",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/instance_runner.md",tags:[],version:"current",frontMatter:{sidebar_label:"instance_runner",title:"gqlalchemy.instance_runner"},sidebar:"gqlalchemy",previous:{title:"disk_storage",permalink:"/docs/gqlalchemy/reference/disk_storage"},next:{title:"memgraph",permalink:"/docs/gqlalchemy/reference/memgraph"}},c={},u=[{value:"wait_for_port",id:"wait_for_port",level:4},{value:"wait_for_docker_container",id:"wait_for_docker_container",level:4},{value:"MemgraphInstanceBinary Objects",id:"memgraphinstancebinary-objects",level:2},{value:"start",id:"start",level:4},{value:"stop",id:"stop",level:4},{value:"is_running",id:"is_running",level:4},{value:"MemgraphInstanceDocker Objects",id:"memgraphinstancedocker-objects",level:2},{value:"start",id:"start-1",level:4},{value:"stop",id:"stop-1",level:4},{value:"is_running",id:"is_running-1",level:4}],m={toc:u};function g(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"wait_for_port"},"wait","_","for","_","port"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def wait_for_port(host: str = "127.0.0.1", port: int = 7687, delay: float = 0.01, timeout: float = 5.0) -> None\n')),(0,i.kt)("p",null,"Wait for a TCP port to become available."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - A string representing the IP address that is being checked."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - A string representing the port that is being checked."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delay")," - A float that defines how long to wait between retries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," - A float that defines how long to wait for the port.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Raises"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TimeoutError")," - Raises an error when the host and port are not accepting\nconnections after the timeout period has passed.")),(0,i.kt)("h4",{id:"wait_for_docker_container"},"wait","_","for","_","docker","_","container"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def wait_for_docker_container(container: "docker.Container", delay: float = 0.01, timeout: float = 5.0) -> None\n')),(0,i.kt)("p",null,"Wait for a Docker container to enter the status ",(0,i.kt)("inlineCode",{parentName:"p"},"running"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," - The Docker container to wait for."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delay")," - A float that defines how long to wait between retries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," - A float that defines how long to wait for the status.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Raises"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TimeoutError")," - Raises an error when the container isn","'","t running after the\ntimeout period has passed.")),(0,i.kt)("h2",{id:"memgraphinstancebinary-objects"},"MemgraphInstanceBinary Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class MemgraphInstanceBinary(MemgraphInstance)\n")),(0,i.kt)("p",null,"A class for managing Memgraph instances started from binary files on Unix\nsystems."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"binary_path")," - A string representing the path to a Memgraph binary\nfile."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," - A string representing the user that should start the Memgraph\nprocess.")),(0,i.kt)("h4",{id:"start"},"start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def start(restart: bool = False) -> "Memgraph"\n')),(0,i.kt)("p",null,"Start the Memgraph instance and return the connection object."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"restart")," - A bool indicating if the instance should be\nrestarted if it","'","s already running.")),(0,i.kt)("h4",{id:"stop"},"stop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def stop() -> int\n")),(0,i.kt)("p",null,"Stop the Memgraph instance."),(0,i.kt)("h4",{id:"is_running"},"is","_","running"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def is_running() -> bool\n")),(0,i.kt)("p",null,"Check if the Memgraph instance is still running."),(0,i.kt)("h2",{id:"memgraphinstancedocker-objects"},"MemgraphInstanceDocker Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class MemgraphInstanceDocker(MemgraphInstance)\n")),(0,i.kt)("p",null,"A class for managing Memgraph instances started in Docker containers."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docker_image")," - An enum representing the Docker image. Values:\n",(0,i.kt)("inlineCode",{parentName:"li"},"DockerImage.MEMGRAPH")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"DockerImage.MAGE"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docker_image_tag")," - A string representing the tag of the Docker image.")),(0,i.kt)("h4",{id:"start-1"},"start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def start(restart: bool = False) -> "Memgraph"\n')),(0,i.kt)("p",null,"Start the Memgraph instance and return the connection object."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"restart")," - A bool indicating if the instance should be\nrestarted if it","'","s already running.")),(0,i.kt)("h4",{id:"stop-1"},"stop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def stop() -> Dict\n")),(0,i.kt)("p",null,"Stop the Memgraph instance."),(0,i.kt)("h4",{id:"is_running-1"},"is","_","running"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def is_running() -> bool\n")),(0,i.kt)("p",null,"Check if the Memgraph instance is still running."))}g.isMDXComponent=!0}}]);