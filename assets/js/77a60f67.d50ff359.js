"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8914],{3905:(e,_,t)=>{t.d(_,{Zo:()=>g,kt:()=>s});var i=t(67294);function n(e,_,t){return _ in e?Object.defineProperty(e,_,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[_]=t,e}function r(e,_){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);_&&(i=i.filter((function(_){return Object.getOwnPropertyDescriptor(e,_).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var _=1;_<arguments.length;_++){var t=null!=arguments[_]?arguments[_]:{};_%2?r(Object(t),!0).forEach((function(_){n(e,_,t[_])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(_){Object.defineProperty(e,_,Object.getOwnPropertyDescriptor(t,_))}))}return e}function m(e,_){if(null==e)return{};var t,i,n=function(e,_){if(null==e)return{};var t,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],_.indexOf(t)>=0||(n[t]=e[t]);return n}(e,_);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],_.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=i.createContext({}),o=function(e){var _=i.useContext(l),t=_;return e&&(t="function"==typeof e?e(_):a(a({},_),e)),t},g=function(e){var _=o(e.components);return i.createElement(l.Provider,{value:_},e.children)},d={inlineCode:"code",wrapper:function(e){var _=e.children;return i.createElement(i.Fragment,{},_)}},u=i.forwardRef((function(e,_){var t=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,g=m(e,["components","mdxType","originalType","parentName"]),u=o(t),s=n,p=u["".concat(l,".").concat(s)]||u[s]||d[s]||r;return t?i.createElement(p,a(a({ref:_},g),{},{components:t})):i.createElement(p,a({ref:_},g))}));function s(e,_){var t=arguments,n=_&&_.mdxType;if("string"==typeof e||n){var r=t.length,a=new Array(r);a[0]=u;var m={};for(var l in _)hasOwnProperty.call(_,l)&&(m[l]=_[l]);m.originalType=e,m.mdxType="string"==typeof e?e:n,a[1]=m;for(var o=2;o<r;o++)a[o]=t[o];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},32380:(e,_,t)=>{t.r(_),t.d(_,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>m,toc:()=>o});var i=t(87462),n=(t(67294),t(3905));const r={id:"use-init-flags",title:"How to use init flags with Docker",sidebar_label:"Use init flags with Docker"},a=void 0,m={unversionedId:"how-to-guides/use-init-flags",id:"version-2.9.0/how-to-guides/use-init-flags",title:"How to use init flags with Docker",description:"With init-file and init-data-file configuration flags, you can execute queries from a CYPHERL file that need to be executed before or immediately after the Bolt server starts. The CYPHERL file the init-file flag points to is usually used to create users and set their passwords allowing only authorized users to access the data in the first run. The CYPHERL file the init-data-file points to is usually used to populate the database.",source:"@site/memgraph_versioned_docs/version-2.9.0/how-to-guides/use-init-flags.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/use-init-flags",permalink:"/docs/memgraph/how-to-guides/use-init-flags",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.9.0/how-to-guides/use-init-flags.md",tags:[],version:"2.9.0",frontMatter:{id:"use-init-flags",title:"How to use init flags with Docker",sidebar_label:"Use init flags with Docker"},sidebar:"memgraph",previous:{title:"Work with indexes",permalink:"/docs/memgraph/how-to-guides/indexes"},next:{title:"Enterprise features",permalink:"/docs/memgraph/how-to-guides/enterprise-features"}},l={},o=[{value:"Use the <code>init-file</code> flag with Docker",id:"use-the-init-file-flag-with-docker",level:2},{value:"1. Create all necessary files",id:"1-create-all-necessary-files",level:3},{value:"2. Build the Docker image",id:"2-build-the-docker-image",level:3},{value:"3. Run the Docker image",id:"3-run-the-docker-image",level:3},{value:"4. Connect to Memgraph",id:"4-connect-to-memgraph",level:3},{value:"Use the <code>init-data-file</code> flag with Docker",id:"use-the-init-data-file-flag-with-docker",level:2},{value:"1. Create all necessary files",id:"1-create-all-necessary-files-1",level:3},{value:"2. Build the Docker image",id:"2-build-the-docker-image-1",level:3},{value:"3. Run the Docker image",id:"3-run-the-docker-image-1",level:3},{value:"4. Connect to Memgraph",id:"4-connect-to-memgraph-1",level:3}],g={toc:o};function d(e){let{components:_,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},g,r,{components:_,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"With ",(0,n.kt)("inlineCode",{parentName:"p"},"init-file")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"init-data-file")," ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/next/reference-guide/configuration"},"configuration flags"),", you can execute queries from a CYPHERL file that need to be executed before or immediately after the Bolt server starts. The CYPHERL file the ",(0,n.kt)("inlineCode",{parentName:"p"},"init-file")," flag points to is usually used to create users and set their passwords allowing only authorized users to access the data in the first run. The CYPHERL file the ",(0,n.kt)("inlineCode",{parentName:"p"},"init-data-file")," points to is usually used to populate the database. "),(0,n.kt)("p",null,"If you will run Memgraph with Docker, make sure that the ",(0,n.kt)("inlineCode",{parentName:"p"},"init-file")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"init-data-file")," configuration flags are referring to the files inside the container before Memgraph starts. Files can't be directly copied into a container before it's started because the filesystem of the container doesn't exist until it's actually running. However, you can tackle this by using a Dockerfile."),(0,n.kt)("p",null,"In this guide you will learn how to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#use-the-init-file-flag-with-docker"},(0,n.kt)("strong",{parentName:"a"},"Use the ",(0,n.kt)("inlineCode",{parentName:"strong"},"init-file")," flag with Docker"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#use-the-init-data-file-flag-with-docker"},(0,n.kt)("strong",{parentName:"a"},"Use the ",(0,n.kt)("inlineCode",{parentName:"strong"},"init-data-file")," flag with Docker")))),(0,n.kt)("h2",{id:"use-the-init-file-flag-with-docker"},"Use the ",(0,n.kt)("inlineCode",{parentName:"h2"},"init-file")," flag with Docker"),(0,n.kt)("h3",{id:"1-create-all-necessary-files"},"1. Create all necessary files"),(0,n.kt)("p",null,"First, create a local directory called ",(0,n.kt)("inlineCode",{parentName:"p"},"my_init_test")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"auth.cypherl")," and Dockerfile inside it."),(0,n.kt)("p",null,"Below is the content of the ",(0,n.kt)("inlineCode",{parentName:"p"},"auth.cypherl")," file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE USER memgraph1 IDENTIFIED BY '1234';\n")),(0,n.kt)("p",null,"The Dockerfile should be defined like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"FROM memgraph/memgraph:latest\n\nUSER root\n\nCOPY auth.cypherl /usr/lib/memgraph/auth.cypherl\n\nUSER memgraph\n")),(0,n.kt)("p",null,"The above Dockerfile builds an image based on ",(0,n.kt)("inlineCode",{parentName:"p"},"memgraph/memgraph:latest")," image. For other images, ",(0,n.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/memgraph"},"check Memgraph's Docker Hub"),". Then, it switches to the user ",(0,n.kt)("inlineCode",{parentName:"p"},"root")," to be able to copy the local file to the container where Memgraph will be run. Due to the permissions set, it is recommended to copy it to ",(0,n.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/")," or any subfolder within that folder. In the end, the user is switched back to ",(0,n.kt)("inlineCode",{parentName:"p"},"memgraph"),"."),(0,n.kt)("h3",{id:"2-build-the-docker-image"},"2. Build the Docker image"),(0,n.kt)("p",null,"Open the terminal, place yourself in the ",(0,n.kt)("inlineCode",{parentName:"p"},"my_init_test")," directory and build the image called ",(0,n.kt)("inlineCode",{parentName:"p"},"my_image")," with the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker build -t my_image .\n")),(0,n.kt)("h3",{id:"3-run-the-docker-image"},"3. Run the Docker image"),(0,n.kt)("p",null,"Once you've built the Docker image, you can run it with the ",(0,n.kt)("inlineCode",{parentName:"p"},"init-file")," flag set to the appropriate value:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker run -it -p 7687:7687 -p 7444:7444 my_image --init-file=/usr/lib/memgraph/auth.cypherl\n")),(0,n.kt)("p",null,"To check all available flags in Memgraph, refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/next/reference-guide/configuration"},"the configuration reference guide"),"."),(0,n.kt)("h3",{id:"4-connect-to-memgraph"},"4. Connect to Memgraph"),(0,n.kt)("p",null,"To verify that everything is set up correctly, ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab"},"run Memgraph Lab")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab/connect-to-memgraph"},"connect to Memgraph"),". You'll notice that you have to connect manually and input the correct username and password. This happened because ",(0,n.kt)("inlineCode",{parentName:"p"},"auth.cypherl")," file was run before the Bolt server started. You can also run the ",(0,n.kt)("inlineCode",{parentName:"p"},"SHOW CONFIG")," query:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"memgraph-lab-init-file",src:t(248).Z,width:"1501",height:"1369"})),(0,n.kt)("p",null,"Notice how the current value of ",(0,n.kt)("inlineCode",{parentName:"p"},"init_file")," is updated with the path to the CYPHERL file inside the container."),(0,n.kt)("h2",{id:"use-the-init-data-file-flag-with-docker"},"Use the ",(0,n.kt)("inlineCode",{parentName:"h2"},"init-data-file")," flag with Docker"),(0,n.kt)("h3",{id:"1-create-all-necessary-files-1"},"1. Create all necessary files"),(0,n.kt)("p",null,"First, create a local directory called ",(0,n.kt)("inlineCode",{parentName:"p"},"my_init_test")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"data.cypherl")," and Dockerfile inside it."),(0,n.kt)("p",null,"Below is the content of the ",(0,n.kt)("inlineCode",{parentName:"p"},"data.cypherl")," file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'CREATE INDEX ON :__mg_vertex__(__mg_id__);\nCREATE (:__mg_vertex__:`Person` {__mg_id__: 0, `name`: "Peter"});\nCREATE (:__mg_vertex__:`Team` {__mg_id__: 1, `name`: "Engineering"});\nCREATE (:__mg_vertex__:`Repository` {__mg_id__: 2, `name`: "Memgraph"});\nCREATE (:__mg_vertex__:`Repository` {__mg_id__: 3, `name`: "MAGE"});\nCREATE (:__mg_vertex__:`Repository` {__mg_id__: 4, `name`: "GQLAlchemy"});\nCREATE (:__mg_vertex__:`Company` {__mg_id__: 5, `name`: "Memgraph"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 6, `name`: "welcome_to_engineering.txt"});\nCREATE (:__mg_vertex__:`Storage` {__mg_id__: 7, `name`: "Google Drive"});\nCREATE (:__mg_vertex__:`Storage` {__mg_id__: 8, `name`: "Notion"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 9, `name`: "welcome_to_memgraph.txt"});\nCREATE (:__mg_vertex__:`Person` {__mg_id__: 10, `name`: "Carl"});\nCREATE (:__mg_vertex__:`Folder` {__mg_id__: 11, `name`: "engineering_folder"});\nCREATE (:__mg_vertex__:`Person` {__mg_id__: 12, `name`: "Anna"});\nCREATE (:__mg_vertex__:`Folder` {__mg_id__: 13, `name`: "operations_folder"});\nCREATE (:__mg_vertex__:`Team` {__mg_id__: 14, `name`: "Operations"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 15, `name`: "operations101.txt"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 16, `name`: "expenses2022.csv"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 17, `name`: "salaries2022.csv"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 18, `name`: "engineering101.txt"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 19, `name`: "working_with_github.txt"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 20, `name`: "working_with_notion.txt"});\nCREATE (:__mg_vertex__:`Team` {__mg_id__: 21, `name`: "Marketing"});\nCREATE (:__mg_vertex__:`Person` {__mg_id__: 22, `name`: "Julie"});\nCREATE (:__mg_vertex__:`Account` {__mg_id__: 23, `name`: "Facebook"});\nCREATE (:__mg_vertex__:`Account` {__mg_id__: 24, `name`: "LinkedIn"});\nCREATE (:__mg_vertex__:`Account` {__mg_id__: 25, `name`: "HackerNews"});\nCREATE (:__mg_vertex__:`File` {__mg_id__: 26, `name`: "welcome_to_marketing.txt"});\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 0 AND v.__mg_id__ = 1 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 0 AND v.__mg_id__ = 5 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 0 AND v.__mg_id__ = 9 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 0 AND v.__mg_id__ = 14 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 1 AND v.__mg_id__ = 2 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 1 AND v.__mg_id__ = 3 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 1 AND v.__mg_id__ = 4 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 1 AND v.__mg_id__ = 6 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 1 AND v.__mg_id__ = 11 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 5 AND v.__mg_id__ = 1 CREATE (u)-[:`HAS_TEAM`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 5 AND v.__mg_id__ = 21 CREATE (u)-[:`HAS_TEAM`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 5 AND v.__mg_id__ = 14 CREATE (u)-[:`HAS_TEAM`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 6 AND v.__mg_id__ = 7 CREATE (u)-[:`IS_STORED_IN`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 6 AND v.__mg_id__ = 8 CREATE (u)-[:`IS_STORED_IN`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 9 AND v.__mg_id__ = 12 CREATE (u)-[:`CREATED_BY`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 10 AND v.__mg_id__ = 1 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 10 AND v.__mg_id__ = 5 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 10 AND v.__mg_id__ = 9 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 11 AND v.__mg_id__ = 7 CREATE (u)-[:`IS_STORED_IN`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 11 AND v.__mg_id__ = 18 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 11 AND v.__mg_id__ = 19 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 11 AND v.__mg_id__ = 20 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 12 AND v.__mg_id__ = 14 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 13 AND v.__mg_id__ = 15 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 13 AND v.__mg_id__ = 16 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 13 AND v.__mg_id__ = 17 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 13 AND v.__mg_id__ = 7 CREATE (u)-[:`IS_STORED_IN`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 14 AND v.__mg_id__ = 13 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 21 AND v.__mg_id__ = 23 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 21 AND v.__mg_id__ = 24 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 21 AND v.__mg_id__ = 25 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 21 AND v.__mg_id__ = 26 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 22 AND v.__mg_id__ = 21 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 22 AND v.__mg_id__ = 5 CREATE (u)-[:`IS_PART_OF`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 22 AND v.__mg_id__ = 9 CREATE (u)-[:`HAS_ACCESS_TO`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 26 AND v.__mg_id__ = 7 CREATE (u)-[:`IS_STORED_IN`]->(v);\nMATCH (u:__mg_vertex__), (v:__mg_vertex__) WHERE u.__mg_id__ = 26 AND v.__mg_id__ = 8 CREATE (u)-[:`IS_STORED_IN`]->(v);\nDROP INDEX ON :__mg_vertex__(__mg_id__);\nMATCH (u) REMOVE u:__mg_vertex__, u.__mg_id__;\n')),(0,n.kt)("p",null,"These Cypher queries will create the ",(0,n.kt)("em",{parentName:"p"},"Identity and access management")," dataset available in Memgraph Lab. You can get this CYPHERL file by exporting the dataset from the Memgraph Lab."),(0,n.kt)("p",null,"The Dockerfile should be defined like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"FROM memgraph/memgraph:latest\n\nUSER root\n\nCOPY data.cypherl /usr/lib/memgraph/data.cypherl\n\nUSER memgraph\n")),(0,n.kt)("p",null,"The above Dockerfile builds an image based on ",(0,n.kt)("inlineCode",{parentName:"p"},"memgraph/memgraph:latest")," image. For other images, ",(0,n.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/memgraph"},"check Memgraph's Docker Hub"),". Then, it switches to the user ",(0,n.kt)("inlineCode",{parentName:"p"},"root")," to be able to copy the local file to the container where Memgraph will be run. Due to the permissions set, it is recommended to copy it to ",(0,n.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/")," or any subfolder within that folder. In the end, the user is switched back to ",(0,n.kt)("inlineCode",{parentName:"p"},"memgraph"),"."),(0,n.kt)("h3",{id:"2-build-the-docker-image-1"},"2. Build the Docker image"),(0,n.kt)("p",null,"Open the terminal, place yourself in the ",(0,n.kt)("inlineCode",{parentName:"p"},"my_init_test")," directory and build the image called ",(0,n.kt)("inlineCode",{parentName:"p"},"my_image")," with the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker build -t my_image .\n")),(0,n.kt)("h3",{id:"3-run-the-docker-image-1"},"3. Run the Docker image"),(0,n.kt)("p",null,"Once you've built the Docker image, you can run it with the ",(0,n.kt)("inlineCode",{parentName:"p"},"init-data-file")," flag set to the appropriate value:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker run -it -p 7687:7687 -p 7444:7444 my_image --init-data-file=/usr/lib/memgraph/data.cypherl\n")),(0,n.kt)("p",null,"To check all available flags in Memgraph, refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/next/reference-guide/configuration"},"the configuration reference guide"),"."),(0,n.kt)("h3",{id:"4-connect-to-memgraph-1"},"4. Connect to Memgraph"),(0,n.kt)("p",null,"To verify that everything is set up correctly, ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab"},"run Memgraph Lab"),", ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab/connect-to-memgraph"},"connect to Memgraph"),", and run the ",(0,n.kt)("inlineCode",{parentName:"p"},"SHOW CONFIG")," query: "),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"memgraph-lab-init-data-file",src:t(75631).Z,width:"1517",height:"1373"})),(0,n.kt)("p",null,"Notice how the database is already populated and the current value of ",(0,n.kt)("inlineCode",{parentName:"p"},"init_data_file")," is updated with the path to the CYPHERL file inside the container."))}d.isMDXComponent=!0},75631:(e,_,t)=>{t.d(_,{Z:()=>i});const i=t.p+"assets/images/memgraph-lab-init-data-file-af679e062b1bfbae809b98a476d2e7aa.png"},248:(e,_,t)=>{t.d(_,{Z:()=>i});const i=t.p+"assets/images/memgraph-lab-init-file-727a64438bbde328ad0d7d72d12164d7.png"}}]);