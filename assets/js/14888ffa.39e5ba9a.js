"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[89634],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(t),g=r,u=h["".concat(p,".").concat(g)]||h[g]||m[g]||i;return t?a.createElement(u,o(o({ref:n},c),{},{components:t})):a.createElement(u,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},32226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=t(87462),r=(t(67294),t(3905)),i=t(93996);const o={id:"memgraph-binary-instance",title:"How to manage Memgraph binary instances in Python",sidebar_label:"Manage Memgraph binary instances",slug:"/how-to-guides/memgraph-binary-instance"},s=void 0,p={unversionedId:"how-to-guides/instance-runner/memgraph-binary-instance",id:"how-to-guides/instance-runner/memgraph-binary-instance",title:"How to manage Memgraph binary instances in Python",description:"Through this guide, you will learn how to start, stop, connect to and monitor",source:"@site/gqlalchemy/how-to-guides/instance-runner/memgraph-binary-instance.md",sourceDirName:"how-to-guides/instance-runner",slug:"/how-to-guides/memgraph-binary-instance",permalink:"/docs/gqlalchemy/how-to-guides/memgraph-binary-instance",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/instance-runner/memgraph-binary-instance.md",tags:[],version:"current",frontMatter:{id:"memgraph-binary-instance",title:"How to manage Memgraph binary instances in Python",sidebar_label:"Manage Memgraph binary instances",slug:"/how-to-guides/memgraph-binary-instance"},sidebar:"gqlalchemy",previous:{title:"Manage Memgraph Docker instances",permalink:"/docs/gqlalchemy/how-to-guides/memgraph-docker-instance"},next:{title:"Manage database triggers",permalink:"/docs/gqlalchemy/how-to-guides/triggers"}},l={},c=[{value:"Start the Memgraph instance",id:"start-the-memgraph-instance",level:2},{value:"Pass configuration flags",id:"pass-configuration-flags",level:2},{value:"Stop the Memgraph instance",id:"stop-the-memgraph-instance",level:2},{value:"Check if a Memgraph instance is running",id:"check-if-a-memgraph-instance-is-running",level:2},{value:"Where to next?",id:"where-to-next",level:2}],m={toc:c};function h(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Through this guide, you will learn how to start, stop, connect to and monitor\nMemgraph instances with GQLAlchemy."),(0,r.kt)(i.ZP,{mdxType:"Neo4jWarning"}),(0,r.kt)("p",null,"First, perform all the necessary imports:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy.instance_runner import MemgraphInstanceBinary\n")),(0,r.kt)("h2",{id:"start-the-memgraph-instance"},"Start the Memgraph instance"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"In order to start a Memgraph instance that you installed using ",(0,r.kt)("inlineCode",{parentName:"p"},"dpkg"),", you need\nto run the binary file as user ",(0,r.kt)("inlineCode",{parentName:"p"},"memgraph"),". Otherwise, the process won't have the\nright access rights to the needed directories and files.")),(0,r.kt)("p",null,"The following code will create a Memgraph instance, start it and return a\nconnection object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'memgraph_instance = MemgraphInstanceBinary(\n    host="0.0.0.0", port=7698, binary_path="/usr/lib/memgraph/memgraph", user="memgraph"\n)\nmemgraph = memgraph_instance.start_and_connect(restart=False)\n')),(0,r.kt)("p",null,"We used the default values for the arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'host="0.0.0.0"'),": This is the wildcard address which indicates that the\ninstance should accept connections from all interfaces."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"port=7687"),": This is the default port Memgraph listens to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'binary_path="/usr/lib/memgraph/memgraph"'),": The default location of the\nMemgraph binary file on Ubuntu."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'user="memgraph"'),": The user that will start the Memgraph process."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"restart=False"),": If the instance is already running, it won't be stopped and\nstarted again.")),(0,r.kt)("p",null,"After we have created the connection, we can start querying the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'memgraph.execute_and_fetch("RETURN \'Memgraph is running\' AS result"))[0]["result"]\n')),(0,r.kt)("h2",{id:"pass-configuration-flags"},"Pass configuration flags"),(0,r.kt)("p",null,"You can pass ",(0,r.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/configuration"},"configuration flags"),"\nusing a dictionary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'config={"--log-level": "TRACE"}\nmemgraph_instance = MemgraphInstanceBinary(config=config)\n')),(0,r.kt)("h2",{id:"stop-the-memgraph-instance"},"Stop the Memgraph instance"),(0,r.kt)("p",null,"To stop a Memgraph instance, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"stop()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"memgraph_instance.stop()\n")),(0,r.kt)("h2",{id:"check-if-a-memgraph-instance-is-running"},"Check if a Memgraph instance is running"),(0,r.kt)("p",null,"To check if a Memgraph instance is running, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"is_running()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"memgraph_instance.is_running()\n")),(0,r.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,r.kt)("p",null,"Hopefully, this guide has taught you how to manage Memgraph Docker instances. If\nyou have any more questions, join our community and ping us on\n",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}h.isMDXComponent=!0},93996:(e,n,t)=>{t.d(n,{ZP:()=>o});var a=t(87462),r=(t(67294),t(3905));const i={toc:[]};function o(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This feature only works with Memgraph. Neo4j is not supported.")))}o.isMDXComponent=!0}}]);