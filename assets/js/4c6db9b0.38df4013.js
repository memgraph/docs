"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23375],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),h=n,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return a?r.createElement(m,o(o({ref:t},c),{},{components:a})):r.createElement(m,o({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8134:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={id:"backup",title:"Data durability and backup",sidebar_label:"Data durability and backup"},o=void 0,s={unversionedId:"reference-guide/backup",id:"version-2.4.1/reference-guide/backup",title:"Data durability and backup",description:"Memgraph uses two mechanisms to ensure the durability of stored data and make",source:"@site/memgraph_versioned_docs/version-2.4.1/reference-guide/backup.md",sourceDirName:"reference-guide",slug:"/reference-guide/backup",permalink:"/docs/memgraph/2.4.1/reference-guide/backup",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.4.1/reference-guide/backup.md",tags:[],version:"2.4.1",frontMatter:{id:"backup",title:"Data durability and backup",sidebar_label:"Data durability and backup"},sidebar:"memgraph",previous:{title:"Configuration settings",permalink:"/docs/memgraph/2.4.1/reference-guide/configuration"},next:{title:"Data types",permalink:"/docs/memgraph/2.4.1/reference-guide/data-types"}},l={},p=[{value:"Durability mechanisms",id:"durability-mechanisms",level:2},{value:"Write-ahead logging",id:"write-ahead-logging",level:3},{value:"Snapshots",id:"snapshots",level:3},{value:"Data directory",id:"data-directory",level:3},{value:"Backup",id:"backup",level:2},{value:"Database dump",id:"database-dump",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Memgraph uses two mechanisms to ensure the durability of stored data and make\ndisaster recovery possible:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"write-ahead logging (WAL)"),(0,n.kt)("li",{parentName:"ul"},"periodic snapshot creation")),(0,n.kt)("p",null,"These mechanisms generate ",(0,n.kt)("strong",{parentName:"p"},"durability files")," and save them in the\n",(0,n.kt)("strong",{parentName:"p"},"data directory")," so that one can use them to recover the database."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/2.4.1/how-to-guides/create-backup"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=How-to&color=blue&style=for-the-badge",alt:"Related - How-to"}))),(0,n.kt)("h2",{id:"durability-mechanisms"},"Durability mechanisms"),(0,n.kt)("p",null,"The durability mechanisms are configurable; the relevant settings are in the\n",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/configuration#storage"},"configuration reference"),".\nTo configure Memgraph, you can use the\xa0configuration management\n",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/2.4.1/how-to-guides/config-logs"},"how-to guide"),"."),(0,n.kt)("h3",{id:"write-ahead-logging"},"Write-ahead logging"),(0,n.kt)("p",null,"Write-ahead logging (WAL) is a technique applied in providing ",(0,n.kt)("strong",{parentName:"p"},"atomicity")," and\n",(0,n.kt)("strong",{parentName:"p"},"durability")," to database systems. Each database modification is recorded in a\nlog file before being written to the DB and therefore the log file contains all\nsteps needed to reconstruct the DB\u2019s most recent state."),(0,n.kt)("p",null,"Memgraph has WAL enabled by default. To switch it on and off, use the boolean\n",(0,n.kt)("inlineCode",{parentName:"p"},"storage-wal-enabled")," flag. Other WAL-related flags are\n",(0,n.kt)("inlineCode",{parentName:"p"},"storage-wal-file-flush-every-n-tx")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"storage-wal-file-size-kib"),"; their uses\nare described ",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/how-to-guides/config-logs"},"here"),"."),(0,n.kt)("h3",{id:"snapshots"},"Snapshots"),(0,n.kt)("p",null,"Snapshots provide a faster way to restore the states of your database. Memgraph\nperiodically takes snapshots during runtime. When a snapshot is triggered, the\nentire data storage is written to the drive.\nOn startup, the database state is recovered from the most recent snapshot file.\nThe timestamp of the snapshot is compared with the latest update recorded in\nthe WAL file and, if the snapshot is less recent, the state of the DB will be\nrecovered using the WAL file."),(0,n.kt)("p",null,"Memgraph has snapshot creation enabled by default. You can configure the exact\nsnapshot creation behavior by defining the relevant flags\n(",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/configuration#storage"},"reference"),").\nAlternatively, you can make one directly by running the following query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-opencypher"},"CREATE SNAPSHOT;\n")),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"Snapshots and WAL files are presently not compatible between Memgraph versions.")),(0,n.kt)("h3",{id:"data-directory"},"Data directory"),(0,n.kt)("p",null,"The data directory is the location where Memgraph saves write-ahead logs and\nsnapshots; it functions as the dedicated site for permanent data."),(0,n.kt)("p",null,"The default data directory path is ",(0,n.kt)("inlineCode",{parentName:"p"},"var/lib/memgraph"),". You can change the path\nby setting the ",(0,n.kt)("inlineCode",{parentName:"p"},"data-dir")," configuration flag\n(",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/configuration#other"},"reference"),")."),(0,n.kt)("h2",{id:"backup"},"Backup"),(0,n.kt)("p",null,"You can easily back up Memgraph by following a three-step process:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create a snapshot"),(0,n.kt)("li",{parentName:"ol"},"Lock the data directory"),(0,n.kt)("li",{parentName:"ol"},"Copy the snapshot to the backup location and unlock the directory")),(0,n.kt)("p",null,"The following queries lock and unlock the data directory:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-opencypher"},"UNLOCK DATA DIRECTORY;\nLOCK DATA DIRECTORY;\n")),(0,n.kt)("p",null,"A detailed guide is available\n",(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph/how-to-guides/create-backup"},"here"),"."),(0,n.kt)("h2",{id:"database-dump"},"Database dump"),(0,n.kt)("p",null,"The database dump contains a record of the database state in the form of Cypher\nqueries; it\u2019s equivalent to the SQL dump in relational DBs.\nYou can run the queries constituting the dump to recreate the state of the DB\nas it was at the time of the dump."),(0,n.kt)("p",null,"To dump the Memgraph DB, run the following query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-opencypher"},"DUMP DATABASE;\n")))}d.isMDXComponent=!0}}]);