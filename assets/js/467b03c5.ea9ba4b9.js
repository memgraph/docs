"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88828],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(t),d=i,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9879:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),l=["components"],o={id:"differences",title:"Differences in Cypher implementations",sidebar_label:"Differences in Cypher implementations",slug:"/differences"},p=void 0,s={unversionedId:"differences",id:"differences",title:"Differences in Cypher implementations",description:"Although we try to implement the openCypher query",source:"@site/cypher-manual/differences-in-cypher-implementations.md",sourceDirName:".",slug:"/differences",permalink:"/docs/cypher-manual/differences",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/differences-in-cypher-implementations.md",tags:[],version:"current",frontMatter:{id:"differences",title:"Differences in Cypher implementations",sidebar_label:"Differences in Cypher implementations",slug:"/differences"},sidebar:"cypher_manual",previous:{title:"Cypher query language",permalink:"/docs/cypher-manual/cypher-query-language"},next:{title:"Working with Memgraph",permalink:"/docs/cypher-manual/working-with-memgraph"}},u=[{value:"Unicode codepoints in string literals",id:"unicode-codepoints-in-string-literals",children:[],level:2},{value:"Difference from Neo4j&#39;s Cypher implementation",id:"difference-from-neo4js-cypher-implementation",children:[{value:"Unsupported constructs",id:"unsupported-constructs",children:[],level:3},{value:"Unsupported functions",id:"unsupported-functions",children:[],level:3}],level:2},{value:"Patterns in expressions",id:"patterns-in-expressions",children:[{value:"What is a Cypher alternative for patterns in expressions?",id:"what-is-a-cypher-alternative-for-patterns-in-expressions",children:[],level:3}],level:2}],c={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Although we try to implement the ",(0,a.kt)("a",{parentName:"p",href:"https://www.opencypher.org/"},"openCypher")," query\nlanguage as close to the language reference as possible, we had to make some\nchanges to enhance the user experience."),(0,a.kt)("h2",{id:"unicode-codepoints-in-string-literals"},"Unicode codepoints in string literals"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"\\u")," followed by 4 hex digits in string literals for UTF-16 codepoint and\n",(0,a.kt)("inlineCode",{parentName:"p"},"\\U")," with 8 hex digits for UTF-32 codepoint in Memgraph."),(0,a.kt)("h2",{id:"difference-from-neo4js-cypher-implementation"},"Difference from Neo4j's Cypher implementation"),(0,a.kt)("p",null,"The openCypher initiative stems from Neo4j's Cypher query language. Following is\na list of the most important differences between Neo's Cypher and Memgraph's\nopenCypher implementation for users already familiar with Neo4j. Other\ndifferences might not be documented here (especially subtle semantic ones)."),(0,a.kt)("h3",{id:"unsupported-constructs"},"Unsupported constructs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"FOREACH")," language construct for performing an operation on every list\nelement."),(0,a.kt)("li",{parentName:"ul"},"Stored procedures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shortestPath")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"allShortestPaths")," functions. ",(0,a.kt)("inlineCode",{parentName:"li"},"shortestPath")," can be\nexpressed using Memgraph's breadth-first expansion syntax."),(0,a.kt)("li",{parentName:"ul"},"Patterns in expressions. For example, Memgraph doesn't support\n",(0,a.kt)("inlineCode",{parentName:"li"},"size((n)--\x3e())"),". Most of the time, the same functionalities can be expressed\ndifferently in Memgraph using ",(0,a.kt)("inlineCode",{parentName:"li"},"OPTIONAL")," expansions, function calls etc. You\ncan check out ",(0,a.kt)("a",{parentName:"li",href:"#patterns-in-expressions"},"this example"),"."),(0,a.kt)("li",{parentName:"ul"},"Map projections such as ",(0,a.kt)("inlineCode",{parentName:"li"},"MATCH (n) RETURN n {.property1, .property2}"),".")),(0,a.kt)("h3",{id:"unsupported-functions"},"Unsupported functions"),(0,a.kt)("p",null,"General purpose functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exists(n.property)")," - This can be expressed using ",(0,a.kt)("inlineCode",{parentName:"li"},"n.property IS NOT NULL"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"length()")," is named ",(0,a.kt)("inlineCode",{parentName:"li"},"size()")," in Memgraph.")),(0,a.kt)("p",null,"Aggregation functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"count(DISTINCT variable)")," - This can be expressed using ",(0,a.kt)("inlineCode",{parentName:"li"},"WITH DISTINCT\nvariable RETURN count(variable)"),".")),(0,a.kt)("p",null,"Mathematical functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"percentileDisc()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stDev()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"point()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"distance()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"degrees()"))),(0,a.kt)("p",null,"List functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"none()"))),(0,a.kt)("h2",{id:"patterns-in-expressions"},"Patterns in expressions"),(0,a.kt)("p",null,"Patterns in expressions are not yet supported in Memgraph. For example, Memgraph\ndoesn't support ",(0,a.kt)("inlineCode",{parentName:"p"},"size((n)--\x3e())"),". Most of the time, the same functionalities can\nbe expressed differently in Memgraph using ",(0,a.kt)("inlineCode",{parentName:"p"},"OPTIONAL")," expansions, function\ncalls, etc."),(0,a.kt)("h3",{id:"what-is-a-cypher-alternative-for-patterns-in-expressions"},"What is a Cypher alternative for patterns in expressions?"),(0,a.kt)("p",null,"For example, the following query is not valid in Memgraph:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:NodeA)\nWHERE NOT (n)-[]->(:NodeB)\nRETURN n;\n")),(0,a.kt)("p",null,"After executing it, you would receive an error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"Not yet implemented: atom expression '(n)-[]->(:NodeB)'\n")),(0,a.kt)("p",null,"The same query can be expressed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause.",(0,a.kt)("br",null),"\nThe clause ",(0,a.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," behaves the same as a regular MATCH, but when it\nfails to find the pattern, missing parts of the pattern will be filled with\n",(0,a.kt)("inlineCode",{parentName:"p"},"null")," values."),(0,a.kt)("p",null,"The example query would look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"OPTIONAL MATCH (n:NodeA)-[]->(m:NodeB)\nWHERE m IS null\nRETURN DISTINCT n;\n")))}m.isMDXComponent=!0}}]);