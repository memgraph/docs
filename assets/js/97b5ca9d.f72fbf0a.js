"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27434],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),s=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(u.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return t?n.createElement(g,l(l({ref:r},p),{},{components:t})):n.createElement(g,l({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9170:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=t(87462),a=(t(67294),t(3905)),o=t(23082),l=t(95707);const i={id:"calling-procedures",title:"How to call MAGE procedures?",sidebar_label:"Calling procedures"},u=void 0,s={unversionedId:"usage/calling-procedures",id:"usage/calling-procedures",title:"How to call MAGE procedures?",description:"Once the MAGE query modules, or any custom modules you developed have been",source:"@site/mage/usage/calling-procedures.md",sourceDirName:"usage",slug:"/usage/calling-procedures",permalink:"/docs/mage/usage/calling-procedures",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/usage/calling-procedures.md",tags:[],version:"current",frontMatter:{id:"calling-procedures",title:"How to call MAGE procedures?",sidebar_label:"Calling procedures"},sidebar:"mage",previous:{title:"Loading query modules",permalink:"/docs/mage/usage/loading-modules"},next:{title:"Available query modules",permalink:"/docs/mage/query-modules/available-queries"}},p={},c=[{value:"Calling query modules",id:"calling-query-modules",level:2},{value:"Controlling procedure memory usage",id:"controlling-procedure-memory-usage",level:2}],d={toc:c};function m(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once the MAGE query modules, or any custom modules you developed have been\nloaded into Memgraph, you can start executing them by calling them."),(0,a.kt)("h2",{id:"calling-query-modules"},"Calling query modules"),(0,a.kt)(o.ZP,{mdxType:"Calling"}),(0,a.kt)("h2",{id:"controlling-procedure-memory-usage"},"Controlling procedure memory usage"),(0,a.kt)(l.ZP,{mdxType:"Controlling"}))}m.isMDXComponent=!0},23082:(e,r,t)=>{t.d(r,{ZP:()=>l});var n=t(87462),a=(t(67294),t(3905));const o={toc:[]};function l(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},o,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once the MAGE query modules or any custom modules you developed have been\nloaded into Memgraph, you can call them within queries using the following Cypher\nsyntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL module.procedure([optional parameter], arg1, "string_argument", ...) YIELD res1, res2, ...;\n')),(0,a.kt)("p",null,"Every procedure has a first optional parameter and the rest of them depend on the procedure you are trying to call. The optional parameter must be result of the aggregation function ",(0,a.kt)("a",{parentName:"p",href:"/cypher-manual/functions#aggregation-functions"},(0,a.kt)("inlineCode",{parentName:"a"},"project()")),". If such a parameter is provided, ",(0,a.kt)("strong",{parentName:"p"},"all")," operations will be executed on a projected graph. Otherwise, you will work on the whole graph stored inside Memgraph. "),(0,a.kt)("p",null,"Each procedure returns zero or more records, where each record contains named\nfields. The ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause is used to select fields you are interested in or all\nof them (*). If you are not interested in any fields, omit the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause.\nThe procedure will still run, but the record fields will not be stored in\nvariables. If you are trying to ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," fields that are not a part of the\nproduced record, the query will result in an error."),(0,a.kt)("p",null,"Procedures can be standalone as in the example above, or a part of a larger\nquery when we want the procedure to work on data the query is\nproducing. "),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(node) YIELD result RETURN *;\n")),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause is a part of a larger query, results from the query are\nreturned using the ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," clause. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause is followed by a clause\nthat only updates the data and doesn't read it, ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," is unnecessary. It is\nthe Cypher convention that read-only queries need to end with a ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN"),", while\nqueries that update something don't need to ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," anything."),(0,a.kt)("p",null,"Also, if the procedure itself writes into the database, all the rest of the\nclauses in the query can only read from the database, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause can\nonly be followed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," clause. "),(0,a.kt)("p",null,"If a procedure returns a record with the same field name as some variable we\nalready have in the query, that field name can be aliased with some other name\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"AS")," sub-clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (result) CALL module.procedure(42) YIELD result AS procedure_result RETURN *;\n")))}l.isMDXComponent=!0},95707:(e,r,t)=>{t.d(r,{ZP:()=>l});var n=t(87462),a=(t(67294),t(3905));const o={toc:[]};function l(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},o,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When running a procedure, Memgraph controls the maximum memory usage that the\nprocedure may consume during its execution.  By default, the upper memory limit\nwhen running a procedure is ",(0,a.kt)("inlineCode",{parentName:"p"},"100 MB"),".  If your query procedure requires more\nmemory to yield its results, you can increase the memory limit using the\nfollowing syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 KB YIELD result;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 MB YIELD result;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY UNLIMITED YIELD result;\n")),(0,a.kt)("p",null,"The limit can either be specified to a specific value (either in ",(0,a.kt)("inlineCode",{parentName:"p"},"KB")," or in\n",(0,a.kt)("inlineCode",{parentName:"p"},"MB"),"), or it can be set to unlimited."))}l.isMDXComponent=!0}}]);