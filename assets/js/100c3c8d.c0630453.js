"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[94173],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},53407:(e,t,a)=>{a.r(t),a.d(t,{Highlight:()=>m,assets:()=>p,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),l=a(74866),o=a(85162);a(83523);const i={title:"migrate",sidebar_label:"migrate"},u=void 0,s={unversionedId:"query-modules/python/migrate",id:"query-modules/python/migrate",title:"migrate",description:"A module that contains procedures describing graphs on a meta-level.",source:"@site/mage/query-modules/python/migrate.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/migrate",permalink:"/docs/mage/query-modules/python/migrate",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/migrate.md",tags:[],version:"current",frontMatter:{title:"migrate",sidebar_label:"migrate"}},p={},c=[{value:"Procedures",id:"procedures",level:2},{value:"<code>mysql(table_or_sql, config, config_path, params)</code>",id:"mysqltable_or_sql-config-config_path-params",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"<code>sql_server(table_or_sql, config, config_path, params)</code>",id:"sql_servertable_or_sql-config-config_path-params",level:3},{value:"Input:",id:"input-1",level:4},{value:"Output:",id:"output-1",level:4},{value:"Usage:",id:"usage-1",level:4},{value:"<code>oracle_db(table_or_sql, config, config_path, params)</code>",id:"oracle_dbtable_or_sql-config-config_path-params",level:3},{value:"Input:",id:"input-2",level:4},{value:"Output:",id:"output-2",level:4},{value:"Usage:",id:"usage-2",level:4},{value:"Example",id:"example",level:2}],m=e=>{let{children:t,color:a}=e;return(0,r.kt)("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},d={toc:c,Highlight:m};function g(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A module that contains procedures describing graphs on a meta-level."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/migrate.py"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-migrate-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Trait"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Module type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"util")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Implementation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"Python")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"sequential")))))),(0,r.kt)("h2",{id:"procedures"},"Procedures"),(0,r.kt)("h3",{id:"mysqltable_or_sql-config-config_path-params"},(0,r.kt)("inlineCode",{parentName:"h3"},"mysql(table_or_sql, config, config_path, params)")),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate.mysql")," you can access MySQL and execute queries. The result table is converted into a stream,\nand returned rows can be used to create graph structures. The value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," parameter must be at least an empty map. If ",(0,r.kt)("inlineCode",{parentName:"p"},"config_path")," is passed, every key,value pair from JSON file will overwrite any values in ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," file."),(0,r.kt)("h4",{id:"input"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table_or_sql: str")," \u27a1 Table name or an SQL query"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config: mgp.Map")," \u27a1 Connection configuration parameters (as in ",(0,r.kt)("inlineCode",{parentName:"li"},"mysql.connector.connect"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config_path")," \u27a1 Path to a JSON file containing configuration parameters (as in ",(0,r.kt)("inlineCode",{parentName:"li"},"mysql.connector.connect"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params: mgp.Nullable[mgp.Any] (default=None)")," \u27a1 Optionally, queries can be parameterized. In that case, ",(0,r.kt)("inlineCode",{parentName:"li"},"params")," provides parameter values\n")),(0,r.kt)("h4",{id:"output"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"row: mgp.Map"),": The result table as a stream of rows")),(0,r.kt)("h4",{id:"usage"},"Usage:"),(0,r.kt)("p",null,"Get count of rows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL migrate.mysql('example_table', {user:'memgraph',\n        password:'password',\n        host:'localhost',\n        database:'demo_db'} )\nYIELD row\nRETURN count(row);\n")),(0,r.kt)("h3",{id:"sql_servertable_or_sql-config-config_path-params"},(0,r.kt)("inlineCode",{parentName:"h3"},"sql_server(table_or_sql, config, config_path, params)")),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate.sql_server")," you can access SQL Server and execute queries. The result table is converted into a stream, and returned rows can be used to create graph structures. The value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," parameter must be at least an empty map. If ",(0,r.kt)("inlineCode",{parentName:"p"},"config_path")," is passed, every key,value pair from JSON file will overwrite any values in ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," file."),(0,r.kt)("h4",{id:"input-1"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table_or_sql: str")," \u27a1 Table name or an SQL query"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config: mgp.Map")," \u27a1 Connection configuration parameters (as in ",(0,r.kt)("inlineCode",{parentName:"li"},"pyodbc.connect"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config_path")," \u27a1 Path to the JSON file containing configuration parameters (as in ",(0,r.kt)("inlineCode",{parentName:"li"},"pyodbc.connect"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params: mgp.Nullable[mgp.Any] (default=None)")," \u27a1 Optionally, queries can be parameterized. In that case, ",(0,r.kt)("inlineCode",{parentName:"li"},"params")," provides parameter values\n")),(0,r.kt)("h4",{id:"output-1"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"row: mgp.Map"),": The result table as a stream of rows")),(0,r.kt)("h4",{id:"usage-1"},"Usage:"),(0,r.kt)("p",null,"Get all data from database in form of map:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL migrate.sql_server('example_table', {user:'memgraph',\n        password:'password',\n        host:'localhost',\n        database:'demo_db'} )\nYIELD row\nRETURN row;\n")),(0,r.kt)("h3",{id:"oracle_dbtable_or_sql-config-config_path-params"},(0,r.kt)("inlineCode",{parentName:"h3"},"oracle_db(table_or_sql, config, config_path, params)")),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate.oracle_db")," you can access Oracle DB and execute queries. The result table is converted into a stream, and returned rows can be used to create graph structures. The value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," parameter must be at least an empty map. If ",(0,r.kt)("inlineCode",{parentName:"p"},"config_path")," is passed, every key,value pair from JSON file will overwrite any values in ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," file."),(0,r.kt)("h4",{id:"input-2"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table_or_sql: str")," \u27a1 Table name or an SQL query"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config: mgp.Map")," \u27a1 Connection configuration parameters (as in oracledb.connect),"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config_path")," \u27a1 Path to the JSON file containing configuration parameters (as in oracledb.connect)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params: mgp.Nullable[mgp.Any] (default=None)")," \u27a1 Optionally, queries may be parameterized. In that case, ",(0,r.kt)("inlineCode",{parentName:"li"},"params")," provides parameter values\n")),(0,r.kt)("h4",{id:"output-2"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"row: mgp.Map"),": The result table as a stream of rows")),(0,r.kt)("h4",{id:"usage-2"},"Usage:"),(0,r.kt)("p",null,"Get the first 5000 rows from a database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL migrate.oracle_db('example_table', {user:'memgraph',\n        password:'password',\n        host:'localhost',\n        database:'demo_db'} )\nYIELD row\nRETURN row\nLIMIT 5000;\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(l.Z,{groupId:"example",defaultValue:"run",values:[{label:"Step 1: Running command",value:"run"},{label:"Step 2: Results",value:"result"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"run",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL migrate.mysql('example_table', {user:'memgraph',\n        password:'password',\n        host:'localhost',\n        database:'mydemodb'} )\nYIELD row\nRETURN count(row) as row_count;\n"))),(0,r.kt)(o.Z,{value:"result",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"+------------------+\n| row_count        |\n+------------------+\n| 4000             |\n+------------------+\n")))))}g.isMDXComponent=!0},83523:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(87462),r=(a(67294),a(3905));const l={toc:[]};function o(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,r.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}o.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>_});var n=a(87462),r=a(67294),l=a(86010),o=a(12466),i=a(16550),u=a(91980),s=a(67392),p=a(50012);function c(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=m(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[u,s]=g({queryString:a,groupId:n}),[c,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,p.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),h=(()=>{const e=u??c;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),f(e)}),[s,f,l]),tabValues:l}}var h=a(72389);const b="tabList__CuJ",k="tabItem_LNqP";function y(e){let{className:t,block:a,selectedValue:i,selectValue:u,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),m=e=>{const t=e.currentTarget,a=p.indexOf(t),n=s[a].value;n!==i&&(c(t),u(n))},d=e=>{var t;let a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;a=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;a=p[t]??p[p.length-1];break}}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},o,{className:(0,l.Z)("tabs__item",k,null==o?void 0:o.className,{"tabs__item--active":i===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function N(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b)},r.createElement(y,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function _(e){const t=(0,h.Z)();return r.createElement(N,(0,n.Z)({key:String(t)},e))}}}]);