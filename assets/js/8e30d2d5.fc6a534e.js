(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{232:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return c}));var r=t(3),a=t(8),l=(t(0),t(357)),o={id:"loading-modules",title:"How to load MAGE query modules?",sidebar_label:"Loading query modules"},i={unversionedId:"usage/loading-modules",id:"usage/loading-modules",isDocsHomePage:!1,title:"How to load MAGE query modules?",description:"Loading query modules",source:"@site/mage/usage/loading-modules.md",slug:"/usage/loading-modules",permalink:"/mage/usage/loading-modules",editUrl:"https://github.com/memgraph/docs/tree/master/mage/usage/loading-modules.md",version:"current",sidebar_label:"Loading query modules",sidebar:"mage",previous:{title:"How to install MAGE?",permalink:"/mage/installation"},next:{title:"How to call MAGE procedures?",permalink:"/mage/usage/calling-procedures"}},u=[{value:"Loading query modules",id:"loading-query-modules",children:[{value:"Utility query module",id:"utility-query-module",children:[]}]}],d={toc:u};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"loading-query-modules"},"Loading query modules"),Object(l.b)("p",null,"When started, Memgraph will ",Object(l.b)("strong",{parentName:"p"},"automatically attempt to load")," the query modules\nfrom all ",Object(l.b)("inlineCode",{parentName:"p"},"*.so")," and ",Object(l.b)("inlineCode",{parentName:"p"},"*.py")," files it finds in the default\n",Object(l.b)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory. The ",Object(l.b)("inlineCode",{parentName:"p"},"*.so")," modules are written\nusing the C API and the ",Object(l.b)("inlineCode",{parentName:"p"},"*.py")," modules are written using the Python API. Each\nfile corresponds to one query module. The names of these files will be mapped to\nthe query module names. For example, ",Object(l.b)("inlineCode",{parentName:"p"},"nxalg.py")," will be mapped to ",Object(l.b)("inlineCode",{parentName:"p"},"py_example"),"\nin the Cypher query language."),Object(l.b)("p",null,"If you want to change the directory in which Memgraph searches for query\nmodules, just change the ",Object(l.b)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main\nconfiguration file (",Object(l.b)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply it as a\ncommand-line parameter (e.g. when using Docker)."),Object(l.b)("h3",{id:"utility-query-module"},"Utility query module"),Object(l.b)("p",null,"Query procedures that allow the users to gain more insight into other query\nmodules and their procedures are written under the utility query module named ",Object(l.b)("inlineCode",{parentName:"p"},"mg"),".\nThis module offers three procedures with the following signatures:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mg.procedures() :: (name :: STRING, signature :: STRING)"),": Lists loaded\nprocedures and their signatures."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mg.load(module_name :: STRING) :: ()"),": Loads or reloads the given module."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mg.load_all() :: ()"),": Loads or reloads all query modules.")),Object(l.b)("p",null,"For example, invoking ",Object(l.b)("inlineCode",{parentName:"p"},"mg.procedures()")," with Cypher looks like this:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.procedures() YIELD *;\n")),Object(l.b)("p",null,"The result will be similar to the following:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-plaintext"},"+---------------------+-------------------------------------------------------------------+\n| name                | signature                                                         |\n+---------------------+-------------------------------------------------------------------+\n| ...                 | ...                                                               |\n| graph_analyzer.help | graph_analyzer.help() :: (name :: STRING, value :: STRING)        |\n| mg.load             | mg.load(module_name :: STRING) :: ()                              |\n| mg.load_all         | mg.load_all() :: ()                                               |\n| mg.procedures       | mg.procedures() :: (name :: STRING, signature :: STRING)          |\n| ...                 | ...                                                               |\n+---------------------+-------------------------------------------------------------------+\n")),Object(l.b)("p",null,"In this case, we can see that Memgraph has successfully loaded all the procedures implemented\nin query modules including the utility query procedures."),Object(l.b)("p",null,"To load a module (named e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"hello"),") that wasn't loaded on startup (perhaps\nbecause it was added to Memgraph's query modules directory afterwards), we\ncan simply invoke:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("hello");\n')),Object(l.b)("p",null,"If we wish to reload an existing module, say the ",Object(l.b)("inlineCode",{parentName:"p"},"graph_analyzer")," module above, we\nagain use the same procedure:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("graph_analyzer");\n')),Object(l.b)("p",null,"Lastly, if we wish to reload all existing modules and load any newly added ones\nwe can use:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load_all();\n")))}c.isMDXComponent=!0},357:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=a.a.createContext({}),c=function(e){var n=a.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.a.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,b=p["".concat(o,".").concat(m)]||p[m]||s[m]||l;return t?a.a.createElement(b,i(i({ref:n},d),{},{components:t})):a.a.createElement(b,i({ref:n},d))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=t[d];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);