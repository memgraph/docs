(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3399],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||c[g]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5196:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={id:"triggers",title:"Triggers",sidebar_label:"Triggers"},l={unversionedId:"database-functionalities/triggers",id:"database-functionalities/triggers",isDocsHomePage:!1,title:"Triggers",description:"This article is a part of a series intended to showcase Memgraph's features",source:"@site/docs/database-functionalities/triggers.md",sourceDirName:"database-functionalities",slug:"/database-functionalities/triggers",permalink:"/memgraph/next/database-functionalities/triggers",editUrl:"https://github.com/memgraph/docs/tree/master/docs/database-functionalities/triggers.md",version:"current",sidebar_label:"Triggers",frontMatter:{id:"triggers",title:"Triggers",sidebar_label:"Triggers"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Creating a trigger",id:"creating-a-trigger",children:[{value:"Trigger name",id:"trigger-name",children:[]},{value:"Event type",id:"event-type",children:[]},{value:"Statement execution phase",id:"statement-execution-phase",children:[]},{value:"Execute statements",id:"execute-statements",children:[]},{value:"Predefined variables",id:"predefined-variables",children:[]}]},{value:"Dropping a trigger",id:"dropping-a-trigger",children:[]},{value:"Trigger info",id:"trigger-info",children:[]}],d={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This article is a part of a series intended to showcase Memgraph's features\nand bring the user up to speed on developing with Memgraph."),(0,i.kt)("p",null,"We highly recommend checking out the other articles from this series which\nare listed in our ",(0,i.kt)("a",{parentName:"p",href:"/memgraph/next/database-functionalities"},"database functionalities section"),"."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Memgraph supports running openCypher statements after a certain event happens during transaction execution, i.e. triggers."),(0,i.kt)("p",null,"You can create triggers, delete them, and print them out.\nAll the triggers are persisted on the disk, so no information is lost between the runs."),(0,i.kt)("h2",{id:"creating-a-trigger"},"Creating a trigger"),(0,i.kt)("p",null,"To create a new trigger, a query of the following format should be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"CREATE TRIGGER trigger_name ( ON ( () | --\x3e ) CREATE | UPDATE | DELETE )\n( BEFORE | AFTER ) COMMIT\nEXECUTE openCypherStatements\n")),(0,i.kt)("p",null,"The query may seem complex, so let's break it down."),(0,i.kt)("h3",{id:"trigger-name"},"Trigger name"),(0,i.kt)("p",null,"Each created trigger must have a globally unique name.\nThis implies that you can't have a pair of triggers with the same name, even if they apply to different events."),(0,i.kt)("h3",{id:"event-type"},"Event type"),(0,i.kt)("p",null,"Optionally, users can define on which event a trigger should execute its statements.\nThe event type is defined using the following part:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"ON ( () | --\x3e ) CREATE | UPDATE | DELETE\n")),(0,i.kt)("p",null,"There are three main event types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CREATE"),(0,i.kt)("li",{parentName:"ul"},"UPDATE"),(0,i.kt)("li",{parentName:"ul"},"DELETE")),(0,i.kt)("p",null,"For each event type, users can specify whether to execute the trigger statements only on the events\nthat happened on a vertex, or on an edge. Vertices are denoted with ",(0,i.kt)("inlineCode",{parentName:"p"},"()"),", and edges with ",(0,i.kt)("inlineCode",{parentName:"p"},"--\x3e"),"."),(0,i.kt)("p",null,"Few examples would be:\n",(0,i.kt)("inlineCode",{parentName:"p"},"ON CREATE")," - trigger the statements only if an object (vertex and/or edge) was created during the transaction execution.\n",(0,i.kt)("inlineCode",{parentName:"p"},"ON () UPDATE")," - trigger the statements only if a vertex was updated (e.g. property was set on it) during the transaction execution.\n",(0,i.kt)("inlineCode",{parentName:"p"},"ON --\x3e DELETE")," - trigger the statements only if an edge was deleted during the transaction execution."),(0,i.kt)("p",null,"Each event comes with certain information that can be used in the openCypher statements the trigger executes. The information is contained in the\nform of ",(0,i.kt)("a",{parentName:"p",href:"#predefined-variables"},"predefined variables"),"."),(0,i.kt)("p",null,"If no event type is specified, the trigger executes its statements every time, and all the predefined variables can be used."),(0,i.kt)("h3",{id:"statement-execution-phase"},"Statement execution phase"),(0,i.kt)("p",null,"A trigger can execute its statements at a specified phase, before or after committing the transaction that triggered it.\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"BEFORE COMMIT")," option is used, the trigger will execute its statements as part of that transaction before it's committed.\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"AFTER COMMIT")," option is used, the trigger will execute its statements asynchronously after that transaction is committed."),(0,i.kt)("h3",{id:"execute-statements"},"Execute statements"),(0,i.kt)("p",null,"A trigger can execute any valid openCypher query. No specific constraints are imposed on the queries. The only way trigger queries (i.e. statements) differ to standard queries is that a trigger query may use predefined variables, which are based on the event type specified for the trigger."),(0,i.kt)("h3",{id:"predefined-variables"},"Predefined variables"),(0,i.kt)("p",null,"Statements that a trigger executes can contain certain predefined variables which contain information about the event that triggered it."),(0,i.kt)("p",null,"Based on the event type, the following predefined variables are available:\n| Event type | Predefined variables |\n| ---------- | -------------------- |\n| ON CREATE  | createdVertices, createdEdges, createdObjects|\n| ON () CREATE | createdVertices |\n| ON --\x3e CREATE | createdEdges |\n| ON UPDATE | setVertexProperties, setEdgeProperties, removedVertexProperties, removedEdgeProperties, setVertexLabels, removedVertexLabels, updatedVertices, updatedEdges, updatedObjects |\n| ON () UPDATE | setVertexProperties, removedVertexProperties, setVertexLabels, removedVertexLabels, updatedVertices |\n| ON --\x3e UPDATE | setEdgeProperties, removedEdgeProperties, updatedEdges |\n| ON DELETE | deletedVertices, deletedEdges, deletedObjects |\n| ON () DELETE | deletedVertices |\n| ON --\x3e DELETE | deletedEdges |\n| no event type specified | All predefined variables can be used |"),(0,i.kt)("h4",{id:"createdvertices"},"createdVertices"),(0,i.kt)("p",null,"List of all created vertices."),(0,i.kt)("h4",{id:"creatededges"},"createdEdges"),(0,i.kt)("p",null,"List of all created edges"),(0,i.kt)("h4",{id:"createdobjects"},"createdObjects"),(0,i.kt)("p",null,"List of all created objects where each element is a map.\nIf the element contains a created vertex, it will be in the following format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "created_vertex",\n  "vertex": created_vertex_object\n}\n')),(0,i.kt)("p",null,"If the element contains a created edge, it will be in the following format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "created_edge",\n  "edge": created_edge_object\n}\n')),(0,i.kt)("h4",{id:"deletedvertices"},"deletedVertices"),(0,i.kt)("p",null,"List of all deleted vertices."),(0,i.kt)("h4",{id:"deletededges"},"deletedEdges"),(0,i.kt)("p",null,"List of all deleted edges"),(0,i.kt)("h4",{id:"deletedobjects"},"deletedObjects"),(0,i.kt)("p",null,"List of all deleted objects where each element is a map.\nIf the element contains a deleted vertex, it will be in the following format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "deleted_vertex",\n  "vertex": deleted_vertex_object\n}\n')),(0,i.kt)("p",null,"If the element contains a deleted edge, it will be in the following format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "deleted_edge",\n  "edge": deleted_edge_object\n}\n')),(0,i.kt)("h4",{id:"general-notes-about-the-predefined-variables-for-updates"},"General notes about the predefined variables for updates"),(0,i.kt)("p",null,"Setting an element to ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," is counted as a removal.\nThe changes are looked at the transaction level only. That means if the value under a same property on a same object was changed multiple times, only one update will be generated. Same applies for the labels on the vertex."),(0,i.kt)("h4",{id:"setvertexproperties"},"setVertexProperties"),(0,i.kt)("p",null,"List of all set vertex properties.\nEach element is in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "vertex": updated_vertex_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property,\n  "new": new_value_of_that_property\n}\n')),(0,i.kt)("h4",{id:"setedgeproperties"},"setEdgeProperties"),(0,i.kt)("p",null,"List of all set edge properties.\nEach element is in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "edge": updated_vertex_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property,\n  "new": new_value_of_that_property\n}\n')),(0,i.kt)("h4",{id:"removedvertexproperties"},"removedVertexProperties"),(0,i.kt)("p",null,"List of all removed vertex properties.\nEach element is in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "vertex": updated_vertex_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property\n}\n')),(0,i.kt)("h4",{id:"removededgeproperties"},"removedEdgeProperties"),(0,i.kt)("p",null,"List of all removed edge properties.\nEach element is in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "vertex": updated_vertex_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property\n}\n')),(0,i.kt)("h4",{id:"setvertexlabels"},"setVertexLabels"),(0,i.kt)("p",null,"List of all set vertex labels.\nEach element is in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "label": label,\n  "vertices": list_of_updated_vertices\n}\n')),(0,i.kt)("h4",{id:"removedvertexlabels"},"removedVertexLabels"),(0,i.kt)("p",null,"List of all removed vertex labels.\nEach element is in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "label": label,\n  "vertices": list_of_updated_vertices\n}\n')),(0,i.kt)("h4",{id:"updatedvertices"},"updatedVertices"),(0,i.kt)("p",null,"List of updates consisting of set and removed properties, and set and removed labels on vertices."),(0,i.kt)("h4",{id:"updatededges"},"updatedEdges"),(0,i.kt)("p",null,"List of updates consisting of set and removed properties on edges."),(0,i.kt)("h4",{id:"updatedobjects"},"updatedObjects"),(0,i.kt)("p",null,"List of updates consisting of set and removed properties on edges and vertices, and set and removed labels on vertices."),(0,i.kt)("h4",{id:"elements-of-the-predefined-variables-for-update"},"Elements of the predefined variables for update"),(0,i.kt)("p",null,"Each element has similar format as the previously defined elements."),(0,i.kt)("p",null,"If the element contains information about a set vertex property, it's in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "set_vertex_property",\n  "vertex": updated_vertex_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property,\n  "new": new_value_of_that_property\n}\n')),(0,i.kt)("p",null,"If the element contains information about a removed vertex property, it's in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "removed_vertex_property",\n  "vertex": updated_vertex_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property\n}\n')),(0,i.kt)("p",null,"If the element contains information about a set edge property, it's in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "set_edge_property",\n  "edge": updated_edge_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property,\n  "new": new_value_of_that_property\n}\n')),(0,i.kt)("p",null,"If the element contains information about a removed edge property, it's in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "removed_edge_property",\n  "edge": updated_edge_object,\n  "key": property_that_was_updated,\n  "old": old_value_of_that_property\n}\n')),(0,i.kt)("p",null,"If the element contains information about a set vertex label, it's in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "set_vertex_label",\n  "vertex": updated_vertex_object,\n  "label": label\n}\n')),(0,i.kt)("p",null,"If the element contains information about a removed vertex label, it's in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "event_type": "removed_vertex_label",\n  "vertex": updated_vertex_object,\n  "label": label\n}\n')),(0,i.kt)("h2",{id:"dropping-a-trigger"},"Dropping a trigger"),(0,i.kt)("p",null,"A trigger can be removed by running the following query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"DROP TRIGGER trigger_name;\n")),(0,i.kt)("h2",{id:"trigger-info"},"Trigger info"),(0,i.kt)("p",null,"Users can get info about all the triggers by using the following query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"SHOW TRIGGERS;\n")),(0,i.kt)("p",null,"which returns results in the following format:\n|trigger name| statement | event type | phase |\n|----------- |---------- | -----------| ------|\n| name of the trigger| statement which trigger executes | event which triggers the statement | phase at which the trigger executes its statement |"))}p.isMDXComponent=!0}}]);