"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[90121],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(r),h=a,g=c["".concat(p,".").concat(h)]||c[h]||d[h]||o;return r?n.createElement(g,l(l({ref:t},u),{},{components:r})):n.createElement(g,l({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},77408:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={id:"graph-projection",title:"How to create a graph projection",sidebar_label:"Create a graph projection"},l=void 0,i={unversionedId:"how-to-guides/query-builder/graph-projection",id:"how-to-guides/query-builder/graph-projection",title:"How to create a graph projection",description:"[![Related -",source:"@site/gqlalchemy/how-to-guides/query-builder/graph-projection.md",sourceDirName:"how-to-guides/query-builder",slug:"/how-to-guides/query-builder/graph-projection",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/graph-projection",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/query-builder/graph-projection.md",tags:[],version:"current",frontMatter:{id:"graph-projection",title:"How to create a graph projection",sidebar_label:"Create a graph projection"},sidebar:"gqlalchemy",previous:{title:"Use on-disk storage",permalink:"/docs/gqlalchemy/how-to-guides/on-disk-storage"},next:{title:"Import NetworkX graph into Memgraph",permalink:"/docs/gqlalchemy/how-to-guides/networkx"}},p={},s=[],u={toc:s};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=How-to&color=blue&style=for-the-badge",alt:"Related -\nHow-to"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://memgraph.com/blog/how-we-designed-and-implemented-graph-projection-feature"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=Under%20the%20hood&color=orange&style=for-the-badge",alt:"Related - Under the\nHood"}))),(0,a.kt)("p",null,"As subgraphs are mainly used with Memgraph's query modules (graph algorithms),\n",(0,a.kt)("inlineCode",{parentName:"p"},"QueryBuilder"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"call()")," method enables specifying the subgraph to use with a certain algorithm."),(0,a.kt)("p",null,"To call a procedure named ",(0,a.kt)("inlineCode",{parentName:"p"},"test_query_module")," with argument ",(0,a.kt)("inlineCode",{parentName:"p"},'"arg"'),", and run\nit on a subgraph containing only nodes with label ",(0,a.kt)("inlineCode",{parentName:"p"},":LABEL")," and their mutual\nrelationships build the following query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'from gqlalchemy import QueryBuilder\n\nlabel = "LABEL"\n\nquery_builder = QueryBuilder().call(procedure="test_query_module",\n                                    arguments=("arg"), node_labels=label)\n\nquery_builder.execute()\n')),(0,a.kt)("p",null,"The above code executes the following Cypher query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Cypher"},"MATCH p=(a)--\x3e(b)\nWHERE (a:LABEL)\nAND (b:LABEL)\nWITH project(p) AS graph\nCALL test_query_module(graph, 'arg')\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AND")," clauses are used to allow for more generalization. To expand\non this code you can use multiple relationship types and node\nlabels. Node labels and relationship types can be passed as a single string, in\nwhich case that string is used for all labels or types. To specify different\nlabels and types for entities on a path, you need to pass a list of lists,\ncontaining a list of labels for every node on a path, and likewise for relationships. You can use this as following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'node_labels = [["COMP", "DEVICE"], ["USER"], ["SERVICE", "GATEWAY"]]\nrelationship_types = [["OWNER", "RENTEE"], ["USES", "MAKES"]]\nrelationship_directions = [RelationshipDirection.LEFT, RelationshipDirection.RIGHT]\narguments = ("arg0", 5)\n\nquery_builder = QueryBuilder().call(procedure="test_query_module",\n                                    arguments = arguments,\n                                    node_labels=node_labels,\n                                    relationship_types=relationship_types,\n                                    relationship_directions=relationship_directions)\n\nquery_builder.execute()\n')),(0,a.kt)("p",null,"The above code executes the following Cypher query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Cypher"},'MATCH p=(a)<-[:OWNER | :RENTEE]-(b)-[:USES | :MAKES]->(c)\nWHERE (a:COMP or a:DEVICE)\nAND (b:USER)\nAND (c:SERVICE or c:GATEWAY)\nWITH project(p) AS graph\nCALL test_query_module(graph, "arg0", 5)\n')),(0,a.kt)("p",null,"This query calls ",(0,a.kt)("inlineCode",{parentName:"p"},"test_query_module")," on a subgraph containing all nodes labeled\n",(0,a.kt)("inlineCode",{parentName:"p"},"USER")," that have an outgoing relationship of types either ",(0,a.kt)("inlineCode",{parentName:"p"},"OWNER")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"RENTEE")," towards nodes labeled ",(0,a.kt)("inlineCode",{parentName:"p"},"COMP")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"DEVICE")," and also a relationship of type ",(0,a.kt)("inlineCode",{parentName:"p"},"USES")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"MAKES")," towards nodes labeled ",(0,a.kt)("inlineCode",{parentName:"p"},"SERVICE")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"GATEWAY"),"."))}d.isMDXComponent=!0}}]);