"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88048],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(h,o(o({ref:t},i),{},{components:n})):a.createElement(h,o({ref:t},i))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},16846:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>d,assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),l=n(74866),o=n(85162),u=n(83523);const s={id:"llm-util",title:"llm_util",sidebar_label:"llm_util"},p=void 0,i={unversionedId:"query-modules/python/llm-util",id:"query-modules/python/llm-util",title:"llm_util",description:"docs-source",source:"@site/mage/query-modules/python/llm-util.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/llm-util",permalink:"/docs/mage/query-modules/python/llm-util",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/llm-util.md",tags:[],version:"current",frontMatter:{id:"llm-util",title:"llm_util",sidebar_label:"llm_util"},sidebar:"mage",previous:{title:"link_prediction_with_gnn",permalink:"/docs/mage/query-modules/python/link-prediction-with-gnn"},next:{title:"map",permalink:"/docs/mage/query-modules/cpp/map"}},m={},c=[{value:"Procedures",id:"procedures",level:2},{value:"schema(output_type)",id:"schemaoutput_type",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"Example - Get prompt-ready graph schema",id:"example---get-prompt-ready-graph-schema",level:2},{value:"Example - Get raw graph schema",id:"example---get-raw-graph-schema",level:2}],d=e=>{let{children:t,color:n}=e;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},h={toc:c,Highlight:d};function y(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/json_util.py"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-llm_util-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Trait"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Module type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"util")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Implementation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"Python")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"sequential")))))),(0,r.kt)("h2",{id:"procedures"},"Procedures"),(0,r.kt)(u.ZP,{mdxType:"RunOnSubgraph"}),(0,r.kt)("h3",{id:"schemaoutput_type"},"schema(output_type)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"schema()")," procedure generates the graph database schema in a ",(0,r.kt)("strong",{parentName:"p"},"prompt-ready")," or ",(0,r.kt)("strong",{parentName:"p"},"raw")," format. The prompt-ready format is optimized to describe the database schema in words best recognized by large language models (LLMs). The raw format offers all the necessary information about the graph schema in a format that can be customized for later use with LLMs."),(0,r.kt)("h4",{id:"input"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"output_type: str (default='prompt_ready')")," \u27a1 By default, the graph schema will include additional context and it will be prompt-ready. If set to 'raw', it will produce a simpler version that can be adjusted for the prompt.")),(0,r.kt)("h4",{id:"output"},"Output:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"schema: mgp.Any")," \u27a1 ",(0,r.kt)("inlineCode",{parentName:"li"},"str")," containing prompt-ready graph schema description in a format suitable for large language models (LLMs), or ",(0,r.kt)("inlineCode",{parentName:"li"},"mgp.List")," containing information on graph schema in raw format which can customized for LLMs. ")),(0,r.kt)("h4",{id:"usage"},"Usage:"),(0,r.kt)("p",null,"Get ",(0,r.kt)("strong",{parentName:"p"},"prompt-ready graph schema"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL llm_util.schema() YIELD schema RETURN schema;\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL llm_util.schema('prompt_ready') YIELD schema RETURN schema;\n")),(0,r.kt)("p",null,"Get ",(0,r.kt)("strong",{parentName:"p"},"raw graph schema"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL llm_util.schema('raw') YIELD schema RETURN schema;\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"output_type")," is case-insensitive. ")),(0,r.kt)("h2",{id:"example---get-prompt-ready-graph-schema"},"Example - Get prompt-ready graph schema"),(0,r.kt)(l.Z,{groupId:"get_prompt_ready_schema",defaultValue:"graph1",values:[{label:"Create a graph",value:"graph1"},{label:"Database schema",value:"schema1"},{label:"Run the command",value:"run1"},{label:"Result",value:"result1"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"graph1",mdxType:"TabItem"},(0,r.kt)("p",null,"  Create a graph by running the following Cypher query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (n:Person {name: "Kate", age: 27})-[:IS_FRIENDS_WITH {since: "2023-06-21"}]->(m:Person:Student {name: "James", age: 30, year: "second"})-[:STUDIES_AT]->(:University {name: "University of Zagreb"}) CREATE (p:Person:Student {name: "Anthony", age: 25})-[:STUDIES_AT]->(:University {name: "University of Vienna"}) \nWITH n, m \nCREATE (n)-[:LIVES_IN]->(:City {name: "Zagreb"})<-[:LIVES_IN]-(m);\n'))),(0,r.kt)(o.Z,{value:"schema1",mdxType:"TabItem"},"The schema of the created graph can be seen in Memgraph Lab, under the ",(0,r.kt)("em",null,"Graph Schema")," tab:",(0,r.kt)("div",{className:"imgSmaller"},(0,r.kt)("img",{src:n(466).Z}))),(0,r.kt)(o.Z,{value:"run1",mdxType:"TabItem"},(0,r.kt)("p",null,"Once the graph is created, run the following code to call the ",(0,r.kt)("code",null,"schema")," procedure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL llm_util.schema() YIELD schema RETURN schema;\n")),(0,r.kt)("p",null,"or "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL llm_util.schema('prompt_ready') YIELD schema RETURN schema;\n"))),(0,r.kt)(o.Z,{value:"result1",mdxType:"TabItem"},(0,r.kt)("p",null,"Below is the result of running the ",(0,r.kt)("code",null,"schema")," procedure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Node properties are the following:\nNode name: 'Person', Node properties: [{'property': 'name', 'type': 'str'}, {'property': 'age', 'type': 'int'}, {'property': 'year', 'type': 'str'}]\nNode name: 'Student', Node properties: [{'property': 'name', 'type': 'str'}, {'property': 'age', 'type': 'int'}, {'property': 'year', 'type': 'str'}]\nNode name: 'University', Node properties: [{'property': 'name', 'type': 'str'}]\nNode name: 'City', Node properties: [{'property': 'name', 'type': 'str'}]\n\nRelationship properties are the following:\nRelationship Name: 'IS_FRIENDS_WITH', Relationship Properties: [{'property': 'since', 'type': 'str'}]\n\nThe relationships are the following:\n['(:Person)-[:IS_FRIENDS_WITH]->(:Person)']\n['(:Person)-[:IS_FRIENDS_WITH]->(:Student)']\n['(:Person)-[:LIVES_IN]->(:City)']\n['(:Person)-[:STUDIES_AT]->(:University)']\n['(:Student)-[:STUDIES_AT]->(:University)']\n['(:Student)-[:LIVES_IN]->(:City)']\n")))),(0,r.kt)("h2",{id:"example---get-raw-graph-schema"},"Example - Get raw graph schema"),(0,r.kt)(l.Z,{groupId:"get_raw_schema",defaultValue:"graph2",values:[{label:"Create a graph",value:"graph2"},{label:"Database schema",value:"schema2"},{label:"Run the command",value:"run2"},{label:"Result",value:"result2"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"graph2",mdxType:"TabItem"},(0,r.kt)("p",null,"  Create a graph by running the following Cypher query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (n:Person {name: "Kate", age: 27})-[:IS_FRIENDS_WITH {since: "2023-06-21"}]->(m:Person:Student {name: "James", age: 30, year: "second"})-[:STUDIES_AT]->(:University {name: "University of Zagreb"}) CREATE (p:Person:Student {name: "Anthony", age: 25})-[:STUDIES_AT]->(:University {name: "University of Vienna"}) \nWITH n, m \nCREATE (n)-[:LIVES_IN]->(:City {name: "Zagreb"})<-[:LIVES_IN]-(m);\n'))),(0,r.kt)(o.Z,{value:"schema2",mdxType:"TabItem"},"The schema of the created graph can be seen in Memgraph Lab, under the ",(0,r.kt)("em",null,"Graph Schema")," tab:",(0,r.kt)("div",{className:"imgSmaller"},(0,r.kt)("img",{src:n(466).Z}))),(0,r.kt)(o.Z,{value:"run2",mdxType:"TabItem"},(0,r.kt)("p",null,"Once the graph is created, run the following code to call the ",(0,r.kt)("code",null,"schema")," procedure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL llm_util.schema('raw') YIELD schema RETURN schema;\n"))),(0,r.kt)(o.Z,{value:"result2",mdxType:"TabItem"},(0,r.kt)("p",null,"Below is the result of running the ",(0,r.kt)("code",null,"schema")," procedure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n   "node_props": {\n      "City": [\n         {\n            "property": "name",\n            "type": "str"\n         }\n      ],\n      "Person": [\n         {\n            "property": "name",\n            "type": "str"\n         },\n         {\n            "property": "age",\n            "type": "int"\n         },\n         {\n            "property": "year",\n            "type": "str"\n         }\n      ],\n      "Student": [\n         {\n            "property": "name",\n            "type": "str"\n         },\n         {\n            "property": "age",\n            "type": "int"\n         },\n         {\n            "property": "year",\n            "type": "str"\n         }\n      ],\n      "University": [\n         {\n            "property": "name",\n            "type": "str"\n         }\n      ]\n   },\n   "rel_props": {\n      "IS_FRIENDS_WITH": [\n         {\n            "property": "since",\n            "type": "str"\n         }\n      ]\n   },\n   "relationships": [\n      {\n         "end": "Person",\n         "start": "Person",\n         "type": "IS_FRIENDS_WITH"\n      },\n      {\n         "end": "Student",\n         "start": "Person",\n         "type": "IS_FRIENDS_WITH"\n      },\n      {\n         "end": "City",\n         "start": "Person",\n         "type": "LIVES_IN"\n      },\n      {\n         "end": "University",\n         "start": "Person",\n         "type": "STUDIES_AT"\n      },\n      {\n         "end": "University",\n         "start": "Student",\n         "type": "STUDIES_AT"\n      },\n      {\n         "end": "City",\n         "start": "Student",\n         "type": "LIVES_IN"\n      }\n   ]\n}\n')))))}y.isMDXComponent=!0},83523:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,r.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}o.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(87462),r=n(67294),l=n(86010),o=n(12466),u=n(16550),s=n(91980),p=n(67392),i=n(50012);function m(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,u.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=c(e),[o,u]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,p]=h({queryString:n,groupId:a}),[m,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,i.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=s??m;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&u(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);u(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var g=n(72389);const b="tabList__CuJ",f="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:u,selectValue:s,tabValues:p}=e;const i=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),c=e=>{const t=e.currentTarget,n=i.indexOf(t),a=p[n].value;a!==u&&(m(t),s(a))},d=e=>{var t;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:e=>i.push(e),onKeyDown:d,onClick:c},o,{className:(0,l.Z)("tabs__item",f,null==o?void 0:o.className,{"tabs__item--active":u===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=y(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function T(e){const t=(0,g.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},466:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/memgraph-lab-schema-ba1fbab2afa2c85885d64aa678d5590a.png"}}]);