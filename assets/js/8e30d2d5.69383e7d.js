"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19832],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>c});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=n.createContext({}),u=function(e){var a=n.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(d.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},s=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=u(t),c=r,g=s["".concat(d,".").concat(c)]||s[c]||m[c]||l;return t?n.createElement(g,o(o({ref:a},p),{},{components:t})):n.createElement(g,o({ref:a},p))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=s;var i={};for(var d in a)hasOwnProperty.call(a,d)&&(i[d]=a[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}s.displayName="MDXCreateElement"},57431:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var n=t(87462),r=(t(67294),t(3905)),l=t(25068);const o={id:"loading-modules",title:"How to load MAGE query modules?",sidebar_label:"Loading query modules"},i=void 0,d={unversionedId:"usage/loading-modules",id:"usage/loading-modules",title:"How to load MAGE query modules?",description:"Query modules can be written using the C and C++ APIs (creating .so modules)",source:"@site/mage/usage/loading-modules.md",sourceDirName:"usage",slug:"/usage/loading-modules",permalink:"/docs/mage/usage/loading-modules",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/usage/loading-modules.md",tags:[],version:"current",frontMatter:{id:"loading-modules",title:"How to load MAGE query modules?",sidebar_label:"Loading query modules"},sidebar:"mage",previous:{title:"MAGE \xd7 NVIDIA cuGraph",permalink:"/docs/mage/installation/cugraph"},next:{title:"Calling procedures",permalink:"/docs/mage/usage/calling-procedures"}},u={},p=[{value:"Loading query modules",id:"loading-query-modules",level:2},{value:"Utility query module",id:"utility-query-module",level:2},{value:"General procedures",id:"general-procedures",level:2},{value:"<code>mg.procedures</code>",id:"mgprocedures",level:3},{value:"<code>mg.load_all</code>",id:"mgload_all",level:3},{value:"<code>mg.load</code>",id:"mgload",level:3}],m={toc:p};function s(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Query modules can be written using the C and C++ APIs (creating ",(0,r.kt)("inlineCode",{parentName:"p"},".so")," modules)\nand the Python API (creating ",(0,r.kt)("inlineCode",{parentName:"p"},"*.py"),") modules. Each file corresponds to one query\nmodule and contains at least one procedure. The names of these files will be\nmapped to the query module names. For example, a procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"node_connectivity"),"\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"nxalg.py")," will be mapped to ",(0,r.kt)("inlineCode",{parentName:"p"},"nxalg.node_connectivity()")," in the Cypher query\nlanguage."),(0,r.kt)("h2",{id:"loading-query-modules"},"Loading query modules"),(0,r.kt)(l.ZP,{mdxType:"Loading"}),(0,r.kt)("h2",{id:"utility-query-module"},"Utility query module"),(0,r.kt)("p",null,"Built-in utility query module (",(0,r.kt)("inlineCode",{parentName:"p"},"mg"),") contains procedures that enable you to\nmanage query modules files."),(0,r.kt)("h2",{id:"general-procedures"},"General procedures"),(0,r.kt)("p",null,"Here is the list of procedures from the ",(0,r.kt)("inlineCode",{parentName:"p"},"mg")," query module that can be used with\nall other query module files, and their signatures:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Procedure"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mg.procedures() -> (name\\|STRING, signature\\|STRING)")),(0,r.kt)("td",{parentName:"tr",align:null},"Lists loaded procedures and their signatures.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mg.load(module_name\\|STRING) -> ()")),(0,r.kt)("td",{parentName:"tr",align:null},"Loads or reloads the given module.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mg.load_all() -> ()")),(0,r.kt)("td",{parentName:"tr",align:null},"Loads or reloads all modules.")))),(0,r.kt)("h3",{id:"mgprocedures"},(0,r.kt)("inlineCode",{parentName:"h3"},"mg.procedures")),(0,r.kt)("p",null,"Lists loaded procedures and their signatures."),(0,r.kt)("p",null,"Example of a Cypher query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.procedures() YIELD *;\n")),(0,r.kt)("p",null,"Example of a result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+-------------+---------------------+-------------------+-----------------------------------------------------------------------------------------------------------------------+\n| is_editable | name                | path              | signature                                                                                                             |\n+-------------+---------------------+-------------------+-----------------------------------------------------------------------------------------------------------------------+\n| ...         | ...                 | ...               | ...                                                                                                                   |\n| true        | graph_analyzer.help | "/path/to/module" | graph_analyzer.help() :: (name :: STRING, value :: STRING)                                                            |\n| false       | mg.load             | "builtin"         | mg.load(module_name :: STRING) :: ()                                                                                  |\n| false       | mg.load_all         | "builtin"         | mg.load_all() :: ()                                                                                                   |\n| false       | mg.procedures       | "builtin"         | mg.procedures() :: (name :: STRING, signature :: STRING, is_write :: BOOLEAN, path :: STRING, is_editable :: BOOLEAN) |\n| ...         | ...                 | ...               | ...                                                                                                                   |\n+-------------+---------------------+-------------------+-----------------------------------------------------------------------------------------------------------------------+\n')),(0,r.kt)("h3",{id:"mgload_all"},(0,r.kt)("inlineCode",{parentName:"h3"},"mg.load_all")),(0,r.kt)("p",null,"Loads or reloads the given module."),(0,r.kt)("p",null,"Example of a Cypher query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load_all();\n")),(0,r.kt)("p",null,"If the response is ",(0,r.kt)("inlineCode",{parentName:"p"},"Empty set (x.x sec)")," and there are no error messages, the\nupdate was successful."),(0,r.kt)("h3",{id:"mgload"},(0,r.kt)("inlineCode",{parentName:"h3"},"mg.load")),(0,r.kt)("p",null,"Loads or reloads all modules."),(0,r.kt)("p",null,"Example of a Cypher query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("py_example");\n')),(0,r.kt)("p",null,"If the response is ",(0,r.kt)("inlineCode",{parentName:"p"},"Empty set (x.x sec)")," and there are no error messages, the\nupdate was successful."))}s.isMDXComponent=!0},25068:(e,a,t)=>{t.d(a,{ZP:()=>o});var n=t(87462),r=(t(67294),t(3905));const l={toc:[]};function o(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Once you start Memgraph, it will attempt to load query modules from all ",(0,r.kt)("inlineCode",{parentName:"p"},"*.so"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"*.py")," files from the default (",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"/var/lib/memgraph/internal_modules"),") directories. "),(0,r.kt)("p",null,"MAGE modules are located at\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," and custom modules developed via Memgraph Lab at\n",(0,r.kt)("inlineCode",{parentName:"p"},"/var/lib/memgraph/internal_modules"),"."),(0,r.kt)("p",null,"Memgraph can load query modules from additional directories, if their path is\nadded to the ",(0,r.kt)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main configuration file\n(",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supplied as a command-line parameter (e.g.\nwhen using Docker). "),(0,r.kt)("p",null,"If you are supplying the additional directory as a parameter, do not forget to\ninclude the path to ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules"),", otherwise queries from\nthat directory will not be loaded when Memgraph starts."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When working with Docker and ",(0,r.kt)("inlineCode",{parentName:"p"},"memgraph-platform")," image, you should pass\nconfiguration flags inside of environment variables, for example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-terminal"},'docker run -p 7687:7687 -p 7444:7444 -p 3000:3000 -e MEMGRAPH="--query-modules-directory=/usr/lib/memgraph/query_modules,/usr/lib/memgraph/my_modules" memgraph/memgraph-platform`\n')),(0,r.kt)("p",{parentName:"admonition"},"If you are working with ",(0,r.kt)("inlineCode",{parentName:"p"},"memgraph")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"memgraph-mage")," images you should pass\nconfiguration options like this: "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-terminal"},"docker run -p 7687:7687 -p 7444:7444 memgraph/memgraph --query-modules-directory=/usr/lib/memgraph/query_modules,/usr/lib/memgraph/my_modules\n"))),(0,r.kt)("p",null,"If a certain query module was added while Memgraph was already running, you need\nto load it manually using the ",(0,r.kt)("inlineCode",{parentName:"p"},'mg.load("module_name")')," procedure within a query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("py_example");\n')),(0,r.kt)("p",null,"If there is no response (no error message), the load was successful."),(0,r.kt)("p",null,"If you want to reload all existing modules and load any newly added ones, use\n",(0,r.kt)("inlineCode",{parentName:"p"},"mg.load_all()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load_all();\n")),(0,r.kt)("p",null,"If there is no response (no error message), the load was successful."),(0,r.kt)("p",null,"You can check if the query module has been loaded by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"mg.procedures()"),"\nprocedure within a query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.procedures() YIELD *;\n")))}o.isMDXComponent=!0}}]);