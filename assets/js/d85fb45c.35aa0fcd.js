"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98761],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},77108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={id:"indexing",title:"Indexing",sidebar_label:"Indexing"},l=void 0,o={unversionedId:"concepts/indexing",id:"version-2.1.0/concepts/indexing",title:"Indexing",description:"Introduction",source:"@site/memgraph_versioned_docs/version-2.1.0/concepts/indexing.md",sourceDirName:"concepts",slug:"/concepts/indexing",permalink:"/docs/memgraph/2.1.0/concepts/indexing",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/concepts/indexing.md",tags:[],version:"2.1.0",frontMatter:{id:"indexing",title:"Indexing",sidebar_label:"Indexing"},sidebar:"version-2.1.0/memgraph",previous:{title:"Graph algorithms",permalink:"/docs/memgraph/2.1.0/concepts/graph-algorithms"},next:{title:"Replication",permalink:"/docs/memgraph/2.1.0/concepts/replication"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Index Types",id:"index-types",level:2},{value:"Underlying Implementation",id:"underlying-implementation",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"A database index is a data structure used to improve the speed of data retrieval\nwithin a database at the cost of additional writes and storage space for\nmaintaining the index data structure."),(0,r.kt)("p",null,"Armed with deep understanding of their data model and use-case, users can decide\nwhich data to index and, by doing so, significantly improve their data retrieval\nefficiency"),(0,r.kt)("h2",{id:"index-types"},"Index Types"),(0,r.kt)("p",null,"At Memgraph, we support two types of indexes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"label index"),(0,r.kt)("li",{parentName:"ul"},"label-property index")),(0,r.kt)("p",null,"Label indexing is NOT enabled by default in Memgraph, i.e., Memgraph will not\nautomatically index labeled data. Therefore, it is up to the user to perform\nthe indexing explicitly. By doing so, one can optimize queries that fetch\nnodes by label:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n: Label) ... RETURN n;\n")),(0,r.kt)("p",null,"Indexes can also be created on data with a specific combination of label and\nproperty, hence the name label-property index. This operation needs to be\nspecified by the user and should be used with a specific data model and\nuse-case in mind."),(0,r.kt)("p",null,"For example, suppose we are storing information about certain people in our\ndatabase and we are often interested in retrieving their age. In that case,\nit might be beneficial to create an index on nodes labeled as ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," which\nhave a property named ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),". We can do so by using the following language\nconstruct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE INDEX ON :Person(age);\n")),(0,r.kt)("p",null,"After the creation of that index, those queries will be more efficient due to\nthe fact that Memgraph's query engine will not have to fetch each ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," node\nand check whether the property exists. Moreover, even if all nodes labeled as\n",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," had an ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," property, creating such index might still prove to be\nbeneficial. The main reason is that entries within that index are kept sorted\nby property value. Queries such as the following are therefore more efficient:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n :Person {age: 42}) RETURN n;\n")),(0,r.kt)("p",null,"Index based retrieval can also be invoked on queries with ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," statements.\nFor instance, the following query will have the same effect as the previous\none:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) WHERE n:Person AND n.age = 42 RETURN n;\n")),(0,r.kt)("p",null,"Naturally, indexes will also be used when filtering based on less than or\ngreater than comparisons. For example, filtering all minors (persons\nunder 18 years of age under Croatian law) using the following query will use\nindex based retrieval:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) WHERE n:PERSON and n.age < 18 RETURN n;\n")),(0,r.kt)("p",null,"Bear in mind that ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," filters could contain arbitrarily complex expressions\nand index based retrieval might not be used. Nevertheless, we are continually\nimproving our index usage recognition algorithms."),(0,r.kt)("p",null,"Information about available indexes can be retrieved by using the following\nsyntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW INDEX INFO;\n")),(0,r.kt)("p",null,"The results of this query will be all of the labels and label-property pairs\nthat Memgraph currently indexes."),(0,r.kt)("p",null,"Created indexes can also be deleted by using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"DROP INDEX ON :Label(property);\n")),(0,r.kt)("p",null,"Dropping an index will instruct all active transactions to abort as soon as\npossible, and it will wait for them to finish. Once all transaction have\nfinished, it will drop the index."),(0,r.kt)("h2",{id:"underlying-implementation"},"Underlying Implementation"),(0,r.kt)("p",null,"The central part of our index data structure is a highly-concurrent skip list.\nSkip lists are probabilistic data structures that allow fast search within an\nordered sequence of elements. The structure itself is built in layers where the\nbottom layer is an ordinary linked list that preserves the order. Each higher\nlevel can be imagined as a highway for layers below."),(0,r.kt)("p",null,"The implementation details behind skip list operations are well documented\nin the literature and are out of scope for this article. Nevertheless, we\nbelieve that it is important for more advanced users to understand the following\nimplications of this data structure (",(0,r.kt)("inlineCode",{parentName:"p"},"n")," denotes the current number of elements\nin a skip list):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Average insertion time is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(log(n))")),(0,r.kt)("li",{parentName:"ul"},"Average deletion time is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(log(n))")),(0,r.kt)("li",{parentName:"ul"},"Average search time is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(log(n))")),(0,r.kt)("li",{parentName:"ul"},"Average memory consumption is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(n)"))))}c.isMDXComponent=!0}}]);