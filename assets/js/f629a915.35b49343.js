"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[89507],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>c});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=p(t),c=o,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||r;return t?a.createElement(m,s(s({ref:n},d),{},{components:t})):a.createElement(m,s({ref:n},d))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},31978:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=t(87462),o=(t(67294),t(3905)),r=t(59918);const s={id:"save-nodes-and-relationships",title:"How to save nodes and relationships",sidebar_label:"Save nodes and relationships"},i=void 0,l={unversionedId:"how-to-guides/ogm/save-nodes-and-relationships",id:"how-to-guides/ogm/save-nodes-and-relationships",title:"How to save nodes and relationships",description:"Through this guide, you will learn how to save nodes and relationships to a",source:"@site/gqlalchemy/how-to-guides/ogm/save-nodes-and-relationships.md",sourceDirName:"how-to-guides/ogm",slug:"/how-to-guides/ogm/save-nodes-and-relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/save-nodes-and-relationships",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/ogm/save-nodes-and-relationships.md",tags:[],version:"current",frontMatter:{id:"save-nodes-and-relationships",title:"How to save nodes and relationships",sidebar_label:"Save nodes and relationships"},sidebar:"gqlalchemy",previous:{title:"Map nodes and relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/map-nodes-and-relationships"},next:{title:"Load nodes and relationships",permalink:"/docs/gqlalchemy/how-to-guides/ogm/load-nodes-and-relationships"}},p={},d=[],u={toc:d};function h(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Through this guide, you will learn how to save nodes and relationships to a\ngraph database."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Make sure you have a running Memgraph instance. If you're not sure how to run\nMemgraph, check out the Memgraph ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/#quick-start"},"Quick start"),".")),(0,o.kt)("p",null,"Let's say you want to save node ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," and node ",(0,o.kt)("inlineCode",{parentName:"p"},"Language"),", for which you have\ndefined classes in Python:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from gqlalchemy import Memgraph, Node, Relationship, Field\n\ndb = Memgraph()\n\nclass User(Node):\n    id: str = Field(index=True, exist=True, unique=True, db=db)\n    username: str = Field(index=True, exist=True, unique=True, db=db)\n\nclass Language(Node):\n    name: str = Field(unique=True, db=db)\n")),(0,o.kt)(r.ZP,{mdxType:"Neo4jOption"}),(0,o.kt)("p",null,"Then you create and save objects with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'user = User(id="3", username="John").save(db)\nlanguage = Language(name="en").save(db)\n')),(0,o.kt)("p",null,"There is another way of creating and saving objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'user = User(id="3", username="John")\ndb.save_node(user)\n\nlanguage = Language(name="en")\ndb.save_node(language)\n')),(0,o.kt)("p",null,"These methods will check if the node is already in Memgraph and if not, create a\nnew one. If it existed before in Memgraph, then the internal id of that node in\nMemgraph remains the same."),(0,o.kt)("p",null,"Next, let's say that John speaks English. You need to create and save a\nrelationship of type ",(0,o.kt)("inlineCode",{parentName:"p"},"SPEAKS"),". First, we define a class which maps to the\nrelationship in the database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Speaks(Relationship, type="SPEAKS"):\n    pass\n')),(0,o.kt)("p",null,"This relationship doesn't have any properties. To save it, you need to first\ncreate it with appropriate start and end nodes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"speaks_rel = Speaks(\n    _start_node_id = user._id,\n    _end_node_id = language._id\n).save(db)\n")),(0,o.kt)("p",null,"Another way is by first creating the relationship and then saving it using the\nmethod ",(0,o.kt)("inlineCode",{parentName:"p"},"save_relationship()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"speaks_rel = Speaks(\n    _start_node_id = user._id,\n    _end_node_id = language._id\n)\ndb.save_relationship(speaks_rel)\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The property ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," is an internal Memgraph id - an id given to each node upon\nsaving to the database. ")),(0,o.kt)("p",null,"Hopefully this guide has taught you how to create and save nodes and\nrelationships. If you have any more questions, join our community and ping us on\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/memgraph"},"Discord"),"."))}h.isMDXComponent=!0},59918:(e,n,t)=>{t.d(n,{ZP:()=>s});var a=t(87462),o=(t(67294),t(3905));const r={toc:[]};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"You can also use this feature with Neo4j:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'db = Neo4j(host="localhost", port="7687", username="neo4j", password="test")\n'))))}s.isMDXComponent=!0}}]);