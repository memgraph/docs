"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[16959],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=u(n),d=r,c=k["".concat(o,".").concat(d)]||k[d]||m[d]||l;return n?a.createElement(c,i(i({ref:t},s),{},{components:n})):a.createElement(c,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},893:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return m}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],p={sidebar_label:"declarative_base",title:"gqlalchemy.query_builders.declarative_base"},o=void 0,u={unversionedId:"reference/query_builders/declarative_base",id:"reference/query_builders/declarative_base",title:"gqlalchemy.query_builders.declarative_base",description:"WhereConditionPartialQuery Objects",source:"@site/gqlalchemy/reference/query_builders/declarative_base.md",sourceDirName:"reference/query_builders",slug:"/reference/query_builders/declarative_base",permalink:"/docs/gqlalchemy/reference/query_builders/declarative_base",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/query_builders/declarative_base.md",tags:[],version:"current",frontMatter:{sidebar_label:"declarative_base",title:"gqlalchemy.query_builders.declarative_base"},sidebar:"gqlalchemy",previous:{title:"query_modules",permalink:"/docs/gqlalchemy/reference/graph_algorithms/query_modules"},next:{title:"memgraph_query_builder",permalink:"/docs/gqlalchemy/reference/query_builders/memgraph_query_builder"}},s={},m=[{value:"WhereConditionPartialQuery Objects",id:"whereconditionpartialquery-objects",level:2},{value:"construct_query",id:"construct_query",level:4},{value:"NodePartialQuery Objects",id:"nodepartialquery-objects",level:2},{value:"construct_query",id:"construct_query-1",level:4},{value:"RelationshipPartialQuery Objects",id:"relationshippartialquery-objects",level:2},{value:"construct_query",id:"construct_query-2",level:4},{value:"UnwindPartialQuery Objects",id:"unwindpartialquery-objects",level:2},{value:"construct_query",id:"construct_query-3",level:4},{value:"dict_to_alias_statement",id:"dict_to_alias_statement",level:4},{value:"_ResultPartialQuery Objects",id:"_resultpartialquery-objects",level:2},{value:"construct_query",id:"construct_query-4",level:4},{value:"UnionPartialQuery Objects",id:"unionpartialquery-objects",level:2},{value:"construct_query",id:"construct_query-5",level:4},{value:"DeletePartialQuery Objects",id:"deletepartialquery-objects",level:2},{value:"construct_query",id:"construct_query-6",level:4},{value:"RemovePartialQuery Objects",id:"removepartialquery-objects",level:2},{value:"construct_query",id:"construct_query-7",level:4},{value:"OrderByPartialQuery Objects",id:"orderbypartialquery-objects",level:2},{value:"construct_query",id:"construct_query-8",level:4},{value:"LimitPartialQuery Objects",id:"limitpartialquery-objects",level:2},{value:"construct_query",id:"construct_query-9",level:4},{value:"SkipPartialQuery Objects",id:"skippartialquery-objects",level:2},{value:"construct_query",id:"construct_query-10",level:4},{value:"ForeachPartialQuery Objects",id:"foreachpartialquery-objects",level:2},{value:"construct_query",id:"construct_query-11",level:4},{value:"SetPartialQuery Objects",id:"setpartialquery-objects",level:2},{value:"construct_query",id:"construct_query-12",level:4},{value:"DeclarativeBase Objects",id:"declarativebase-objects",level:2},{value:"match",id:"match",level:4},{value:"merge",id:"merge",level:4},{value:"create",id:"create",level:4},{value:"call",id:"call",level:4},{value:"node",id:"node",level:4},{value:"to",id:"to",level:4},{value:"from_",id:"from_",level:4},{value:"where",id:"where",level:4},{value:"where_not",id:"where_not",level:4},{value:"and_where",id:"and_where",level:4},{value:"and_not_where",id:"and_not_where",level:4},{value:"or_where",id:"or_where",level:4},{value:"or_not_where",id:"or_not_where",level:4},{value:"xor_where",id:"xor_where",level:4},{value:"xor_not_where",id:"xor_not_where",level:4},{value:"unwind",id:"unwind",level:4},{value:"with_",id:"with_",level:4},{value:"union",id:"union",level:4},{value:"delete",id:"delete",level:4},{value:"remove",id:"remove",level:4},{value:"yield_",id:"yield_",level:4},{value:"return_",id:"return_",level:4},{value:"order_by",id:"order_by",level:4},{value:"limit",id:"limit",level:4},{value:"skip",id:"skip",level:4},{value:"add_custom_cypher",id:"add_custom_cypher",level:4},{value:"get_single",id:"get_single",level:4},{value:"foreach",id:"foreach",level:4},{value:"set_",id:"set_",level:4},{value:"execute",id:"execute",level:4}],k={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"whereconditionpartialquery-objects"},"WhereConditionPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class WhereConditionPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Constructs a where partial query."),(0,l.kt)("h2",{id:"nodepartialquery-objects"},"NodePartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class NodePartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-1"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Constructs a node partial query."),(0,l.kt)("h2",{id:"relationshippartialquery-objects"},"RelationshipPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class RelationshipPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-2"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Constructs a relationship partial query."),(0,l.kt)("h2",{id:"unwindpartialquery-objects"},"UnwindPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class UnwindPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-3"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Constructs an unwind partial query."),(0,l.kt)("h4",{id:"dict_to_alias_statement"},"dict","_","to","_","alias","_","statement"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def dict_to_alias_statement(alias_dict: Dict[str, str]) -> str\n")),(0,l.kt)("p",null,"Creates a string expression of alias statements from a dictionary of\nexpression, variable name dictionary."),(0,l.kt)("h2",{id:"_resultpartialquery-objects"},"_","ResultPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class _ResultPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-4"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a RETURN/YIELD/WITH statement Cypher partial query."),(0,l.kt)("h2",{id:"unionpartialquery-objects"},"UnionPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class UnionPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-5"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a UNION statement Cypher partial query."),(0,l.kt)("h2",{id:"deletepartialquery-objects"},"DeletePartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class DeletePartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-6"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a DELETE statement Cypher partial query."),(0,l.kt)("h2",{id:"removepartialquery-objects"},"RemovePartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class RemovePartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-7"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a REMOVE statement Cypher partial query."),(0,l.kt)("h2",{id:"orderbypartialquery-objects"},"OrderByPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class OrderByPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-8"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a ORDER BY statement Cypher partial query."),(0,l.kt)("h2",{id:"limitpartialquery-objects"},"LimitPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class LimitPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-9"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a LIMIT statement Cypher partial query."),(0,l.kt)("h2",{id:"skippartialquery-objects"},"SkipPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class SkipPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-10"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a SKIP statement Cypher partial query."),(0,l.kt)("h2",{id:"foreachpartialquery-objects"},"ForeachPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ForeachPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-11"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Creates a FOREACH statement Cypher partial query."),(0,l.kt)("h2",{id:"setpartialquery-objects"},"SetPartialQuery Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class SetPartialQuery(PartialQuery)\n")),(0,l.kt)("h4",{id:"construct_query-12"},"construct","_","query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def construct_query() -> str\n")),(0,l.kt)("p",null,"Constructs a set partial query."),(0,l.kt)("h2",{id:"declarativebase-objects"},"DeclarativeBase Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class DeclarativeBase(ABC)\n")),(0,l.kt)("h4",{id:"match"},"match"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def match(optional: bool = False) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Obtain data from the database by matching it to a given pattern."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"optional")," - A bool indicating if missing parts of the pattern will be\nfilled with null values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Get all nodes with a certain label:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(labels=&#x27;Country&#x27;, variable=&#x27;c&#x27;).return_(results=&#x27;c&#x27;).execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (c:Country) RETURN c;")),(0,l.kt)("p",{parentName:"li"},"Get a relationship of a certain type that connects two nodes with certain label:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(labels=&#x27;Town&#x27;, variable=&#x27;t&#x27;).to(relationship_type=&#x27;BELONGS_TO&#x27;, variable=&#x27;b&#x27;).node(labels=&#x27;Country&#x27;, variable=&#x27;c&#x27;).return_(results=&#x27;b&#x27;).execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (t:Town)-[b:BELONGS_TO]-&gt;(c:Country) RETURN b;")))),(0,l.kt)("h4",{id:"merge"},"merge"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def merge() -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Ensure that a pattern you are looking for exists in the database.\nThis means that if the pattern is not found, it will be created. In a\nway, this clause is like a combination of MATCH and CREATE."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Merge node with properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"merge().node(variable=&#x27;city&#x27;).where(item=&#x27;city.name&#x27;, operator=Operator.EQUAL, literal=&#x27;London&#x27;).return_(results=&#x27;city&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MERGE (city) WHERE city.name = &#x27;London&#x27; RETURN city;"))),(0,l.kt)("h4",{id:"create"},"create"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def create() -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Create nodes and relationships in a graph."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Create a single node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"create().node(labels=&#x27;Person&#x27;, variable=&#x27;p&#x27;).return_(results=&#x27;p&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"CREATE (p:Person) RETURN p;"))),(0,l.kt)("h4",{id:"call"},"call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def call(procedure: str, arguments: Optional[Union[str, Tuple[Union[str, int, float]]]] = None) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Call a query module procedure."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"procedure")," - A string representing the name of the procedure in the\nformat ",(0,l.kt)("inlineCode",{parentName:"li"},"query_module.procedure"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arguments")," - A string representing the arguments of the procedure in\ntext format.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Call procedure with no arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"call(&#x27;pagerank.get&#x27;).yield_().return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"CALL pagerank.get() YIELD * RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Call procedure with arguments:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - `call(","'","json",(0,l.kt)("em",{parentName:"p"},"util.load_from_url","'",", ","'",(0,l.kt)("a",{parentName:"em",href:"https://some-url.com').yield"},"https://some-url.com","'",").yield")),"(","'","objects","'",").return_(results=","'","objects","'",").execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"CALL json_util.load_from_url(https://some-url.com) YIELD objects RETURN objects;")))),(0,l.kt)("h4",{id:"node"},"node"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def node(labels: Union[str, List[str], None] = "", variable: Optional[str] = None, node: Optional["Node"] = None, **kwargs, ,) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Add a node pattern to the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"labels")," - A string or list of strings representing the labels of the\nnode."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the name of the variable for storing\nresults of the node pattern."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"Node")," object to construct the pattern from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Arguments representing the properties of the node.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Create a node and return it:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"create().node(labels=&#x27;Person&#x27;, variable=&#x27;n&#x27;, first_name=&#x27;Kate&#x27;).return_(results=&#x27;n&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"CREATE (n:Person {first_name: &#x27;Kate&#x27;}) RETURN n;"))),(0,l.kt)("h4",{id:"to"},"to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def to(relationship_type: Optional[str] = "", directed: Optional[bool] = True, variable: Optional[str] = None, relationship: Optional["Relationship"] = None, algorithm: Optional[IntegratedAlgorithm] = None, **kwargs, ,) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Add a relationship pattern to the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationship_type")," - A string representing the type of the relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"directed")," - A bool indicating if the relationship is directed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the name of the variable for storing\nresults of the relationship pattern."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationship")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"Relationship")," object to construct the pattern from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"algorithm")," - algorithm object to use over graph data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Arguments representing the properties of the relationship.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Match and return a relationship:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(labels=&#x27;Town&#x27;, variable=&#x27;t&#x27;).to(relationship_type=&#x27;BELONGS_TO&#x27;, variable=&#x27;b&#x27;).node(labels=&#x27;Country&#x27;, variable=&#x27;c&#x27;).return_(results=&#x27;b&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (t:Town)-[b:BELONGS_TO]-&gt;(c:Country) RETURN b;"))),(0,l.kt)("h4",{id:"from_"},"from","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def from_(relationship_type: Optional[str] = "", directed: Optional[bool] = True, variable: Optional[str] = None, relationship: Optional["Relationship"] = None, algorithm: Optional[IntegratedAlgorithm] = None, **kwargs, ,) -> "Match"\n')),(0,l.kt)("p",null,"Add a relationship pattern to the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationship_type")," - A string representing the type of the relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"directed")," - A bool indicating if the relationship is directed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the name of the variable for storing\nresults of the relationship pattern."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationship")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"Relationship")," object to construct the pattern from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Arguments representing the properties of the relationship.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Match and return a relationship:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(labels=&#x27;Country&#x27;, variable=&#x27;c&#x27;).from_(relationship_type=&#x27;BELONGS_TO&#x27;, variable=&#x27;b&#x27;).node(labels=&#x27;Town&#x27;, variable=&#x27;t&#x27;).return_(results=&#x27;b&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (c:Country)&lt;-[b:BELONGS_TO]-(t:Town) RETURN b;"))),(0,l.kt)("h4",{id:"where"},"where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates a WHERE statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyLiteralAndExpressionMissingInWhere")," - Raises an error when neither literal nor expression keyword arguments were provided."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyExtraKeywordArgumentsInWhere")," - Raises an error when both literal and expression keyword arguments were provided.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by the equality of ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," properties of two connected nodes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;n&#x27;).to().node(variable=&#x27;m&#x27;).where(item=&#x27;n.name&#x27;, operator=Operator.EQUAL, expression=&#x27;m.name&#x27;).return_()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n)-[]-&gt;(m) WHERE n.name = m.name RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Filtering query results by the node label.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).return_()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n:User RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Filtering query results by the comparison of node property and literal.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n.age &gt; 18 RETURN *;")))),(0,l.kt)("h4",{id:"where_not"},"where","_","not"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def where_not(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates a WHERE NOT statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyLiteralAndExpressionMissingInWhere")," - Raises an error when neither literal nor expression keyword arguments were provided."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyExtraKeywordArgumentsInWhere")," - Raises an error when both literal and expression keyword arguments were provided.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by the equality of ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," properties of two connected nodes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).to().node(variable=&#x27;m&#x27;).where_not(item=&#x27;n.name&#x27;, operator=&#x27;=&#x27;, expression=&#x27;m.name&#x27;).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n)-[]-&gt;(m) WHERE NOT n.name = m.name RETURN *;"))),(0,l.kt)("h4",{id:"and_where"},"and","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def and_where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an AND statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).and_where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User AND n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"and_not_where"},"and","_","not","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def and_not_where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an AND NOT statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).and_not_where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User AND NOT n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"or_where"},"or","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def or_where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an OR statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).or_where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User OR n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"or_not_where"},"or","_","not","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def or_not_where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an OR NOT statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).or_not_where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User OR NOT n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"xor_where"},"xor","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def xor_where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an XOR statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).xor_where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User XOR n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"xor_not_where"},"xor","_","not","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def xor_not_where(item: str, operator: Operator, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an XOR NOT statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;User&#x27;).xor_not_where(item=&#x27;n.age&#x27;, operator=Operator.GREATER_THAN, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User XOR NOT n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"unwind"},"unwind"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def unwind(list_expression: str, variable: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Unwind a list of values as individual rows."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list_expression")," - A list of strings representing the list of values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the variable name for unwinding results.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"unwind(list_expression=&quot;[1, 2, 3, null]&quot;, variable=&quot;x&quot;).return_(results=[&quot;x&quot;, (&quot;&#x27;val&#x27;&quot;, &quot;y&quot;)]).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"UNWIND [1, 2, 3, null] AS x RETURN x, &#x27;val&#x27; AS y;"))),(0,l.kt)("h4",{id:"with_"},"with","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def with_(results: Optional[Union[str, Tuple[str, str], Iterable[Union[str, Tuple[str, str]]]]] = None) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Chain together parts of a query, piping the results from one to be\nused as starting points or criteria in the next."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," - A dictionary mapping variables in the first query with\naliases in the second query.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyResultQueryTypeError")," - Raises an error when the provided argument is of wrong type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyTooLargeTupleInResultQuery")," - Raises an error when the given tuple has length larger than 2.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Pipe the result from first part of the query for the futher use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).with(&#x27;n&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - `MATCH (n) WITH n;")),(0,l.kt)("h4",{id:"union"},"union"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def union(include_duplicates: Optional[bool] = True) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Combine the result of multiple queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"include_duplicates")," - A bool indicating if duplicates should be\nincluded.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Combine querties and retain duplicates:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&quot;c&quot;, labels=&quot;Country&quot;).return_(results=(&quot;c.name&quot;, &quot;columnName&quot;)).union().match().node(variable=&quot;p&quot;, labels=&quot;Person&quot;).return_(results=(&quot;p.name&quot;, &quot;columnName&quot;)).execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (c:Country) RETURN c.name AS columnName UNION ALL MATCH (p:Person) RETURN p.name AS columnName;")),(0,l.kt)("p",{parentName:"li"},"Combine queries and remove duplicates:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&quot;c&quot;, labels=&quot;Country&quot;).return_(results=(&quot;c.name&quot;, &quot;columnName&quot;)).union(include_duplicates=False).match().node(variable=&quot;p&quot;, labels=&quot;Person&quot;).return_(results=(&quot;p.name&quot;, &quot;columnName&quot;)).execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (c:Country) RETURN c.name AS columnName UNION MATCH (p:Person) RETURN p.name AS columnName;")))),(0,l.kt)("h4",{id:"delete"},"delete"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def delete(variable_expressions: Union[str, List[str]], detach: Optional[bool] = False) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Delete nodes and relationships from the database."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable_expressions")," - A string or list of strings indicating which node(s)\nand/or relationship(s) should be removed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"detach")," - A bool indicating if relationships should be deleted along\nwith a node.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Delete a node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(labels=&#x27;Node1&#x27;, variable=&#x27;n1&#x27;).delete(variable_expressions=&#x27;n1&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n1:Node1) DELETE n1;"))),(0,l.kt)("h4",{id:"remove"},"remove"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def remove(items: Union[str, List[str]]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Remove labels and properties from nodes and relationships."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"items")," - A string or list of strings indicating which label(s) and/or properties\nshould be removed.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Remove a property from a node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(labels=&#x27;Country&#x27;, variable=&#x27;n&#x27;, name=&#x27;United Kingdom&#x27;).remove(items=&#x27;n.name&#x27;).return_(results=&#x27;n&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n:Country {name: &#x27;United Kingdom&#x27;}) REMOVE n.name RETURN n;"))),(0,l.kt)("h4",{id:"yield_"},"yield","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def yield_(results: Optional[Union[str, Tuple[str, str], Iterable[Union[str, Tuple[str, str]]]]] = None) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Yield data from the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," - A dictionary mapping items that are returned with alias names.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyResultQueryTypeError")," - Raises an error when the provided argument is of wrong type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyTooLargeTupleInResultQuery")," - Raises an error when the given tuple has length larger than 2.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Yield all data from a query:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"call(procedure=&#x27;pagerank.get&#x27;).yield_().return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"CALL pagerank.get() YIELD * RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Yield some data from a query:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},".call(procedure=&#x27;pagerank.get&#x27;).yield_(results=[&#x27;node&#x27;, &#x27;rank&#x27;]).return_(results=[&#x27;node&#x27;,&#x27;rank&#x27;]).execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"CALL pagerank.get() YIELD node, rank RETURN node, rank;")))),(0,l.kt)("h4",{id:"return_"},"return","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def return_(results: Optional[Union[str, Tuple[str, str], Iterable[Union[str, Tuple[str, str]]]]] = None) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Return data from the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," - An optional string, tuple or iterable of strings and tuples for alias names.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyResultQueryTypeError")," - Raises an error when the provided argument is of wrong type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyTooLargeTupleInResultQuery")," - Raises an error when the given tuple has length larger than 2.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Return all variables from a query:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(labels=&#x27;Person&#x27;, variable=&#x27;p&#x27;).return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (p:Person) RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Return specific variables from a query:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(labels=&#x27;Person&#x27;, variable=&#x27;p1&#x27;).to().node(labels=&#x27;Person&#x27;, variable=&#x27;p2&#x27;).return_(results=[(&#x27;p1&#x27;,&#x27;first&#x27;), &#x27;p2&#x27;]).execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (p1:Person)-[]-&gt;(p2:Person) RETURN p1 AS first, p2;")))),(0,l.kt)("h4",{id:"order_by"},"order","_","by"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def order_by(properties: Union[str, Tuple[str, Order], List[Union[str, Tuple[str, Order]]]]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an ORDER BY statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"properties")," - Properties and order (DESC/DESCENDING/ASC/ASCENDING) by which the query results will be ordered.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyOrderByTypeError")," - Raises an error when the given ordering is of the wrong type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyMissingOrder")," - Raises an error when the given property is neither string nor tuple.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Ordering query results by the property ",(0,l.kt)("inlineCode",{parentName:"p"},"n.name")," in ascending order\nand by the property ",(0,l.kt)("inlineCode",{parentName:"p"},"n.last_name")," in descending order:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).return_().order_by(properties=[&#x27;n.name&#x27;, (&#x27;n.last_name&#x27;, Order.DESC)]).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) RETURN * ORDER BY n.name, n.last_name DESC;"))),(0,l.kt)("h4",{id:"limit"},"limit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def limit(integer_expression: Union[str, int]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Limit the number of records when returning results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"integer_expression")," - An integer indicating how many records to limit\nthe results to.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Limit the number of returned results:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(labels=&#x27;Person&#x27;, variable=&#x27;p&#x27;).return_().limit(integer_expression=&#x27;10&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (p:Person) RETURN * LIMIT 10;"))),(0,l.kt)("h4",{id:"skip"},"skip"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def skip(integer_expression: Union[str, int]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Skip a number of records when returning results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"integer_expression")," - An integer indicating how many records to skip\nin the results.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  Skip the first result:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&#x27;n&#x27;).return_(results=&#x27;n&#x27;).skip(integer_expression=&#x27;1&#x27;).execute()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) RETURN n SKIP 1;"))),(0,l.kt)("h4",{id:"add_custom_cypher"},"add","_","custom","_","cypher"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def add_custom_cypher(custom_cypher: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Inject custom Cypher code into the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"custom_cypher")," - A string representing the Cypher code to be injected\ninto the query.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"get_single"},"get","_","single"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_single(retrieve: str) -> Any\n")),(0,l.kt)("p",null,"Returns a single result with a ",(0,l.kt)("inlineCode",{parentName:"p"},"retrieve")," variable name."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"retrieve")," - A string representing the results variable to be returned.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  An iterator of dictionaries containing the results of the query."),(0,l.kt)("h4",{id:"foreach"},"foreach"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def foreach(variable: str, expression: str, update_clause: Union[str, List[str], Set[str]]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Iterate over a list of elements and for every iteration run every update clause."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - The variable name that stores each element."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expression")," - Any expression that results in a list."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update_clauses")," - One or more Cypher update clauses:\nSET, REMOVE, CREATE, MERGE, DELETE, FOREACH.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  For each number in a list, create a node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"update_clause = QueryBuilder().create().node(variable=&quot;n&quot;, id=PropertyVariable(&quot;i&quot;))"),(0,l.kt)("inlineCode",{parentName:"li"},"query_builder = QueryBuilder().foreach(&quot;i&quot;, &quot;[1, 2, 3]&quot;, update_clause.construct_query())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"FOREACH ( i IN [1, 2, 3] | CREATE (n {id: i}) )"))),(0,l.kt)("h4",{id:"set_"},"set","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def set_(item: str, operator: Operator, **kwargs)\n")),(0,l.kt)("p",null,"Creates a SET statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - An assignment, increment or label filter operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyLiteralAndExpressionMissingInWhere")," - Raises an error when neither literal nor expression keyword arguments were provided."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyExtraKeywordArgumentsInWhere")," - Raises an error when both literal and expression keyword arguments were provided.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Set or update a property."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n.name&#x27;, operator=Operator.EQUAL, literal=&#x27;Germany&#x27;).set_(item=&#x27;n.population&#x27;, operator=Operator.ASSIGNMENT, literal=83000001).return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n.name = &#x27;Germany&#x27; SET n.population = 83000001 RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Set or update multiple properties.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n.name&#x27;, operator=Operator.EQUAL, literal=&#x27;Germany&#x27;).set_(item=&#x27;n.population&#x27;, operator=Operator.ASSIGNMENT, literal=83000001).set_(item=&#x27;n.capital&#x27;, operator=Operator.ASSIGNMENT, literal=&#x27;Berlin&#x27;).return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n.name = &#x27;Germany&#x27; SET n.population = 83000001 SET n.capital = &#x27;Berlin&#x27; RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Set node label.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;n&#x27;).where(item=&#x27;n.name&#x27;, operator=Operator.EQUAL, literal=&#x27;Germany&#x27;).set_(item=&#x27;n&#x27;, operator=Operator.LABEL_FILTER, expression=&#x27;Land&#x27;).return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n.name = &#x27;Germany&#x27; SET n:Land RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Replace all properties using map.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;c&#x27;, labels=&#x27;Country&#x27;).where(item=&#x27;c.name&#x27;, operator=Operator.EQUAL, literal=&#x27;Germany&#x27;).set_(item=&#x27;c&#x27;, operator=Operator.ASSIGNMENT, literal={&#x27;name&#x27;: &#x27;Germany&#x27;, &#x27;population&#x27;: &#x27;85000000&#x27;}).return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (c:Country) WHERE c.name = &#x27;Germany&#x27; SET c = {name: &#x27;Germany&#x27;, population: &#x27;85000000&#x27;} RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Update all properties using map.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&#x27;c&#x27;, labels=&#x27;Country&#x27;).where(item=&#x27;c.name&#x27;, operator=Operator.EQUAL, literal=&#x27;Germany&#x27;).set_(item=&#x27;c&#x27;, operator=Operator.INCREMENT, literal={&#x27;name&#x27;: &#x27;Germany&#x27;, &#x27;population&#x27;: &#x27;85000000&#x27;}).return_().execute()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (c:Country) WHERE c.name = &#x27;Germany&#x27; SET c += {name: &#x27;Germany&#x27;, population: &#x27;85000000&#x27;} RETURN *;")))),(0,l.kt)("h4",{id:"execute"},"execute"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def execute() -> Iterator[Dict[str, Any]]\n")),(0,l.kt)("p",null,"Executes the Cypher query and returns the results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  An iterator of dictionaries containing the results of the query."))}d.isMDXComponent=!0}}]);