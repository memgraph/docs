"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21773],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),h=a,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||r;return n?l.createElement(d,o(o({ref:t},c),{},{components:n})):l.createElement(d,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var l=n(87462),a=(n(67294),n(3905));const r={id:"installation",title:"How to install GQLAlchemy",sidebar_label:"Installation"},o=void 0,i={unversionedId:"installation",id:"installation",title:"How to install GQLAlchemy",description:"There are two main ways of installing GQLAlchemy: with package managers such",source:"@site/gqlalchemy/installation.md",sourceDirName:".",slug:"/installation",permalink:"/docs/gqlalchemy/installation",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/installation.md",tags:[],version:"current",frontMatter:{id:"installation",title:"How to install GQLAlchemy",sidebar_label:"Installation"},sidebar:"gqlalchemy",previous:{title:"Getting started",permalink:"/docs/gqlalchemy/"},next:{title:"How-to guides overview",permalink:"/docs/gqlalchemy/how-to-guides"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install with pip",id:"pip",level:2},{value:"Build from source",id:"build-from-source",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are two main ways of installing GQLAlchemy: with package managers such\nas pip and Poetry, and by building it from source."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"To install GQLAlchemy, you will need the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Python 3.8 - 3.10")),(0,a.kt)("li",{parentName:"ul"},"GQLAlchemy is built on top of Memgraph's low-level Python client ",(0,a.kt)("inlineCode",{parentName:"li"},"pymgclient"),", so you need to install ",(0,a.kt)("inlineCode",{parentName:"li"},"pymgclient")," ",(0,a.kt)("a",{parentName:"li",href:"https://memgraph.github.io/pymgclient/introduction.html#build-prerequisites"},"build prerequisites"),".")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"GQLAlchemy can't be installed with Python 3.11 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/issues/203"},"(#203)")," and on Windows with Python >= 3.10 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/issues/179"},"(#179)"),". If this is currently a blocker for you, please let us know by commenting on opened issues.")),(0,a.kt)("h2",{id:"pip"},"Install with pip"),(0,a.kt)("p",null,"After you\u2019ve installed the prerequisites, run the following command to install\nGQLAlchemy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install gqlalchemy\n")),(0,a.kt)("p",null,"With the above command, you get the default GQLAlchemy installation which\ndoesn\u2019t include import/export support for certain formats (see below). To get\nadditional import/export capabilities, use one of the following install options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install gqlalchemy[arrow] # Support for the CSV, Parquet, ORC and IPC/Feather/Arrow formats\npip install gqlalchemy[dgl] # DGL support (also includes torch)\n\npip install gqlalchemy[all] # All of the above\n")),(0,a.kt)("h2",{id:"build-from-source"},"Build from source"),(0,a.kt)("p",null,"Clone or download the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy"},"GQLAlchemy source code")," locally and run the following command to build it from source with Poetry:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"poetry install --all-extras\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"poetry install --all-extras")," command installs GQLAlchemy with all extras\n(optional dependencies). Alternatively, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"-E")," option to define\nwhat extras to install:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"poetry install # No extras\n\npoetry install -E arrow # Support for the CSV, Parquet, ORC and IPC/Feather/Arrow formats\npoetry install -E dgl # DGL support (also includes torch)\n\n")),(0,a.kt)("p",null,"To run the tests, make sure you have an ",(0,a.kt)("a",{parentName:"p",href:"/memgraph"},"active Memgraph instance"),", and execute one of the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'poetry run pytest . -k "not slow" # If all extras installed\n\npoetry run pytest . -k "not slow and not extras" # Otherwise\n')),(0,a.kt)("p",null,"If you\u2019ve installed only certain extras, it\u2019s also possible to run their associated tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'poetry run pytest . -k "arrow"\npoetry run pytest . -k "dgl"\n')))}u.isMDXComponent=!0}}]);