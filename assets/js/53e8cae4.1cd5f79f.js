"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[11569],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=u(n),d=a,N=k["".concat(o,".").concat(d)]||k[d]||m[d]||l;return n?r.createElement(N,i(i({ref:t},s),{},{components:n})):r.createElement(N,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},80022:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return m}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],p={sidebar_label:"query_builder",title:"gqlalchemy.query_builder"},o=void 0,u={unversionedId:"reference/query_builder",id:"reference/query_builder",title:"gqlalchemy.query_builder",description:"match",source:"@site/gqlalchemy/reference/query_builder.md",sourceDirName:"reference",slug:"/reference/query_builder",permalink:"/docs/gqlalchemy/reference/query_builder",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/query_builder.md",tags:[],version:"current",frontMatter:{sidebar_label:"query_builder",title:"gqlalchemy.query_builder"},sidebar:"gqlalchemy",previous:{title:"models",permalink:"/docs/gqlalchemy/reference/models"},next:{title:"transformations",permalink:"/docs/gqlalchemy/reference/transformations"}},s={},m=[{value:"match",id:"match",level:4},{value:"merge",id:"merge",level:4},{value:"create",id:"create",level:4},{value:"call",id:"call",level:4},{value:"node",id:"node",level:4},{value:"to",id:"to",level:4},{value:"from_",id:"from_",level:4},{value:"where",id:"where",level:4},{value:"where_not",id:"where_not",level:4},{value:"and_where",id:"and_where",level:4},{value:"and_not_where",id:"and_not_where",level:4},{value:"or_where",id:"or_where",level:4},{value:"or_not_where",id:"or_not_where",level:4},{value:"xor_where",id:"xor_where",level:4},{value:"xor_not_where",id:"xor_not_where",level:4},{value:"unwind",id:"unwind",level:4},{value:"with_",id:"with_",level:4},{value:"union",id:"union",level:4},{value:"delete",id:"delete",level:4},{value:"remove",id:"remove",level:4},{value:"yield_",id:"yield_",level:4},{value:"return_",id:"return_",level:4},{value:"order_by",id:"order_by",level:4},{value:"limit",id:"limit",level:4},{value:"skip",id:"skip",level:4},{value:"add_custom_cypher",id:"add_custom_cypher",level:4},{value:"load_csv",id:"load_csv",level:4},{value:"get_single",id:"get_single",level:4},{value:"execute",id:"execute",level:4}],k={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"match"},"match"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def match(optional: bool = False) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Obtain data from the database by matching it to a given pattern."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"optional")," - A bool indicating if missing parts of the pattern will be\nfilled with null values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"merge"},"merge"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def merge() -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Ensure that a pattern you are looking for exists in the database.\nThis means that if the pattern is not found, it will be created. In a\nway, this clause is like a combination of MATCH and CREATE."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"create"},"create"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def create() -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Create nodes and relationships in a graph."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"call"},"call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def call(procedure: str, arguments: Optional[str] = None) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Call a query module procedure."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"procedure")," - A string representing the name of the procedure in the\nformat ",(0,l.kt)("inlineCode",{parentName:"li"},"query_module.procedure"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arguments")," - A string representing the arguments of the procedure in\ntext format.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"node"},"node"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def node(labels: Union[str, List[str], None] = "", variable: Optional[str] = None, node: Optional["Node"] = None, **kwargs, ,) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Add a node pattern to the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"labels")," - A string or list of strings representing the labels of the\nnode."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the name of the variable for storing\nresults of the node pattern."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"Node")," object to construct the pattern from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Arguments representing the properties of the node.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"to"},"to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def to(edge_label: Optional[str] = "", directed: Optional[bool] = True, variable: Optional[str] = None, relationship: Optional["Relationship"] = None, **kwargs, ,) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Add a relationship pattern to the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"edge_label")," - A string representing the type of the relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"directed")," - A bool indicating if the relationship is directed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the name of the variable for storing\nresults of the relationship pattern."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationship")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"Relationship")," object to construct the pattern from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Arguments representing the properties of the relationship.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"from_"},"from","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def from_(edge_label: Optional[str] = "", directed: Optional[bool] = True, variable: Optional[str] = None, relationship: Optional["Relationship"] = None, **kwargs, ,) -> "Match"\n')),(0,l.kt)("p",null,"Add a relationship pattern to the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"edge_label")," - A string representing the type of the relationship."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"directed")," - A bool indicating if the relationship is directed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the name of the variable for storing\nresults of the relationship pattern."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationship")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"Relationship")," object to construct the pattern from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Arguments representing the properties of the relationship.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"where"},"where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates a WHERE statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyLiteralAndExpressionMissingInWhere")," - Raises an error when neither literal nor expression keyword arguments were provided."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyExtraKeywordArgumentsInWhere")," - Raises an error when both literal and expression keyword arguments were provided.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by the equality of ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," properties of two connected nodes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&quot;n&quot;).to().node(variable=&quot;m&quot;).where(item=&quot;n.name&quot;, operator=&quot;=&quot;, expression=&quot;m.name&quot;).return_()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n)-[]-&gt;(m) WHERE n.name = m.name RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Filtering query results by the node label.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).return_()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n:User RETURN *;")),(0,l.kt)("p",{parentName:"li"},"Filtering query results by the comparison of node property and literal.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"match().node(variable=&quot;n&quot;).where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH (n) WHERE n.age &gt; 18 RETURN *;")))),(0,l.kt)("h4",{id:"where_not"},"where","_","not"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def where_not(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates a WHERE NOT statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyLiteralAndExpressionMissingInWhere")," - Raises an error when neither literal nor expression keyword arguments were provided."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyExtraKeywordArgumentsInWhere")," - Raises an error when both literal and expression keyword arguments were provided.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by the equality of ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," properties of two connected nodes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).to().node(variable=&quot;m&quot;).where_not(item=&quot;n.name&quot;, operator=&quot;=&quot;, expression=&quot;m.name&quot;).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n)-[]-&gt;(m) WHERE NOT n.name = m.name RETURN *;"))),(0,l.kt)("h4",{id:"and_where"},"and","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def and_where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an AND statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).and_where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User AND n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"and_not_where"},"and","_","not","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def and_not_where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an AND NOT statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).and_not_where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User AND NOT n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"or_where"},"or","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def or_where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an OR statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).or_where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User OR n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"or_not_where"},"or","_","not","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def or_not_where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an OR NOT statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).or_not_where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User OR NOT n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"xor_where"},"xor","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def xor_where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an XOR statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).xor_where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User XOR n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"xor_not_where"},"xor","_","not","_","where"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def xor_not_where(item: str, operator: str, **kwargs) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an XOR NOT statement as a part of WHERE Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"item")," - A string representing variable or property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"operator")," - A string representing the operator."),(0,l.kt)("p",{parentName:"li"},"Kwargs:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"literal")," - A value that will be converted to Cypher value, such as int, float, string, etc.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression")," - A node label or property that won","'","t be converted to Cypher value (no additional quotes will be added)."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Filtering query results by node label or the comparison of node property and literal."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).where(item=&quot;n&quot;, operator=&quot;:&quot;, expression=&quot;User&quot;).xor_not_where(item=&quot;n.age&quot;, operator=&quot;&gt;&quot;, literal=18).return_()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) WHERE n:User XOR NOT n.age &gt; 18 RETURN *;"))),(0,l.kt)("h4",{id:"unwind"},"unwind"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def unwind(list_expression: str, variable: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Unwind a list of values as individual rows."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list_expression")," - A list of strings representing the list of values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable")," - A string representing the variable name for unwinding results.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"with_"},"with","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def with_(results: Optional[Dict[str, str]] = {}) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Chain together parts of a query, piping the results from one to be\nused as starting points or criteria in the next."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," - A dictionary mapping variables in the first query with\naliases in the second query.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"union"},"union"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def union(include_duplicates: Optional[bool] = True) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Combine the result of multiple queries."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"include_duplicates")," - A bool indicating if duplicates should be\nincluded.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"delete"},"delete"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def delete(variable_expressions: List[str], detach: Optional[bool] = False) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Delete nodes and relationships from the database."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variable_expressions")," - A list of strings indicating which nodes\nand/or relationships should be removed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"detach")," - A bool indicating if relationships should be deleted along\nwith a node.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"remove"},"remove"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def remove(items: List[str]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Remove labels and properties from nodes and relationships."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"items")," - A list of strings indicating which labels and/or properties\nshould be removed.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"yield_"},"yield","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def yield_(results: Optional[Dict[str, str]] = {}) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Yield data from the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," - A dictionary mapping items that are returned with alias\nnames.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"return_"},"return","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def return_(results: Optional[Dict[str, str]] = {}) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Return data from the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," - A dictionary mapping items that are returned with alias\nnames.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"order_by"},"order","_","by"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def order_by(properties: Union[str, Tuple[str, Order], List[Union[str, Tuple[str, Order]]]]) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Creates an ORDER BY statement Cypher partial query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"properties")," - Properties and order by which the query results will be ordered.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyOrderByTypeError")," - Raises an error when the given ordering is of the wrong type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GQLAlchemyMissingOrdering")," - Raises an error when the given property is neither string nor tuple.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"self")," - A partial Cypher query built from the given parameters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  Ordering query results by the property ",(0,l.kt)("inlineCode",{parentName:"p"},"n.name")," in ascending order\nand by the property ",(0,l.kt)("inlineCode",{parentName:"p"},"n.last_name")," in descending order:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Python")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"match().node(variable=&quot;n&quot;).return_().order_by(properties=[&quot;n.name&quot;, (&quot;n.last_name&quot;, Order.DESC)])")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Cypher")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH (n) RETURN * ORDER BY n.name, n.last_name DESC;"))),(0,l.kt)("h4",{id:"limit"},"limit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def limit(integer_expression: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Limit the number of records when returning results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"integer_expression")," - An integer indicating how many records to limit\nthe results to.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"skip"},"skip"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def skip(integer_expression: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Skip a number of records when returning results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"integer_expression")," - An integer indicating how many records to skip\nin the results.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"add_custom_cypher"},"add","_","custom","_","cypher"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def add_custom_cypher(custom_cypher: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Inject custom Cypher code into the query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"custom_cypher")," - A string representing the Cypher code to be injected\ninto the query.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"load_csv"},"load","_","csv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def load_csv(path: str, header: bool, row: str) -> "DeclarativeBase"\n')),(0,l.kt)("p",null,"Load data from a CSV file by executing a Cypher query for each row."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - A string representing the path to the CSV file."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header")," - A bool indicating if the CSV file starts with a header row."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"row")," - A string representing the name of the variable for iterating\nover each row.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A ",(0,l.kt)("inlineCode",{parentName:"p"},"DeclarativeBase")," instance for constructing queries."),(0,l.kt)("h4",{id:"get_single"},"get","_","single"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_single(retrieve: str) -> Any\n")),(0,l.kt)("p",null,"Returns a single result with a ",(0,l.kt)("inlineCode",{parentName:"p"},"retrieve")," variable name."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"retrieve")," - A string representing the results variable to be returned.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  An iterator of dictionaries containing the results of the query."),(0,l.kt)("h4",{id:"execute"},"execute"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def execute() -> Iterator[Dict[str, Any]]\n")),(0,l.kt)("p",null,"Executes the Cypher query and returns the results."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  An iterator of dictionaries containing the results of the query."))}d.isMDXComponent=!0}}]);