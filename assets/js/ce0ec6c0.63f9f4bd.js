"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3385],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=r,h=u["".concat(p,".").concat(c)]||u[c]||s[c]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},31757:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return d},default:function(){return u}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={id:"create-a-new-module-cpp",title:"How to create a query module in C++",sidebar_label:"Create a C++ query module"},p=void 0,m={unversionedId:"how-to-guides/create-a-new-module-cpp",id:"how-to-guides/create-a-new-module-cpp",title:"How to create a query module in C++",description:"Query modules can be implemented using the [C",source:"@site/mage/how-to-guides/create-a-new-module-cpp.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/create-a-new-module-cpp",permalink:"/docs/mage/how-to-guides/create-a-new-module-cpp",editUrl:"https://github.com/memgraph/docs/tree/master/mage/how-to-guides/create-a-new-module-cpp.md",tags:[],version:"current",frontMatter:{id:"create-a-new-module-cpp",title:"How to create a query module in C++",sidebar_label:"Create a C++ query module"},sidebar:"mage",previous:{title:"Create a Python query module",permalink:"/docs/mage/how-to-guides/create-a-new-module-python"},next:{title:"Run a query module",permalink:"/docs/mage/how-to-guides/run-a-query-module"}},d=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Developing a module",id:"developing-a-module",children:[],level:2},{value:"Importing, querying and testing a module",id:"importing-querying-and-testing-a-module",children:[],level:2}],s={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Query modules can be implemented using the ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/query-modules/api/c-api"},"C\nAPI"),"\nprovided by Memgraph. In this tutorial, we will learn how to develop a query\nmodule in C++ on the example of the ",(0,o.kt)("strong",{parentName:"p"},"random walk algorithm"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you wish to write your own query modules using the C API, you can write the\nprocedures in any programming language which can work with C and can be compiled\nto the ELF shared library format. The latter requirement is there so that they\ncan be loaded together when Memgraph starts."))),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"There are three options for installing and working with Memgraph MAGE:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Pulling the ",(0,o.kt)("inlineCode",{parentName:"strong"},"memgraph/memgraph-mage")," image"),": check the ",(0,o.kt)("inlineCode",{parentName:"li"},"Docker Hub"),(0,o.kt)("a",{parentName:"li",href:"/docs/mage/installation/docker-hub"},"installation guide"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Building a Docker image from the MAGE repository"),": check the ",(0,o.kt)("inlineCode",{parentName:"li"},"Docker\nbuild")," ",(0,o.kt)("a",{parentName:"li",href:"/docs/mage/installation/docker-build"},"installation guide"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Building MAGE from source"),": check the ",(0,o.kt)("inlineCode",{parentName:"li"},"Build from source on Linux"),(0,o.kt)("a",{parentName:"li",href:"/docs/mage/installation/source"},"installation guide"),".")),(0,o.kt)("h2",{id:"developing-a-module"},"Developing a module"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"These instructions are the same for every MAGE installation option: ",(0,o.kt)("em",{parentName:"p"},"Docker\nHub"),", ",(0,o.kt)("em",{parentName:"p"},"Docker build"),", and ",(0,o.kt)("em",{parentName:"p"},"Build from source on Linux"),"."))),(0,o.kt)("p",null,"Position yourself in the ",(0,o.kt)("strong",{parentName:"p"},"MAGE repository")," you cloned earlier. Once you are\nthere, enter the ",(0,o.kt)("inlineCode",{parentName:"p"},"cpp")," sub-directory and create a new directory called\n",(0,o.kt)("inlineCode",{parentName:"p"},"random_walk_module")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"random_walk_module.cpp")," file inside it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"cpp\n\u2514\u2500\u2500 random_walk_module\n    \u2514\u2500\u2500 random_walk_module.cpp\n")),(0,o.kt)("p",null,"Our module contains a single procedure ",(0,o.kt)("inlineCode",{parentName:"p"},"random_walk")," which implements the\nalgorithm. The procedure takes two input parameters: the starting node and the\nnumber of steps (10 by default), and it returns the generated random path. All\nin all, we can define its signature as ",(0,o.kt)("inlineCode",{parentName:"p"},"get_path(start: Node, steps: int = 10)\n-> random_walk: Path"),"."),(0,o.kt)("p",null,"Let\u2019s take a look at the structure of our query module."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <mg_utils.hpp>\n\nvoid RandomWalk(mgp_list *args, mgp_graph *memgraph_graph,\n                     mgp_result *result, mgp_memory *memory);\n\nextern "C" int mgp_init_module(struct mgp_module *module,\n                               struct mgp_memory *memory);\n\nextern "C" int mgp_shutdown_module() { return 0; }\n\n')),(0,o.kt)("p",null,"In the first line, we include ",(0,o.kt)("inlineCode",{parentName:"p"},"mg_utils.hpp"),". This header contains declarations\nof the public C API provided by Memgraph, which we need to connect the algorithm\nto Memgraph and work with the data stored within."),(0,o.kt)("p",null,"Next, we are going to implement the random walk algorithm\u2019s logic in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"RandomWalk")," function, which will be the callback for the invocations of our\nopenCypher procedure. Callback functions such as this one all need to have the\nsame signature, but they can be arbitrarily named (e.g. in query modules\ncontaining multiple callback functions)."),(0,o.kt)("p",null,"Query modules using the C API must have the ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module")," &\n",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_shutdown_module")," functions. The ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module")," function\u2019s main purpose\nis to register procedures so that they can be called from openCypher, and with\n",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_shutdown_module")," you may reset any global states or release global\nresources."),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"WARNING: Exceptions, if thrown, must never leave the scope of your module! You\nshould have a top-level exception handler that returns an error value and\npotentially logs the error message as well. Exceptions crossing the module\nboundary may cause all sorts of unexpected issues."))),(0,o.kt)("p",null,"That said, let\u2019s now take a closer look at ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomWalk")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\nvoid RandomWalk(mgp_list *args, mgp_graph *memgraph_graph, mgp_result *result,\n                mgp_memory *memory) {\n  try {\n    const auto start_id = mgp::value_get_int(mgp::list_at(args, 0));\n    const auto n_steps = mgp::value_get_int(mgp::list_at(args, 1));\n\n    const auto graph = mg_utility::GetGraphView(\n        memgraph_graph, result, memory, mg_graph::GraphType::kUndirectedGraph);\n    srand(time(NULL));\n\n    int step = 0;\n    auto current_node = graph->GetNode(start_id);\n    InsertStepRecord(memgraph_graph, result, memory, step++, current_node.id);\n\n    while (step <= n_steps) {\n      const auto neighbors = graph->Neighbours(current_node.id);\n      const auto next = neighbors[rand() % neighbors.size()];\n      current_node = graph->GetNode(next.node_id);\n      InsertStepRecord(memgraph_graph, result, memory, step++, current_node.id);\n    }\n\n  } catch (const std::exception &e) {\n    mgp::result_set_error_msg(result, e.what());\n    return;\n  }\n}\n")),(0,o.kt)("p",null,"Upon being called, ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomWalk")," receives the list of arguments (",(0,o.kt)("inlineCode",{parentName:"p"},"args"),") passed\nin the query. The parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"result")," is used for recording the results of the\nprocedure, and its context is provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"graph")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"memory"),"."),(0,o.kt)("p",null,"With the C API, we next retrieve the argument values from ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," and access the\ngraph in order to be able to implement the algorithm. As for the output, you\nmight\u2019ve noted that ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomWalk")," function does not return anything by itself.\nInstead, remember that the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"result")," serves to record the output. We\nplaced the logic for that task within the ",(0,o.kt)("inlineCode",{parentName:"p"},"InsertStepRecord")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  auto *record = mgp::result_new_record(result);\n\n  mg_utility::InsertIntValueResult(record, kFieldStep, step, memory);\n  mg_utility::InsertNodeValueResult(graph, record, kFieldNode, node_id, memory);\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Analogous methods for other supported data types are outlined in the C API\nreference."))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module")," function has as its main duty the registration of\nprocedure(s) which can then be invoked in openCypher. With the C API, we add our\nprocedure and its inputs and outputs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'extern "C" int mgp_init_module(struct mgp_module *module,\n                               struct mgp_memory *memory) {\n  {\n    try {\n      auto *proc = mgp::module_add_read_procedure(module, "random_walk",\n                                                  RandomWalk);\n\n      // optional parameters require a default value\n      auto default_steps = mgp::value_make_int(10, memory);\n\n      mgp::proc_add_arg(proc, kStart, mgp::type_node());\n      mgp::proc_add_opt_arg(proc, kSteps, mgp::type_int(), default_steps);\n\n      mgp::proc_add_result(proc, kFieldRandomWalk, mgp::type_path());\n\n      mgp_value_destroy(default_steps);\n    } catch (const std::exception &e) {\n      return 1;\n    }\n  }\n  return 0;\n}\n')),(0,o.kt)("p",null,"Although this example registers a single ",(0,o.kt)("inlineCode",{parentName:"p"},"procedure"),", you can have multiple\ndifferent procedures in a single module, each of which can be invoked using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"CALL <module>.<procedure> ...")," syntax (",(0,o.kt)("inlineCode",{parentName:"p"},"<module>")," being the name of the shared\nlibrary). As we compile our example to ",(0,o.kt)("inlineCode",{parentName:"p"},"random_walk.so"),", the module name is thus\n",(0,o.kt)("inlineCode",{parentName:"p"},"random_walk"),"."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Note that, as the procedure name is defined upon registration, it can differ\nfrom its corresponding callback."))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For more information on the signature specification API, consult the\ndocumentation of the functions prefixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"proc_")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp.hpp")," file."))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As the ",(0,o.kt)("inlineCode",{parentName:"p"},"memory")," argument is only alive throughout the execution of\n",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module"),", do not allocate any global resources with it. If you still do\nneed to set up a global state, you may do so in the ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module")," using the\nstandard global allocators."))),(0,o.kt)("p",null,"Finally, you may want to reset any global state or release global resources,\nwhich is done in the following function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'extern "C" int mgp_shutdown_module() {\n   return 0;\n}\n')),(0,o.kt)("p",null,"As mentioned before, no exceptions should leave your module. As done in this\nexample, exception handlers are in ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_init_module")," and the callback function.\nDepending on your module\u2019s needs, you might want one in ",(0,o.kt)("inlineCode",{parentName:"p"},"mgp_shutdown_module")," as\nwell."),(0,o.kt)("h2",{id:"importing-querying-and-testing-a-module"},"Importing, querying and testing a module"),(0,o.kt)("p",null,"Now in order to import, query and test a module, check out the ",(0,o.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-query-module"},"following\npage"),"."),(0,o.kt)("p",null,"Feel free to create an issue or open a pull request on our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage"},"Github\nrepo")," to speed up the development.",(0,o.kt)("br",null),"\nAlso, don't forget to throw us a star on GitHub. \u2b50"))}u.isMDXComponent=!0}}]);