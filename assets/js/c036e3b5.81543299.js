"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41629],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),h=a,m=d["".concat(p,".").concat(h)]||d[h]||s[h]||i;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},75202:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),l=["components"],o={id:"create",title:"CREATE clause",sidebar_label:"CREATE"},p=void 0,c={unversionedId:"clauses/create",id:"clauses/create",isDocsHomePage:!1,title:"CREATE clause",description:"The CREATE clause is used to create nodes and relationships in a graph.",source:"@site/cypher-manual/clauses/create.md",sourceDirName:"clauses",slug:"/clauses/create",permalink:"/cypher-manual/clauses/create",editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/create.md",tags:[],version:"current",frontMatter:{id:"create",title:"CREATE clause",sidebar_label:"CREATE"},sidebar:"cypher_manual",previous:{title:"Clauses overview",permalink:"/cypher-manual/clauses"},next:{title:"DELETE",permalink:"/cypher-manual/clauses/delete"}},u=[{value:"1. Creating nodes",id:"1-creating-nodes",children:[{value:"1.1 Creating a single node",id:"11-creating-a-single-node",children:[]},{value:"1.2 Creating a node with properties",id:"12-creating-a-node-with-properties",children:[]},{value:"1.3 Creating multiple nodes",id:"13-creating-multiple-nodes",children:[]}]},{value:"2. Creating relationships",id:"2-creating-relationships",children:[{value:"2.1 Creating a relationship between two nodes",id:"21-creating-a-relationship-between-two-nodes",children:[]},{value:"2.2 Creating a relationship with properties",id:"22-creating-a-relationship-with-properties",children:[]}]},{value:"3. Creating a path",id:"3-creating-a-path",children:[]}],s={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE")," clause is used to create nodes and relationships in a graph."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#1-creating-nodes"},"Creating nodes"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#11-creating-a-single-node"},"Creating a single node")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#12-creating-a-node-with-properties"},"Creating a node with properties")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#13-creating-multiple-nodes"},"Creating multiple nodes")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#2-creating-relationships"},"Creating relationships"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#21-creating-a-relationship-between-two-nodes"},"Creating a relationship between two nodes")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#22-creating-a-relationship-with-properties"},"Creating a relationship with properties")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#3-creating-a-path"},"Creating a path"))),(0,i.kt)("h2",{id:"1-creating-nodes"},"1. Creating nodes"),(0,i.kt)("h3",{id:"11-creating-a-single-node"},"1.1 Creating a single node"),(0,i.kt)("p",null,"Use the following query to create a single node.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"RETURN")," clause is used to return results. A newly created node can be returned in the same query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n)\nRETURN n;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+----+\n| n  |\n+----+\n| () |\n+----+\n")),(0,i.kt)("p",null,"You can also specify a label while creating a node."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country)\nRETURN n;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+------------+\n| n          |\n+------------+\n| (:Country) |\n+------------+\n")),(0,i.kt)("p",null,"If you wish to add multiple labels to a node, use the following syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country:City)\nRETURN n;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-----------------+\n| n               |\n+-----------------+\n| (:Country:City) |\n+-----------------+\n")),(0,i.kt)("h3",{id:"12-creating-a-node-with-properties"},"1.2 Creating a node with properties"),(0,i.kt)("p",null,"A node can be created with initial properties."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country { name: 'San Marino', continent: 'Europe' })\nRETURN n;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'+------------------------------------------------------+\n| n                                                    |\n+------------------------------------------------------+\n| (:Country {continent: "Europe", name: "San Marino"}) |\n+------------------------------------------------------+\n')),(0,i.kt)("h3",{id:"13-creating-multiple-nodes"},"1.3 Creating multiple nodes"),(0,i.kt)("p",null,"To create multiple nodes, separate them with a comma."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country), (m:City)\nRETURN n,m;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+------------+------------+\n| n          | m          |\n+------------+------------+\n| (:Country) | (:City)    |\n+------------+------------+\n")),(0,i.kt)("h2",{id:"2-creating-relationships"},"2. Creating relationships"),(0,i.kt)("h3",{id:"21-creating-a-relationship-between-two-nodes"},"2.1 Creating a relationship between two nodes"),(0,i.kt)("p",null,"To create a relationship between two nodes, we need to specify which nodes\neither by creating them or filtering them with the ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE")," clause."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (c1:Country { name: 'Belgium' }), (c2:Country { name: 'Netherlands' })\nCREATE (c1)-[r:BORDERS_WITH]->(c2)\nRETURN r;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+----------------+\n| r              |\n+----------------+\n| [BORDERS_WITH] |\n+----------------+\n")),(0,i.kt)("p",null,"If the nodes already exist, the query would look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country),(c2:Country)\nWHERE c1.name = 'Belgium' AND c2.name = 'Netherlands'\nCREATE (c1)-[r:NEIGHBOURS]->(c2)\nRETURN r;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+--------------+\n| r            |\n+--------------+\n| [NEIGHBOURS] |\n+--------------+\n")),(0,i.kt)("h3",{id:"22-creating-a-relationship-with-properties"},"2.2 Creating a relationship with properties"),(0,i.kt)("p",null,"You can add properties to a relationship at the time of creation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country),(c2:Country)\nWHERE c1.name = 'Belgium' AND c2.name = 'Netherlands'\nCREATE (c1)-[r:BORDERS_WITH { length: '30KM' }]->(c2)\nRETURN r;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'+---------------------------------+\n| r                               |\n+---------------------------------+\n| [BORDERS_WITH {length: "30KM"}] |\n+---------------------------------+\n')),(0,i.kt)("h2",{id:"3-creating-a-path"},"3. Creating a path"),(0,i.kt)("p",null,"When creating a path, all of the parts of the pattern that don't exist will be created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE p=((n:Country { name: 'Belgium' })-[r:BORDERS_WITH { length: '30KM' }]->(m:Country { name: 'Netherlands' }))\nRETURN p;\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'+------------------------------------------------------------------------------------------------+\n| p                                                                                              |\n+------------------------------------------------------------------------------------------------+\n| (:Country {name: "Belgium"})-[BORDERS_WITH {length: "30KM"}]->(:Country {name: "Netherlands"}) |\n+------------------------------------------------------------------------------------------------+\n')))}d.isMDXComponent=!0}}]);