(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{331:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return i}));var o=n(3),r=n(8),l=(n(0),n(357)),a={id:"collapse",title:"The collapse module",sidebar_label:"collapse"},s={unversionedId:"query-modules/python/collapse",id:"query-modules/python/collapse",isDocsHomePage:!1,title:"The collapse module",description:"collapse(context, vertices, collapseedgetypes, collapsepseudonode_labels)",source:"@site/mage/query-modules/python/collapse.md",slug:"/query-modules/python/collapse",permalink:"/mage/query-modules/python/collapse",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/collapse.md",version:"current",sidebar_label:"collapse",sidebar:"mage",previous:{title:"How to call MAGE procedures?",permalink:"/mage/usage/calling-procedures"},next:{title:"The distance_calculator module",permalink:"/mage/query-modules/python/distance-calculator"}},c=[{value:"<code>collapse(context, vertices, collapse_edge_types, collapse_pseudo_node_labels)</code>",id:"collapsecontext-vertices-collapse_edge_types-collapse_pseudo_node_labels",children:[]},{value:"<code>groups(context, vertices, collapse_edge_types, collapse_pseudo_node_labels)</code>",id:"groupscontext-vertices-collapse_edge_types-collapse_pseudo_node_labels",children:[]}],p={toc:c};function i(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"collapsecontext-vertices-collapse_edge_types-collapse_pseudo_node_labels"},Object(l.b)("inlineCode",{parentName:"h2"},"collapse(context, vertices, collapse_edge_types, collapse_pseudo_node_labels)")),Object(l.b)("p",null,"Returns collapsed graph. Returned collapsed graph is a list of records:\n(from_node, path, to_node)."),Object(l.b)("p",null,"Algorithm collapses all related vertices into a one of the top vertices. List of\ntop vertices is given by ",Object(l.b)("inlineCode",{parentName:"p"},"vertices")," parameter If edge has one of the types\ndefined in ",Object(l.b)("inlineCode",{parentName:"p"},"collapse_edge_types")," parameter, edge to_vertex will be collapsed in\nthe same top vertex as edge from_vertex."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"collapse_pseudo_node_labels")," is optional parameter. This parameter must be used\nif top vertices are connected with pseudo vertex (vertices with exactly one\ninput edge and exactly one output edge)."),Object(l.b)("p",null,"Path can contain one edge or two edges. Path contains two edges in a pseudo\nvertex case."),Object(l.b)("p",null,"Procedure will raise error if any of pseudo vertices defined by\n",Object(l.b)("inlineCode",{parentName:"p"},"collapse_pseudo_node_labels")," parameter will have more or less than one input\nand one output edges."),Object(l.b)("p",null,"Procedure will raise an error if collapsed groups aren't disjunctive sets."),Object(l.b)("p",null,"Example call:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n:Plant) WITH COLLECT(n) AS nodes\nCALL collapse.collapse(nodes, ["OWN"], ["Transport"])\nYIELD from_vertex, path, to_vertex\nRETURN from_vertex, nodes(path), to_vertex;\n')),Object(l.b)("h2",{id:"groupscontext-vertices-collapse_edge_types-collapse_pseudo_node_labels"},Object(l.b)("inlineCode",{parentName:"h2"},"groups(context, vertices, collapse_edge_types, collapse_pseudo_node_labels)")),Object(l.b)("p",null,"Returns top vertices with corresponding collapsed vertices. Returned list of\nrecords are: (top_vertex, collapsed_vertices)."),Object(l.b)("p",null,"Algorithm collapses all related vertices into a one of the top vertices. List of\ntop vertices is given by ",Object(l.b)("inlineCode",{parentName:"p"},"vertices")," parameter. If edge has one of the types\ndefined in ",Object(l.b)("inlineCode",{parentName:"p"},"collapse_edge_types")," parameter, edge to_vertex will be collapsed in\nthe same top vertex as edge from_vertex."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"collapse_pseudo_node_labels")," is optional parameter. This parameter must be used\nif top vertices are connected with pseudo vertex (vertices with exactly one\ninput edge and exactly one output edge)."),Object(l.b)("p",null,"Path can contain one edge or two edges. Path contains two edges in a pseudo\nvertex case."),Object(l.b)("p",null,"Procedure will raise error if any of pseudo vertices defined by\n",Object(l.b)("inlineCode",{parentName:"p"},"collapse_pseudo_node_labels")," parameter will have more or less than one input\nand one output edges."),Object(l.b)("p",null,"Procedure will raise an error if collapsed groups aren't disjunctive sets."),Object(l.b)("p",null,"Example call:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n:Plant) WITH COLLECT(n) AS nodes\nCALL collapse.groups(nodes, ["OWN"], ["Transport"])\nYIELD *\nRETURN top_vertex, collapsed_vertices;\n')))}i.isMDXComponent=!0},357:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),i=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=i(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=i(n),b=o,m=d["".concat(a,".").concat(b)]||d[b]||u[b]||l;return n?r.a.createElement(m,s(s({ref:t},p),{},{components:n})):r.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<l;p++)a[p]=n[p];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);