"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9045],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),h=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=h(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=h(r),g=n,c=d["".concat(s,".").concat(g)]||d[g]||m[g]||o;return r?a.createElement(c,p(p({ref:t},l),{},{components:r})):a.createElement(c,p({ref:t},l))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,p=new Array(o);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,p[1]=i;for(var h=2;h<o;h++)p[h]=r[h];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},16e3:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>h});var a=r(87462),n=(r(67294),r(3905));const o={id:"import-python-graphs",title:"How to import Python graphs into Memgraph",sidebar_label:"Import Python graphs into Memgraph",slug:"/how-to-guides/import-python-graphs"},p=void 0,i={unversionedId:"how-to-guides/translators/import-python-graphs",id:"how-to-guides/translators/import-python-graphs",title:"How to import Python graphs into Memgraph",description:"GQLAlchemy holds translators that can import Python graphs (NetworkX, PyG or DGL graphs) into Memgraph. These translators take the Python graph object and translate it to the appropriate Cypher queries. The Cypher queries are then executed to create a graph inside Memgraph.",source:"@site/gqlalchemy/how-to-guides/translators/import-python-graphs.md",sourceDirName:"how-to-guides/translators",slug:"/how-to-guides/import-python-graphs",permalink:"/docs/gqlalchemy/how-to-guides/import-python-graphs",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/translators/import-python-graphs.md",tags:[],version:"current",frontMatter:{id:"import-python-graphs",title:"How to import Python graphs into Memgraph",sidebar_label:"Import Python graphs into Memgraph",slug:"/how-to-guides/import-python-graphs"},sidebar:"gqlalchemy",previous:{title:"Create a graph projection",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/graph-projection"},next:{title:"Export data from Memgraph into Python graphs",permalink:"/docs/gqlalchemy/how-to-guides/export-python-graphs"}},s={},h=[{value:"General prerequisites",id:"general-prerequisites",level:2},{value:"Import NetworkX graph into Memgraph",id:"import-networkx-graph-into-memgraph",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create and run a Python script",id:"create-and-run-a-python-script",level:3},{value:"Explore the graph",id:"explore-the-graph",level:3},{value:"Import PyG graph into Memgraph",id:"import-pyg-graph-into-memgraph",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Create and run a Python script",id:"create-and-run-a-python-script-1",level:3},{value:"Explore the graph",id:"explore-the-graph-1",level:3},{value:"Import DGL graph into Memgraph",id:"import-dgl-graph-into-memgraph",level:2},{value:"Prerequisites",id:"prerequisites-2",level:3},{value:"Create and run a Python script",id:"create-and-run-a-python-script-2",level:3},{value:"3. Explore the graph",id:"3-explore-the-graph",level:3},{value:"Learn more",id:"learn-more",level:2}],l={toc:h};function m(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"GQLAlchemy holds translators that can import Python graphs (",(0,n.kt)("a",{parentName:"p",href:"https://networkx.org/"},"NetworkX"),", ",(0,n.kt)("a",{parentName:"p",href:"https://pytorch-geometric.readthedocs.io/en/latest/"},"PyG")," or ",(0,n.kt)("a",{parentName:"p",href:"https://www.dgl.ai/"},"DGL")," graphs) into Memgraph. These translators take the Python graph object and translate it to the appropriate Cypher queries. The Cypher queries are then executed to create a graph inside Memgraph. "),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/tree/main/tests/transformations/translators"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-examples-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/memgraph/gqlalchemy/tree/main/gqlalchemy/transformations/translators"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-translators-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"})),"\n",(0,n.kt)("a",{parentName:"p",href:"/docs/gqlalchemy/under-the-hood/python-graph-translators"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Related&message=Under%20the%20hood&color=orange&style=for-the-badge",alt:"Related - Under the\nhood"}))),(0,n.kt)("p",null,"In this guide you will learn how to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#import-networkx-graph-into-memgraph"},(0,n.kt)("strong",{parentName:"a"},"Import NetworkX graph into Memgraph"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#import-pyg-graph-into-memgraph"},(0,n.kt)("strong",{parentName:"a"},"Import PyG graph into Memgraph"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#import-dgl-graph-into-memgraph"},(0,n.kt)("strong",{parentName:"a"},"Import DGL graph into Memgraph")))),(0,n.kt)("h2",{id:"general-prerequisites"},"General prerequisites"),(0,n.kt)("p",null,"You need a running ",(0,n.kt)("strong",{parentName:"p"},"Memgraph Platform instance"),", which includes both the MAGE library and Memgraph Lab, a visual interface. To run the image, open a command-line interpreter and run the following Docker command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker run -it -p 7687:7687 -p 7444:7444 -p 3000:3000 memgraph/memgraph-platform:latest\n")),(0,n.kt)("h2",{id:"import-networkx-graph-into-memgraph"},"Import NetworkX graph into Memgraph"),(0,n.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("p",null,"Except for the ",(0,n.kt)("a",{parentName:"p",href:"#general-prerequisites"},(0,n.kt)("strong",{parentName:"a"},"general prerequisites")),", you also need to install ",(0,n.kt)("a",{parentName:"p",href:"https://pypi.org/project/networkx/"},(0,n.kt)("strong",{parentName:"a"},"NetworkX Python library")),"."),(0,n.kt)("h3",{id:"create-and-run-a-python-script"},"Create and run a Python script"),(0,n.kt)("p",null,"Create a new Python script ",(0,n.kt)("inlineCode",{parentName:"p"},"networkx-graph.py")," in the code editor of your choice, with the following code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import networkx as nx\nfrom gqlalchemy import Memgraph\nfrom gqlalchemy.transformations.translators.nx_translator import NxTranslator\n\nmemgraph = Memgraph()\nmemgraph.drop_database()\n\ngraph = nx.Graph()\ngraph.add_nodes_from([(1, {"labels": "First"}), (2, {"name": "Kata"}), 3])\ngraph.add_edges_from([(1, 2, {"type": "EDGE_TYPE", "date": "today"}), (1, 3)])\n\ntranslator = NxTranslator()\n\nfor query in list(translator.to_cypher_queries(graph)):\n    memgraph.execute(query)\n')),(0,n.kt)("p",null,"First, connect to a running Memgraph instance. Next, drop the database to be sure that it's empty. After that, create a simple NetworkX graph and add nodes and edges to it. In the end, call ",(0,n.kt)("inlineCode",{parentName:"p"},"to_cypher_queries")," procedure on ",(0,n.kt)("inlineCode",{parentName:"p"},"NxTranslator")," instance to transform the NetworkX graph to Cypher queries which will be executed in Memgraph."),(0,n.kt)("p",null,"To run it, open a command-line interpreter and run the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"python3 networkx-graph.py\n")),(0,n.kt)("h3",{id:"explore-the-graph"},"Explore the graph"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab/connect-to-memgraph#connecting-to-memgraph"},"Connect to Memgraph")," via Memgraph Lab which is running at ",(0,n.kt)("inlineCode",{parentName:"p"},"localhost:3000"),". Open the ",(0,n.kt)("strong",{parentName:"p"},"Query Execution")," section and write the following query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n)-[r]->(m)\nRETURN n, r, m;\n")),(0,n.kt)("p",null,"Click ",(0,n.kt)("strong",{parentName:"p"},"Run Query")," button to see the results."),(0,n.kt)("img",{src:r(96187).Z,alt:"networkx-example-1",className:"imgBorder"}),(0,n.kt)("p",null,"The NetworkX node identification number maps to the ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," node property in Memgraph. The ",(0,n.kt)("inlineCode",{parentName:"p"},"labels")," key is reserved for the node label in Memgraph, while the edge ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," key is reserved for the relationship type in Memgraph. If no ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," is defined, then the relationship will be of type ",(0,n.kt)("inlineCode",{parentName:"p"},"TO")," in Memgraph. You can notice that the node with the property ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," Kata and property ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," 2 doesn't have a label. This happened because the node property key ",(0,n.kt)("inlineCode",{parentName:"p"},"labels")," was not defined. "),(0,n.kt)("h2",{id:"import-pyg-graph-into-memgraph"},"Import PyG graph into Memgraph"),(0,n.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,n.kt)("p",null,"Except for the ",(0,n.kt)("a",{parentName:"p",href:"#general-prerequisites"},(0,n.kt)("strong",{parentName:"a"},"general prerequisites")),", you also need to install ",(0,n.kt)("a",{parentName:"p",href:"https://pytorch-geometric.readthedocs.io/en/latest/install/installation.html"},(0,n.kt)("strong",{parentName:"a"},"Pytorch Geometric Python library")),"."),(0,n.kt)("h3",{id:"create-and-run-a-python-script-1"},"Create and run a Python script"),(0,n.kt)("p",null,"Create a new Python script ",(0,n.kt)("inlineCode",{parentName:"p"},"pyg-graph.py")," in the code editor of your choice, with the following code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import torch\nfrom gqlalchemy import Memgraph\nfrom gqlalchemy.transformations.translators.pyg_translator import PyGTranslator\nfrom torch_geometric.data import HeteroData\n\n\nmemgraph = Memgraph()\nmemgraph.drop_database()\n\ngraph = HeteroData()\n\ngraph[("user", "PLUS", "movie")].edge_index = torch.tensor(\n    [[0, 0, 1], [0, 1, 0]], dtype=torch.int32\n)\ngraph[("user", "MINUS", "movie")].edge_index = torch.tensor(\n    [[2], [1]], dtype=torch.int32\n)\n# Set node features\ngraph["user"].prop1 = torch.randn(size=(3, 1))\ngraph["user"].prop2 = torch.randn(size=(3, 1))\ngraph["movie"].prop1 = torch.randn(size=(2, 1))\ngraph["movie"].prop2 = torch.randn(size=(2, 1))\ngraph["movie"].prop3 = torch.randn(size=(2, 1))\ngraph["movie"].x = torch.randn(size=(2, 1))\ngraph["movie"].y = torch.randn(size=(2, 1))\n# Set edge features\ngraph[("user", "PLUS", "movie")].edge_prop1 = torch.randn(size=(3, 1))\ngraph[("user", "PLUS", "movie")].edge_prop2 = torch.randn(size=(3, 1))\ngraph[("user", "MINUS", "movie")].edge_prop1 = torch.randn(size=(1, 1))\n\ntranslator = PyGTranslator()\n\nfor query in list(translator.to_cypher_queries(graph)):\n    memgraph.execute(query)\n')),(0,n.kt)("p",null,"First, connect to a running Memgraph instance. Next, drop the database to be sure that it's empty. After that, create a simple PyG heterogeneous graph and add nodes and edges along with their features to it. The graph consist of three ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," nodes and two ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," nodes, as well as two types of edges - ",(0,n.kt)("inlineCode",{parentName:"p"},"PLUS")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"MINUS"),". The ",(0,n.kt)("inlineCode",{parentName:"p"},"edge_index")," of a graph determines which nodes are connected by which edges. Provide a tensor, that is a multi-dimensional matrix, as a value of ",(0,n.kt)("inlineCode",{parentName:"p"},"edge_index"),", to define edges. Each tensor element maps to one graph node - first row of matrix maps to ",(0,n.kt)("inlineCode",{parentName:"p"},"user"),", while the second one to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," nodes. Hence, ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 0 is connected to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 0, ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 0 is connected to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 1, and ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 1 is connected to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 0, with edge of type ",(0,n.kt)("inlineCode",{parentName:"p"},"PLUS"),". These integers are mapping to the values of the ",(0,n.kt)("inlineCode",{parentName:"p"},"pyg_id")," nodes' property in Memgraph. Similarly, the edge of type ",(0,n.kt)("inlineCode",{parentName:"p"},"MINUS")," is created between ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 2 and ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 1. In the end, call ",(0,n.kt)("inlineCode",{parentName:"p"},"to_cypher_queries")," procedure on ",(0,n.kt)("inlineCode",{parentName:"p"},"PyGTranslator")," instance to transform the PysG graph to Cypher queries which will be executed in Memgraph."),(0,n.kt)("p",null,"To run it, open a command-line interpreter and run the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"python3 pyg-graph.py\n")),(0,n.kt)("h3",{id:"explore-the-graph-1"},"Explore the graph"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab/connect-to-memgraph#connecting-to-memgraph"},"Connect to Memgraph")," via Memgraph Lab which is running at ",(0,n.kt)("inlineCode",{parentName:"p"},"localhost:3000"),". Open the ",(0,n.kt)("strong",{parentName:"p"},"Query Execution")," section and write the following query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n)-[r]->(m)\nRETURN n, r, m;\n")),(0,n.kt)("p",null,"Click ",(0,n.kt)("strong",{parentName:"p"},"Run Query")," button to see the results."),(0,n.kt)("img",{src:r(84919).Z,alt:"pyg-example",className:"imgBorder"}),(0,n.kt)("p",null,"You can notice that we have nodes labeled with ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," and relationships of type ",(0,n.kt)("inlineCode",{parentName:"p"},"PLUS")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"MINUS"),". Besides that, nodes and relationships have randomized array properties as well as ",(0,n.kt)("inlineCode",{parentName:"p"},"pyg_id")," property."),(0,n.kt)("h2",{id:"import-dgl-graph-into-memgraph"},"Import DGL graph into Memgraph"),(0,n.kt)("h3",{id:"prerequisites-2"},"Prerequisites"),(0,n.kt)("p",null,"Except for the ",(0,n.kt)("a",{parentName:"p",href:"#general-prerequisites"},(0,n.kt)("strong",{parentName:"a"},"general prerequisites")),", you also need to install ",(0,n.kt)("a",{parentName:"p",href:"https://www.dgl.ai/pages/start.html"},(0,n.kt)("strong",{parentName:"a"},"Deep Graph Library")),"."),(0,n.kt)("h3",{id:"create-and-run-a-python-script-2"},"Create and run a Python script"),(0,n.kt)("p",null,"Create a new Python script ",(0,n.kt)("inlineCode",{parentName:"p"},"dgl-graph.py")," in the code editor of your choice, with the following code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nimport dgl\nimport torch\nfrom gqlalchemy import Memgraph\nfrom gqlalchemy.transformations.translators.dgl_translator import DGLTranslator\n\nmemgraph = Memgraph()\nmemgraph.drop_database()\n\ngraph = dgl.heterograph(\n    {\n        ("user", "PLUS", "movie"): (np.array([0, 0, 1]), np.array([0, 1, 0])),\n        ("user", "MINUS", "movie"): (np.array([2]), np.array([1])),\n    }\n)\n# Set node features\ngraph.nodes["user"].data["prop1"] = torch.randn(size=(3, 1))\ngraph.nodes["user"].data["prop2"] = torch.randn(size=(3, 1))\ngraph.nodes["movie"].data["prop1"] = torch.randn(size=(2, 1))\ngraph.nodes["movie"].data["prop2"] = torch.randn(size=(2, 1))\ngraph.nodes["movie"].data["prop3"] = torch.randn(size=(2, 1))\n# Set edge features\ngraph.edges[("user", "PLUS", "movie")].data["edge_prop1"] = torch.randn(size=(3, 1))\ngraph.edges[("user", "PLUS", "movie")].data["edge_prop2"] = torch.randn(size=(3, 1))\ngraph.edges[("user", "MINUS", "movie")].data["edge_prop1"] = torch.randn(size=(1, 1))\n\ntranslator = DGLTranslator()\n\nfor query in list(translator.to_cypher_queries(graph)):\n    memgraph.execute(query)\n')),(0,n.kt)("p",null,"First, connect to a running Memgraph instance. Next, drop the database to be sure that it's is empty. After that, create a simple DGL heterogeneous graph and add nodes and edges along with their features to it. The graph consist of three ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," nodes and two ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," nodes, as well as two types of edges - ",(0,n.kt)("inlineCode",{parentName:"p"},"PLUS")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"MINUS"),". To define nodes and edge between them we are providing appropriate NumPy arrays. Hence, ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 0 is connected to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 0, ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 0 is connected to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 1, and ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 1 is connected to the ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 0, with edge of type ",(0,n.kt)("inlineCode",{parentName:"p"},"PLUS"),". These integers are mapping to the values of the ",(0,n.kt)("inlineCode",{parentName:"p"},"dgl_id")," properties in Memgraph. Similarly, the edge of type ",(0,n.kt)("inlineCode",{parentName:"p"},"MINUS")," is created between ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," node 2 and ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," node 1. In the end, call ",(0,n.kt)("inlineCode",{parentName:"p"},"to_cypher_queries")," procedure on ",(0,n.kt)("inlineCode",{parentName:"p"},"DGLTranslator")," instance to transform the DGL graph to Cypher queries which will be executed in Memgraph."),(0,n.kt)("p",null,"To run it, open a command-line interpreter and run the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"python3 dgl-graph.py\n")),(0,n.kt)("h3",{id:"3-explore-the-graph"},"3. Explore the graph"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/memgraph-lab/connect-to-memgraph#connecting-to-memgraph"},"Connect to Memgraph")," via Memgraph Lab which is running at ",(0,n.kt)("inlineCode",{parentName:"p"},"localhost:3000"),". Open the ",(0,n.kt)("strong",{parentName:"p"},"Query Execution")," section and write the following query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n)-[r]->(m)\nRETURN n, r, m;\n")),(0,n.kt)("p",null,"Click ",(0,n.kt)("strong",{parentName:"p"},"Run Query")," button to see the results."),(0,n.kt)("img",{src:r(62084).Z,alt:"pyg-example",className:"imgBorder"}),(0,n.kt)("p",null,"You can notice that we have nodes labeled with ",(0,n.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"movie")," and relationships of type ",(0,n.kt)("inlineCode",{parentName:"p"},"PLUS")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"MINUS"),". Besides that, nodes and relationships have randomized array properties ad well as ",(0,n.kt)("inlineCode",{parentName:"p"},"dgl_id")," property."),(0,n.kt)("h2",{id:"learn-more"},"Learn more"),(0,n.kt)("p",null,"Head over to the ",(0,n.kt)("a",{parentName:"p",href:"/gqlalchemy/under-the-hood/python-graph-translators"},(0,n.kt)("strong",{parentName:"a"},"Under the hood"))," section to read about implementation details. If you want to learn more about using NetworkX with Memgraph with interesting resources and courses, head over to the ",(0,n.kt)("a",{parentName:"p",href:"https://memgraph.com/memgraph-for-networkx?utm_source=docs&utm_medium=referral&utm_campaign=networkx_ppp&utm_term=docsgqla%2Bhowto&utm_content=textlink"},(0,n.kt)("strong",{parentName:"a"},"Memgraph for NetworkX developers"))," website. If you have any questions or want to connect with the Memgraph community, ",(0,n.kt)("a",{parentName:"p",href:"https://www.discord.gg/memgraph"},(0,n.kt)("strong",{parentName:"a"},"join our Discord server")),"."))}m.isMDXComponent=!0},62084:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/dgl-example-9c75ca1b77a233384a769ef1b97b603b.png"},96187:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/networkx-example-2-579e21a3ed72e0aa58edcc919fdeb9bb.png"},84919:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/pyg-example-998c52f7dd569bd43177396aa19360ac.png"}}]);