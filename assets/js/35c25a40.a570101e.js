(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8796],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,v=m["".concat(i,".").concat(d)]||m[d]||p[d]||l;return n?r.createElement(v,s(s({ref:t},u),{},{components:n})):r.createElement(v,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,s=new Array(l);s[0]=m;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<l;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19801:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return a},toc:function(){return i},default:function(){return u}});var r=n(22122),o=n(19756),l=(n(67294),n(3905)),s={id:"set-cover",title:"The set_cover module",sidebar_label:"set_cover"},a={unversionedId:"query-modules/python/set-cover",id:"query-modules/python/set-cover",isDocsHomePage:!1,title:"The set_cover module",description:"cpsolve(context, elementvertexes, set_vertexes)",source:"@site/mage/query-modules/python/set-cover.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/set-cover",permalink:"/mage/query-modules/python/set-cover",editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/set-cover.md",version:"current",sidebar_label:"set_cover",frontMatter:{id:"set-cover",title:"The set_cover module",sidebar_label:"set_cover"},sidebar:"mage",previous:{title:"The nxalg module",permalink:"/mage/query-modules/python/nxalg"},next:{title:"The tsp module",permalink:"/mage/query-modules/python/tsp"}},i=[{value:"<code>cp_solve(context, element_vertexes, set_vertexes)</code>",id:"cp_solvecontext-element_vertexes-set_vertexes",children:[]},{value:"<code>greedy(context, element_vertexes, set_vertexes)</code>",id:"greedycontext-element_vertexes-set_vertexes",children:[]}],c={toc:i};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"cp_solvecontext-element_vertexes-set_vertexes"},(0,l.kt)("inlineCode",{parentName:"h2"},"cp_solve(context, element_vertexes, set_vertexes)")),(0,l.kt)("p",null,"This set cover solver method returns 1 filed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"resulting_sets")," is a minimal set of sets in which all the elements have been\ncontained")),(0,l.kt)("p",null,"The input arguments consist of"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"element_vertexes")," that is a list of element nodes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set_vertexes")," that is a list of set nodes those elements are contained in")),(0,l.kt)("p",null,"Element and set equivalents at a certain index come in pairs so mappings between\nsets and elements are consistent."),(0,l.kt)("p",null,"The procedure can be invoked in Cypher using the following calls, e.g.: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL set_cover.cp_solve([(:Point), (:Point)], [(:Set), (:Set)]) \nYIELD resulting_sets;\n")),(0,l.kt)("p",null,"The method uses constraint programming as a solving tool for obtaining a minimal\nset of sets that contain all the elements."),(0,l.kt)("h2",{id:"greedycontext-element_vertexes-set_vertexes"},(0,l.kt)("inlineCode",{parentName:"h2"},"greedy(context, element_vertexes, set_vertexes)")),(0,l.kt)("p",null,"This set cover solver method returns 1 filed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"resulting_sets")," is a minimal set of sets in which all the elements have been\ncontained")),(0,l.kt)("p",null,"The input arguments consist of"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"element_vertexes")," that is a list of element nodes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set_vertexes")," that is a list of set nodes those elements are contained in")),(0,l.kt)("p",null,"Element and set equivalents at a certain index come in pairs so mappings between\nsets and elements are consistent."),(0,l.kt)("p",null,"The procedure can be invoked in openCypher using the following calls, e.g.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL set_cover.cp_solve([(:Point), (:Point)], [(:Set), (:Set)]) \nYIELD resulting_sets;\n")),(0,l.kt)("p",null,"The method uses a greedy method as a solving tool for obtaining a minimal set of\nsets that contain all the elements."))}u.isMDXComponent=!0}}]);