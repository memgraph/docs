"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25887],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>_});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),_=i,u=c["".concat(s,".").concat(_)]||c[_]||h[_]||r;return a?n.createElement(u,l(l({ref:t},p),{},{components:a})):n.createElement(u,l({ref:t},p))}));function _(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},65890:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_label:"database_client",title:"gqlalchemy.vendors.database_client"},l=void 0,o={unversionedId:"reference/vendors/database_client",id:"reference/vendors/database_client",title:"gqlalchemy.vendors.database_client",description:"DatabaseClient Objects",source:"@site/gqlalchemy/reference/vendors/database_client.md",sourceDirName:"reference/vendors",slug:"/reference/vendors/database_client",permalink:"/docs/gqlalchemy/reference/vendors/database_client",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/vendors/database_client.md",tags:[],version:"current",frontMatter:{sidebar_label:"database_client",title:"gqlalchemy.vendors.database_client"},sidebar:"gqlalchemy",previous:{title:"memgraph_query_builder",permalink:"/docs/gqlalchemy/reference/query_builders/memgraph_query_builder"},next:{title:"memgraph",permalink:"/docs/gqlalchemy/reference/vendors/memgraph"}},s={},d=[{value:"DatabaseClient Objects",id:"databaseclient-objects",level:2},{value:"execute_and_fetch",id:"execute_and_fetch",level:4},{value:"execute",id:"execute",level:4},{value:"create_index",id:"create_index",level:4},{value:"drop_index",id:"drop_index",level:4},{value:"get_indexes",id:"get_indexes",level:4},{value:"ensure_indexes",id:"ensure_indexes",level:4},{value:"drop_indexes",id:"drop_indexes",level:4},{value:"create_constraint",id:"create_constraint",level:4},{value:"drop_constraint",id:"drop_constraint",level:4},{value:"get_constraints",id:"get_constraints",level:4},{value:"ensure_constraints",id:"ensure_constraints",level:4},{value:"drop_database",id:"drop_database",level:4},{value:"new_connection",id:"new_connection",level:4},{value:"get_variable_assume_one",id:"get_variable_assume_one",level:4},{value:"create_node",id:"create_node",level:4},{value:"save_node",id:"save_node",level:4},{value:"save_nodes",id:"save_nodes",level:4},{value:"save_node_with_id",id:"save_node_with_id",level:4},{value:"load_node",id:"load_node",level:4},{value:"load_node_with_all_properties",id:"load_node_with_all_properties",level:4},{value:"load_node_with_id",id:"load_node_with_id",level:4},{value:"load_relationship",id:"load_relationship",level:4},{value:"load_relationship_with_id",id:"load_relationship_with_id",level:4},{value:"load_relationship_with_start_node_id_and_end_node_id",id:"load_relationship_with_start_node_id_and_end_node_id",level:4},{value:"save_relationship",id:"save_relationship",level:4},{value:"save_relationships",id:"save_relationships",level:4},{value:"save_relationship_with_id",id:"save_relationship_with_id",level:4},{value:"create_relationship",id:"create_relationship",level:4}],p={toc:d};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"databaseclient-objects"},"DatabaseClient Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class DatabaseClient(ABC)\n")),(0,i.kt)("h4",{id:"execute_and_fetch"},"execute","_","and","_","fetch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def execute_and_fetch(query: str, connection: Connection = None) -> Iterator[Dict[str, Any]]\n")),(0,i.kt)("p",null,"Executes Cypher query and returns iterator of results."),(0,i.kt)("h4",{id:"execute"},"execute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def execute(query: str, connection: Connection = None) -> None\n")),(0,i.kt)("p",null,"Executes Cypher query without returning any results."),(0,i.kt)("h4",{id:"create_index"},"create","_","index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_index(index: Index) -> None\n")),(0,i.kt)("p",null,"Creates an index (label or label-property type) in the database."),(0,i.kt)("h4",{id:"drop_index"},"drop","_","index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_index(index: Index) -> None\n")),(0,i.kt)("p",null,"Drops an index (label or label-property type) in the database."),(0,i.kt)("h4",{id:"get_indexes"},"get","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_indexes() -> List[Index]\n")),(0,i.kt)("p",null,"Returns a list of all database indexes (label and label-property types)."),(0,i.kt)("h4",{id:"ensure_indexes"},"ensure","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef ensure_indexes(indexes: List[Index]) -> None\n")),(0,i.kt)("p",null,"Ensures that database indexes match input indexes."),(0,i.kt)("h4",{id:"drop_indexes"},"drop","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_indexes() -> None\n")),(0,i.kt)("p",null,"Drops all indexes in the database"),(0,i.kt)("h4",{id:"create_constraint"},"create","_","constraint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_constraint(index: Constraint) -> None\n")),(0,i.kt)("p",null,"Creates a constraint (label or label-property type) in the database."),(0,i.kt)("h4",{id:"drop_constraint"},"drop","_","constraint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_constraint(index: Constraint) -> None\n")),(0,i.kt)("p",null,"Drops a constraint (label or label-property type) in the database."),(0,i.kt)("h4",{id:"get_constraints"},"get","_","constraints"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_constraints() -> List[Constraint]\n")),(0,i.kt)("p",null,"Returns a list of all database constraints (label and label-property types)."),(0,i.kt)("h4",{id:"ensure_constraints"},"ensure","_","constraints"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def ensure_constraints(constraints: List[Constraint]) -> None\n")),(0,i.kt)("p",null,"Ensures that database constraints match input constraints."),(0,i.kt)("h4",{id:"drop_database"},"drop","_","database"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_database()\n")),(0,i.kt)("p",null,"Drops database by removing all nodes and edges."),(0,i.kt)("h4",{id:"new_connection"},"new","_","connection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef new_connection() -> Connection\n")),(0,i.kt)("p",null,"Creates new database connection."),(0,i.kt)("h4",{id:"get_variable_assume_one"},"get","_","variable","_","assume","_","one"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_variable_assume_one(query_result: Iterator[Dict[str, Any]], variable_name: str) -> Any\n")),(0,i.kt)("p",null,"Returns a single result from the query_result (usually gotten from\nthe execute_and_fetch function).\nIf there is more than one result, raises a GQLAlchemyError."),(0,i.kt)("h4",{id:"create_node"},"create","_","node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_node(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Creates a node in database from the ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," object."),(0,i.kt)("h4",{id:"save_node"},"save","_","node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef save_node(node: Node) -> Node\n")),(0,i.kt)("p",null,"Saves node to database.\nIf the node._id is not None, it fetches the node with the same id from\nthe database and updates it","'","s fields.\nIf the node has unique fields it fetches the nodes with the same unique\nfields from the database and updates it","'","s fields.\nOtherwise it creates a new node with the same properties.\nNull properties are ignored."),(0,i.kt)("h4",{id:"save_nodes"},"save","_","nodes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_nodes(nodes: List[Node]) -> None\n")),(0,i.kt)("p",null,"Saves a list of nodes to the database."),(0,i.kt)("h4",{id:"save_node_with_id"},"save","_","node","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_node_with_id(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Saves a node to the database using the internal id."),(0,i.kt)("h4",{id:"load_node"},"load","_","node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef load_node(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Loads a node from the database.\nIf the node._id is not None, it fetches the node from the database with that\ninternal id.\nIf the node has unique fields it fetches the node from the database with\nthose unique fields set.\nOtherwise it tries to find any node in the database that has all properties\nset to exactly the same values.\nIf no node is found or no properties are set it raises a GQLAlchemyError."),(0,i.kt)("h4",{id:"load_node_with_all_properties"},"load","_","node","_","with","_","all","_","properties"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_node_with_all_properties(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Loads a node from the database with all equal property values."),(0,i.kt)("h4",{id:"load_node_with_id"},"load","_","node","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_node_with_id(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Loads a node with the same internal database id."),(0,i.kt)("h4",{id:"load_relationship"},"load","_","relationship"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef load_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Returns a relationship loaded from the database.\nIf the relationship._id is not None, it fetches the relationship from\nthe database that has the same internal id.\nOtherwise it returns the relationship whose relationship._start_node_id\nand relationship._end_node_id and all relationship properties that\nare not None match the relationship in the database.\nIf there is no relationship like that in database, or if there are\nmultiple relationships like that in database, throws GQLAlchemyError."),(0,i.kt)("h4",{id:"load_relationship_with_id"},"load","_","relationship","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship_with_id(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Loads a relationship from the database using the internal id."),(0,i.kt)("h4",{id:"load_relationship_with_start_node_id_and_end_node_id"},"load","_","relationship","_","with","_","start","_","node","_","id","_","and","_","end","_","node","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship_with_start_node_id_and_end_node_id(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Loads a relationship from the database using start node and end node id\nfor which all properties of the relationship that are not None match."),(0,i.kt)("h4",{id:"save_relationship"},"save","_","relationship"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef save_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Saves a relationship to the database.\nIf relationship._id is not None it finds the relationship in the database\nand updates it","'","s properties with the values in ",(0,i.kt)("inlineCode",{parentName:"p"},"relationship"),".\nIf relationship._id is None, it creates a new relationship.\nIf you want to set a relationship._id instead of creating a new\nrelationship, use ",(0,i.kt)("inlineCode",{parentName:"p"},"load_relationship")," first."),(0,i.kt)("h4",{id:"save_relationships"},"save","_","relationships"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationships(relationships: List[Relationship]) -> None\n")),(0,i.kt)("p",null,"Saves a list of relationships to the database."),(0,i.kt)("h4",{id:"save_relationship_with_id"},"save","_","relationship","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationship_with_id(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Saves a relationship to the database using the relationship._id."),(0,i.kt)("h4",{id:"create_relationship"},"create","_","relationship"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Creates a new relationship in the database."))}h.isMDXComponent=!0}}]);