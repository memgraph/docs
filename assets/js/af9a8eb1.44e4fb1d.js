"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={id:"optional-match",title:"OPTIONAL MATCH clause",sidebar_label:"OPTIONAL MATCH"},l=void 0,i={unversionedId:"clauses/optional-match",id:"clauses/optional-match",title:"OPTIONAL MATCH clause",description:"The MATCH clause can be modified by prepending the OPTIONAL keyword.",source:"@site/cypher-manual/clauses/optional-match.md",sourceDirName:"clauses",slug:"/clauses/optional-match",permalink:"/docs/cypher-manual/clauses/optional-match",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/optional-match.md",tags:[],version:"current",frontMatter:{id:"optional-match",title:"OPTIONAL MATCH clause",sidebar_label:"OPTIONAL MATCH"},sidebar:"cypher_manual",previous:{title:"MERGE",permalink:"/docs/cypher-manual/clauses/merge"},next:{title:"REMOVE",permalink:"/docs/cypher-manual/clauses/remove"}},p={},s=[{value:"Dataset",id:"dataset",level:2},{value:"1. Get optional relationships",id:"1-get-optional-relationships",level:2},{value:"2. Optional typed and named relationship",id:"2-optional-typed-and-named-relationship",level:2},{value:"Dataset queries",id:"dataset-queries",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH")," clause can be modified by prepending the ",(0,r.kt)("inlineCode",{parentName:"p"},"OPTIONAL")," keyword.\n",(0,r.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause behaves the same as a regular ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH"),", but when it fails to find the pattern,\nmissing parts of the pattern will be filled with null values."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#1-get-optional-relationships"},"Get optional relationships")," ",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#2-optional-typed-and-named-relationship"},"Optional typed and named relationship"))),(0,r.kt)("h2",{id:"dataset"},"Dataset"),(0,r.kt)("p",null,"The following examples are executed with this dataset. You can create this dataset\nlocally by executing the queries at the end of the page: ",(0,r.kt)("a",{parentName:"p",href:"#data-set-queries"},"Dataset queries"),"."),(0,r.kt)("img",{src:"https://raw.githubusercontent.com/g-despot/images/master/data_set.png",alt:"Data set",style:{height:380}}),(0,r.kt)("h2",{id:"1-get-optional-relationships"},"1. Get optional relationships"),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," when returning a relationship that doesn't exist will return the default value ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," instead."),(0,r.kt)("p",null,"The returned property of an optional element that is ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," will also be ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country {name: 'France'})\nOPTIONAL MATCH (c1)--(c2:Country {name: 'Germany'})\nRETURN c2;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------+\n| c2   |\n+------+\n| Null |\n+------+\n")),(0,r.kt)("h2",{id:"2-optional-typed-and-named-relationship"},"2. Optional typed and named relationship"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"OPTIONAL MATCH")," clause allows you to use the same conventions as ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH")," when it comes to handling variables and relationship types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c:Country {name: 'United Kingdom'})\nOPTIONAL MATCH (c)-[r:LIVES_IN]->()\nRETURN c.name, r;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+----------------+----------------+\n| c.name         | r              |\n+----------------+----------------+\n| United Kingdom | Null           |\n+----------------+----------------+\n")),(0,r.kt)("p",null,"Because there are no outgoing relationships of type ",(0,r.kt)("inlineCode",{parentName:"p"},"LIVES_IN")," for the node, the value of r is ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," while the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"contry.name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"'United Kingdom'"),"."),(0,r.kt)("h2",{id:"dataset-queries"},"Dataset queries"),(0,r.kt)("p",null,"We encourage you to try out the examples by yourself.\nYou can get our dataset locally by executing the following query block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n) DETACH DELETE n;\n\nCREATE (c1:Country {name: 'Germany', language: 'German', continent: 'Europe', population: 83000000});\nCREATE (c2:Country {name: 'France', language: 'French', continent: 'Europe', population: 67000000});\nCREATE (c3:Country {name: 'United Kingdom', language: 'English', continent: 'Europe', population: 66000000});\n\nMATCH (c1),(c2)\nWHERE c1.name= 'Germany' AND c2.name = 'France'\nCREATE (c2)<-[:WORKING_IN {date_of_start: 2014}]-(p:Person {name: 'John'})-[:LIVING_IN {date_of_start: 2014}]->(c1);\n\nMATCH (c)\nWHERE c.name= 'United Kingdom'\nCREATE (c)<-[:WORKING_IN {date_of_start: 2014}]-(p:Person {name: 'Harry'})-[:LIVING_IN {date_of_start: 2013}]->(c);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)-[:FRIENDS_WITH {date_of_start: 2011}]->(p2);\n\nMATCH (p1),(p2)\nWHERE p1.name = 'John' AND p2.name = 'Harry'\nCREATE (p1)<-[:FRIENDS_WITH {date_of_start: 2012}]-(:Person {name: 'Anna'})-[:FRIENDS_WITH {date_of_start: 2014}]->(p2);\n\nMATCH (p),(c1),(c2)\nWHERE p.name = 'Anna' AND c1.name = 'United Kingdom' AND c2.name = 'Germany'\nCREATE (c2)<-[:LIVING_IN {date_of_start: 2014}]-(p)-[:LIVING_IN {date_of_start: 2014}]->(c1);\n\nMATCH (n)-[r]->(m) RETURN n,r,m;\n")))}u.isMDXComponent=!0}}]);