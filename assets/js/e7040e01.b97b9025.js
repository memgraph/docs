"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80122],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=s(a),c=o,h=d["".concat(p,".").concat(c)]||d[c]||u[c]||r;return a?n.createElement(h,l(l({ref:t},m),{},{components:a})):n.createElement(h,l({ref:t},m))}));function c(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),o=a(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(87462),o=a(67294),r=a(86010),l=a(72389),i=a(67392),p=a(7094),s=a(12466);const m="tabList__CuJ",u="tabItem_LNqP";function d(e){var t;const{lazy:a,block:l,defaultValue:d,values:c,groupId:h,className:g}=e,v=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=c??v.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,i.l)(k,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===d?d:d??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==f&&!k.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:_,setTabGroupChoices:y}=(0,p.U)(),[T,N]=(0,o.useState)(f),I=[],{blockElementScrollPositionUntilNextRender:S}=(0,s.o5)();if(null!=h){const e=_[h];null!=e&&e!==T&&k.some((t=>t.value===e))&&N(e)}const w=e=>{const t=e.currentTarget,a=I.indexOf(t),n=k[a].value;n!==T&&(S(t),N(n),null!=h&&y(h,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;a=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;a=I[t]??I[I.length-1];break}}null==(t=a)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",m)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},g)},k.map((e=>{let{value:t,label:a,attributes:l}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>I.push(e),onKeyDown:E,onClick:w},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,o.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function c(e){const t=(0,l.Z)();return o.createElement(d,(0,n.Z)({key:String(t)},e))}},99624:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=a(87462),o=(a(67294),a(3905)),r=a(65488),l=a(85162);const i={id:"csv-import-tool",title:"CSV Import Tool",sidebar_label:"CSV Import Tool"},p=void 0,s={unversionedId:"import-data/csv-import-tool",id:"version-2.1.0/import-data/csv-import-tool",title:"CSV Import Tool",description:"CSV is a universal and very versatile data format used to store large quantities",source:"@site/memgraph_versioned_docs/version-2.1.0/import-data/csv-import-tool.md",sourceDirName:"import-data",slug:"/import-data/csv-import-tool",permalink:"/docs/memgraph/2.1.0/import-data/csv-import-tool",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/import-data/csv-import-tool.md",tags:[],version:"2.1.0",frontMatter:{id:"csv-import-tool",title:"CSV Import Tool",sidebar_label:"CSV Import Tool"},sidebar:"version-2.1.0/memgraph",previous:{title:"LOAD CSV Cypher clause",permalink:"/docs/memgraph/2.1.0/import-data/load-csv-clause"},next:{title:"Kafka streams overview",permalink:"/docs/memgraph/2.1.0/import-data/kafka"}},m={},u=[{value:"How to use the CSV Import Tool?",id:"how-to-use-the-csv-import-tool",level:3},{value:"Examples",id:"examples",level:2},{value:"One type of nodes and relationships",id:"one-type-of-nodes-and-relationships",level:3},{value:"Multiple types of nodes and relationships",id:"multiple-types-of-nodes-and-relationships",level:3}],d={toc:u};function c(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"CSV is a universal and very versatile data format used to store large quantities\nof data.  Each Memgraph database instance has a CSV import tool installed called\n",(0,o.kt)("inlineCode",{parentName:"p"},"mg_import_csv"),".  The CSV import tool should be used for initial bulk ingestion\nof data into the database.  Upon ingestion, the CSV importer creates a snapshot\nthat will be used by the database to recover its state on its next startup."),(0,o.kt)("p",null,"If you are already familiar with the Neo4j bulk import tool, then using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"mg_import_csv")," tool should be easy.  The CSV import tool is fully compatible\nwith the ",(0,o.kt)("a",{parentName:"p",href:"https://neo4j.com/docs/operations-manual/current/tools/import/"},"Neo4j CSV\nformat"),".  If you\nalready have a pipeline set-up for Neo4j, you should only replace ",(0,o.kt)("inlineCode",{parentName:"p"},"neo4j-admin\nimport")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"mg_import_csv"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For more detailed information about the CSV Import Tool, check our ",(0,o.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/import-data/csv-import-tool"},"Reference\nguide"),".")),(0,o.kt)("h3",{id:"how-to-use-the-csv-import-tool"},"How to use the CSV Import Tool?"),(0,o.kt)(r.Z,{groupId:"platform",defaultValue:"docker",values:[{label:"Docker \ud83d\udc33",value:"docker"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"docker",mdxType:"TabItem"},(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you installed Memgraph through Docker Hub, the name of the Docker image\n",(0,o.kt)("inlineCode",{parentName:"p"},"memgraph")," should be replaced with ",(0,o.kt)("inlineCode",{parentName:"p"},"memgraph/memgraph-platform")," if you didn't\nchange the image tag.")),(0,o.kt)("p",null,"If you installed Memgraph using Docker, you will need to run the importer using\nthe following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"docker run -v mg_lib:/var/lib/memgraph -v mg_import:/import-data --entrypoint=mg_import_csv memgraph\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This is an incomplete command as it's missing the files that need to be\nimported. It will result with a ",(0,o.kt)("inlineCode",{parentName:"p"},"The --nodes flag is required!")," error. You can\nfind a complete example ",(0,o.kt)("a",{parentName:"p",href:"#examples"},"below"),".")),(0,o.kt)("p",null,"For information on other options, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --entrypoint=mg_import_csv memgraph --help\n"))),(0,o.kt)(l.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("p",null,"The import tool is run from the console, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"mg_import_csv")," command.\nThe tool should be run as user ",(0,o.kt)("inlineCode",{parentName:"p"},"memgraph"),", using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo -u memgraph mg_import_csv\n")),(0,o.kt)("p",null,"For information on other options, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u memgraph mg_import_csv --help\n")))),(0,o.kt)("p",null,"Below, you can find two examples of how to use the CSV Import Tool depending on\nthe complexity of your data:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#one-type-of-nodes-and-relationships"},"One type of nodes and relationships")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#multiple-types-of-nodes-and-relationships"},"Multiple types of nodes and\nrelationships"))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"It is also important to note that importing CSV data using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"mg_import_csv")," command should be a one-time operation before running Memgraph.\nIn other words, this tool should not be used to import data into an already\nrunning Memgraph instance.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"one-type-of-nodes-and-relationships"},"One type of nodes and relationships"),(0,o.kt)("p",null,"Let's import a simple dataset."),(0,o.kt)(r.Z,{groupId:"files",defaultValue:"pn",values:[{label:"1. people_nodes.csv",value:"pn"},{label:"2. people_relationships.csv",value:"pr"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"pn",mdxType:"TabItem"},(0,o.kt)("p",null,"Store the following in ",(0,o.kt)("inlineCode",{parentName:"p"},"people_nodes.csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"id:ID(PERSON_ID),name:string,:LABEL\n100,Daniel,Person\n101,Alex,Person\n102,Sarah,Person\n103,Mia,Person\n104,Lucy,Person\n"))),(0,o.kt)(l.Z,{value:"pr",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's add relationships between people in ",(0,o.kt)("inlineCode",{parentName:"p"},"people_relationships.csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},":START_ID(PERSON_ID),:END_ID(PERSON_ID),:TYPE\n100,102,IS_FRIENDS_WITH\n103,101,IS_FRIENDS_WITH\n102,103,IS_FRIENDS_WITH\n101,104,IS_FRIENDS_WITH\n104,100,IS_FRIENDS_WITH\n101,102,IS_FRIENDS_WITH\n100,103,IS_FRIENDS_WITH\n")))),(0,o.kt)("p",null,"Now, you can import the dataset using the CSV Import Tool."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Your existing snapshot and WAL data will be considered\nobsolete, and Memgraph will load the new dataset.")),(0,o.kt)("p",null,"Use the following command:"),(0,o.kt)(r.Z,{groupId:"platform",defaultValue:"docker",values:[{label:"Docker \ud83d\udc33",value:"docker"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"docker",mdxType:"TabItem"},(0,o.kt)("p",null,"If using Docker, things are a bit more complicated. First you need to copy the\nCSV files where the Docker image can see them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker container create --user memgraph --name mg_import_helper -v mg_import:/import-data busybox\ndocker cp people_nodes.csv mg_import_helper:/import-data\ndocker cp people_relationships.csv mg_import_helper:/import-data\ndocker rm mg_import_helper\n")),(0,o.kt)("p",null,"Then, run the importer with the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v mg_lib:/var/lib/memgraph -v mg_import:/import-data \\\n  --entrypoint=mg_import_csv memgraph \\\n  --nodes /import-data/people_nodes.csv \\\n  --relationships /import-data/people_relationships.csv\n")),(0,o.kt)("p",null,"Next time you run Memgraph, the dataset will be loaded:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," docker run -p 7687:7687 -v mg_lib:/var/lib/memgraph memgraph\n"))),(0,o.kt)(l.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u memgraph mg_import_csv --nodes people_nodes.csv --relationships people_relationships.csv\n")),(0,o.kt)("p",null,"Next time you run Memgraph, the dataset will be loaded."))),(0,o.kt)("h3",{id:"multiple-types-of-nodes-and-relationships"},"Multiple types of nodes and relationships"),(0,o.kt)("p",null,"The previous example is showcasing a simple graph with one node type and one\nrelationship type. If we have more complex graphs, the procedure is similar.\nLet's define the following dataset:"),(0,o.kt)(r.Z,{groupId:"files",defaultValue:"pn",values:[{label:"1. people_nodes.csv",value:"pn"},{label:"2. people_relationships.csv",value:"pr"},{label:"3. restaurants_nodes.csv",value:"rn"},{label:"4. restaurants_relationships.csv",value:"rr"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"pn",mdxType:"TabItem"},(0,o.kt)("p",null,"Add the following to ",(0,o.kt)("inlineCode",{parentName:"p"},"people_nodes.csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"id:ID(PERSON_ID),name:string,age:int,city:string,:LABEL\n100,Daniel,30,London,Person\n101,Alex,15,Paris,Person\n102,Sarah,17,London,Person\n103,Mia,25,Zagreb,Person\n104,Lucy,21,Paris,Person\n105,Adam,23,New York,Person\n"))),(0,o.kt)(l.Z,{value:"pr",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's define the relationships between people in ",(0,o.kt)("inlineCode",{parentName:"p"},"people_relationships.csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},":START_ID(PERSON_ID),:END_ID(PERSON_ID),:TYPE, met_in:int\n100,102,IS_FRIENDS_WITH,2014\n103,105,IS_FRIENDS_WITH,2021\n102,103,IS_FRIENDS_WITH,2005\n101,104,IS_FRIENDS_WITH,2005\n104,100,IS_FRIENDS_WITH,2018\n105,102,IS_FRIENDS_WITH,2017\n100,103,IS_FRIENDS_WITH,2001\n"))),(0,o.kt)(l.Z,{value:"rn",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's introduce another node type, restaurants, in ",(0,o.kt)("inlineCode",{parentName:"p"},"restaurants_nodes.csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"id:ID(REST_ID),name:string,menu:string[],:LABEL\n200,Mc Donalds,Fries;BigMac;McChicken;Apple Pie,Restaurant\n201,KFC,Fried Chicken;Fries;Chicken Bucket,Restaurant\n202,Subway,Ham Sandwich;Turkey Sandwich;Foot-long,Restaurant\n203,Dominos,Pepperoni Pizza;Double Dish Pizza;Cheese filled Crust,Restaurant\n"))),(0,o.kt)(l.Z,{value:"rr",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's define the relationships between people and restaurants in\n",(0,o.kt)("inlineCode",{parentName:"p"},"restaurants_relationships.csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},":START_ID(PERSON_ID),:END_ID(REST_ID),:TYPE, liked:boolean\n100,200,ATE_AT,true\n103,201,ATE_AT,false\n104,200,ATE_AT,true\n101,202,ATE_AT,false\n101,203,ATE_AT,false\n101,200,ATE_AT,true\n102,201,ATE_AT,true\n")))),(0,o.kt)("p",null,"After preparing the files above, you can import the dataset using the CSV Import\ntool."),(0,o.kt)(r.Z,{groupId:"platform",defaultValue:"docker",values:[{label:"Docker \ud83d\udc33",value:"docker"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"docker",mdxType:"TabItem"},(0,o.kt)("p",null,"If using Docker, things are a bit more complicated. First, you need to copy the\nCSV files where the Docker container can see them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker container create --user memgraph --name mg_import_helper -v mg_import:/import-data busybox\ndocker cp people_nodes.csv mg_import_helper:/import-data\ndocker cp people_relationships.csv mg_import_helper:/import-data\ndocker cp restaurants_nodes.csv mg_import_helper:/import-data\ndocker cp restaurants_relationships.csv mg_import_helper:/import-data\ndocker rm mg_import_helper\n")),(0,o.kt)("p",null,"Then, run the importer with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v mg_lib:/var/lib/memgraph -v mg_etc:/etc/memgraph -v mg_import:/import-data \\\n  --entrypoint=mg_import_csv memgraph \\\n  --nodes /import-data/people_nodes.csv \\\n  --nodes /import-data/restaurants_nodes.csv \\\n  --relationships /import-data/people_relationships.csv \\\n  --relationships /import-data/restaurants_relationships.csv\n")),(0,o.kt)("p",null,"Next time you run Memgraph, the dataset will be loaded:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," docker run -p 7687:7687 -v mg_lib:/var/lib/memgraph memgraph\n"))),(0,o.kt)(l.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u memgraph mg_import_csv --nodes people_nodes.csv --nodes restaurants_nodes.csv --relationships people_relationships.csv --relationships restaurants_relationships.csv\n")),(0,o.kt)("p",null,"The next time you run Memgraph, the dataset will be loaded."))))}c.isMDXComponent=!0}}]);