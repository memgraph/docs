"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77127],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>c});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),s=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(u.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(t),c=o,h=m["".concat(u,".").concat(c)]||m[c]||d[c]||a;return t?n.createElement(h,i(i({ref:r},p),{},{components:t})):n.createElement(h,i({ref:r},p))}));function c(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3192:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=t(87462),o=(t(67294),t(3905));const a={id:"overview",title:"How to use query modules",sidebar_label:"Query modules overview",slug:"/how-to-guides/query-modules"},i=void 0,l={unversionedId:"how-to-guides/query-modules/overview",id:"version-2.1.1/how-to-guides/query-modules/overview",title:"How to use query modules",description:"Memgraph supports extending the query language with user-written procedures.",source:"@site/memgraph_versioned_docs/version-2.1.1/how-to-guides/query-modules/overview.md",sourceDirName:"how-to-guides/query-modules",slug:"/how-to-guides/query-modules",permalink:"/docs/memgraph/2.1.1/how-to-guides/query-modules",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.1/how-to-guides/query-modules/overview.md",tags:[],version:"2.1.1",frontMatter:{id:"overview",title:"How to use query modules",sidebar_label:"Query modules overview",slug:"/how-to-guides/query-modules"},sidebar:"memgraph",previous:{title:"Utilize the NetworkX library",permalink:"/docs/memgraph/2.1.1/how-to-guides/networkx"},next:{title:"Implement custom query modules",permalink:"/docs/memgraph/2.1.1/how-to-guides/query-modules/implement-query-modules"}},u={},s=[{value:"Loading query modules",id:"loading-query-modules",level:2},{value:"Avilable query modules",id:"avilable-query-modules",level:2},{value:"Syntax for calling procedures",id:"syntax-for-calling-procedures",level:2},{value:"Controlling procedure memory usage",id:"controlling-procedure-memory-usage",level:2},{value:"Implementing custom query modules",id:"implementing-custom-query-modules",level:2}],p={toc:s};function d(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Memgraph supports extending the query language with user-written procedures.\nThese procedures are grouped into modules, which can then be loaded on startup."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For detailed technical information on query modules, check out the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.1/reference-guide/query-modules"},"reference guide"),".")),(0,o.kt)("h2",{id:"loading-query-modules"},"Loading query modules"),(0,o.kt)("p",null,"Upon startup, Memgraph will attempt to load the query modules form all ",(0,o.kt)("inlineCode",{parentName:"p"},"*.so"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"*.py")," files it finds in the default (",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules"),")\ndirectory."),(0,o.kt)("p",null,"If you want to change the directory in which Memgraph searches for query\nmodules, just change the ",(0,o.kt)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main\nconfiguration file (",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply it as a\ncommand-line parameter (e.g. when using Docker)."),(0,o.kt)("h2",{id:"avilable-query-modules"},"Avilable query modules"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"MAGE"),", also known as ",(0,o.kt)("strong",{parentName:"p"},"Memgraph Advanced Graph Extensions"),", is an\nopen-source repository that contains graph algorithms in the form of ",(0,o.kt)("strong",{parentName:"p"},"query\nmodules")," written by the team behind Memgraph and its users. You can find and\ncontribute implementations of various algorithms in multiple programming\nlanguages, all runnable inside Memgraph."),(0,o.kt)("admonition",{title:"MAGE Documentation",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Check out the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/mage"},"MAGE documentation"))," for a\ndetailed overview of all the available modules and installation instructions.")),(0,o.kt)("admonition",{title:"MAGE Source code",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Check out the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/memgraph/mage"},"MAGE source\ncode"))," on GitHub if you are interested in the\nunderlying implementation.")),(0,o.kt)("h2",{id:"syntax-for-calling-procedures"},"Syntax for calling procedures"),(0,o.kt)("p",null,"OpenCypher has a special syntax for calling procedures in loaded query modules:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) YIELD res1, res2, ...;\n")),(0,o.kt)("p",null,"Each procedure returns zero or more records, where each record contains named\nfields. The ",(0,o.kt)("inlineCode",{parentName:"p"},"YIELD")," part is used to select fields we are interested in. If the\nprocedure doesn't return any fields, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"YIELD")," part can be omitted."),(0,o.kt)("p",null,"Procedures may be called standalone as the above, or as a part of a larger\nquery. This is useful if we want the procedure to work on data the query is\nproducing. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(node) YIELD result RETURN *;\n")),(0,o.kt)("p",null,"For ",(0,o.kt)("strong",{parentName:"p"},"writeable procedures")," we have some other limitations also:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the rest of the query has to be read-only"),(0,o.kt)("li",{parentName:"ul"},"the writeable procedure call has to be the last cause in the query apart from\nthe ",(0,o.kt)("inlineCode",{parentName:"li"},"RETURN")," clause. The last example also works with writeable procedures\nbecause it satisfies all of these requirements.")),(0,o.kt)("p",null,"When we use ",(0,o.kt)("inlineCode",{parentName:"p"},"CALL")," in a larger query, we have to explicitly ",(0,o.kt)("inlineCode",{parentName:"p"},"RETURN")," from the\nquery to get the results. Naturally, the ",(0,o.kt)("inlineCode",{parentName:"p"},"RETURN")," is not needed if we perform\nupdates after ",(0,o.kt)("inlineCode",{parentName:"p"},"CALL")," or the called procedure is a writeable procedure. This\nfollows the openCypher convention that read-only queries need to end with a\n",(0,o.kt)("inlineCode",{parentName:"p"},"RETURN"),", while queries which update something don't need to ",(0,o.kt)("inlineCode",{parentName:"p"},"RETURN")," anything."),(0,o.kt)("p",null,"If a procedure returns a record with a field name that may clash with some\nvariable we already have in a query, that field name can be aliased into some\nother name. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(42) YIELD node AS result RETURN *;\n")),(0,o.kt)("h2",{id:"controlling-procedure-memory-usage"},"Controlling procedure memory usage"),(0,o.kt)("p",null,"When running a procedure, Memgraph controls the maximum memory usage that the\nprocedure may consume during its execution.  By default, the upper memory limit\nwhen running a procedure is ",(0,o.kt)("inlineCode",{parentName:"p"},"100 MB"),".  If your query procedure requires more\nmemory to be able to yield its results, you can increase the memory limit using\nthe following syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 KB YIELD res1, res2, ...;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 MB YIELD res1, res2, ...;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY UNLIMITED YIELD res1, res2, ...;\n")),(0,o.kt)("p",null,"The limit can either be specified to a specific value (either in ",(0,o.kt)("inlineCode",{parentName:"p"},"KB")," or in\n",(0,o.kt)("inlineCode",{parentName:"p"},"MB"),"), or it can be set to unlimited."),(0,o.kt)("h2",{id:"implementing-custom-query-modules"},"Implementing custom query modules"),(0,o.kt)("p",null,"Query modules can be implemented by either using the C API or Python API\nprovided by Memgraph."),(0,o.kt)("p",null,"Modules implemented using the C API need to be compiled to a shared library\n(",(0,o.kt)("inlineCode",{parentName:"p"},".so")," file), so they can be loaded when Memgraph starts.  The C API is well\ndocumented in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/include/memgraph/mg_procedure.h")," header and in the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.1/reference-guide/query-modules/api/c-api"},"reference guide"),"."),(0,o.kt)("p",null,"Modules implemented using the Python API need to be written in Python version\n",(0,o.kt)("inlineCode",{parentName:"p"},"3.5.0")," and above. The Python API is well documented in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/python_support/mgp.py")," file and in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.1/reference-guide/query-modules/api/python-api"},"reference\nguide"),"."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"If your programming language of choice throws\nexceptions, these exceptions must never leave the scope of your module! You\nshould have a top level exception handler which returns with an error value and\npotentially logs the error message. Exceptions which cross the module boundary\nwill cause all sorts of unexpected issues.")),(0,o.kt)("p",null,"For a more detailed example on how to implement your own query modules, we\nsuggest you take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.1/how-to-guides/query-modules/implement-query-modules"},"Implement custom query\nmodules"),"\nguide."))}d.isMDXComponent=!0}}]);