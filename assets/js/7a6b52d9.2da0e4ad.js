"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[11422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,u=h["".concat(l,".").concat(d)]||h[d]||m[d]||r;return n?i.createElement(u,o(o({ref:t},c),{},{components:n})):i.createElement(u,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},54232:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={id:"union-find-algorithm",title:"Union Find",sidebar_label:"Union Find"},o=void 0,s={unversionedId:"algorithms/traditional-graph-analytics/union-find-algorithm",id:"algorithms/traditional-graph-analytics/union-find-algorithm",title:"Union Find",description:"Description",source:"@site/mage/algorithms/traditional-graph-analytics/union-find.md",sourceDirName:"algorithms/traditional-graph-analytics",slug:"/algorithms/traditional-graph-analytics/union-find-algorithm",permalink:"/docs/mage/algorithms/traditional-graph-analytics/union-find-algorithm",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/algorithms/traditional-graph-analytics/union-find.md",tags:[],version:"current",frontMatter:{id:"union-find-algorithm",title:"Union Find",sidebar_label:"Union Find"},sidebar:"mage",previous:{title:"PageRank",permalink:"/docs/mage/algorithms/traditional-graph-analytics/pagerank-algorithm"},next:{title:"Dynamic Betweenness Centrality",permalink:"/docs/mage/algorithms/dynamic-graph-analytics/betweenness-centrality-online-algorithm"}},l={},p=[{value:"Description",id:"description",level:2},{value:"Materials",id:"materials",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Use cases",id:"use-cases",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"This is yet another important graph analytics algorithm. By using a\n",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Disjoint-set_data_structure"},(0,a.kt)("strong",{parentName:"a"},"disjoint-set"))," -\na data structure that keeps track of non-overlapping sets, the algorithm enables\nthe user to quickly check whether a pair of given nodes is in the same or\ndifferent ",(0,a.kt)("strong",{parentName:"p"},"connected component"),". The benefit of having this structure is that\na check on a pair of nodes is effectively executed in O(1) time."),(0,a.kt)("p",null,'The implementation of the disjoint-set data structure and its operations uses\nthe union by rank and path splitting optimizations described in "Worst-case\nAnalysis of Set Union Algorithms", developed by ',(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Robert_Tarjan"},"Robert\nTarjan")," and ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Jan_van_Leeuwen"},"Jan van\nLeeuwen"),"."),(0,a.kt)("img",{src:"https://i.imgur.com/R6BuXzs.png",alt:"drawing"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Structure of the disjoint set on the right side, and graph example on the\nleft. When checking the components, the algorithm only checks the shallow tree\non the left")),(0,a.kt)("h2",{id:"materials"},"Materials"),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/union_find.py"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Union_Find-Implementation-FB6E00?style=for-the-badge&logo=github&logoColor=white",alt:"Union\nFind"}))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/mage/query-modules/python/union-find"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Union_Find-Documentation-FCC624?style=for-the-badge&logo=cplusplus&logoColor=white",alt:"Union\nFind"}))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Union Find")," is implemented as part of the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage"},(0,a.kt)("strong",{parentName:"a"},"MAGE"))," project. Be sure to check it out in\nthe link above. \u261d\ufe0f"),(0,a.kt)("h2",{id:"use-cases"},"Use cases"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/mage/use-cases/social-media"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Social_networks-Application-8A477F?style=for-the-badge",alt:"Social\nnetworks"}))),(0,a.kt)("p",null,"Social graphs are often enormous in size. Searching through them and determining\nwhether something is in the same component might take a lot of time. By\norganizing such structures in disjoint sets, and using the union-find algorithm,\nit is possible to determine this connectivity extremely efficiently."))}m.isMDXComponent=!0}}]);