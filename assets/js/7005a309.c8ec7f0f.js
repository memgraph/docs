"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34255],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(a),c=i,g=m["".concat(d,".").concat(c)]||m[c]||p[c]||r;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},74462:(e,t,a)=>{a.r(t),a.d(t,{Highlight:()=>m,assets:()=>u,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),i=(a(67294),a(3905)),r=a(65488),l=a(85162);const o={id:"community-detection-online",title:"community_detection_online",sidebar_label:"community_detection_online"},d=void 0,s={unversionedId:"query-modules/cpp/community-detection-online",id:"query-modules/cpp/community-detection-online",title:"community_detection_online",description:"docs-source",source:"@site/mage/query-modules/cpp/community_detection_online.md",sourceDirName:"query-modules/cpp",slug:"/query-modules/cpp/community-detection-online",permalink:"/docs/mage/query-modules/cpp/community-detection-online",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/cpp/community_detection_online.md",tags:[],version:"current",frontMatter:{id:"community-detection-online",title:"community_detection_online",sidebar_label:"community_detection_online"},sidebar:"mage",previous:{title:"community_detection",permalink:"/docs/mage/query-modules/cpp/community-detection"},next:{title:"cycles",permalink:"/docs/mage/query-modules/cpp/cycles"}},u={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>set(directed, weighted, similarity_threshold, exponent, min_value, weight_property, w_selfloop, max_iterations, max_updates)</code>",id:"setdirected-weighted-similarity_threshold-exponent-min_value-weight_property-w_selfloop-max_iterations-max_updates",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"<code>get()</code>",id:"get",level:3},{value:"Output:",id:"output-1",level:4},{value:"Usage:",id:"usage-1",level:4},{value:"<code>update(createdVertices, createdEdges, updatedVertices, updatedEdges, deletedVertices, deletedEdges)</code>",id:"updatecreatedvertices-creatededges-updatedvertices-updatededges-deletedvertices-deletededges",level:3},{value:"Input:",id:"input-1",level:4},{value:"Output:",id:"output-2",level:4},{value:"Usage:",id:"usage-2",level:4},{value:"<code>reset()</code>",id:"reset",level:3},{value:"Output:",id:"output-3",level:4},{value:"Usage:",id:"usage-3",level:4},{value:"Example",id:"example",level:2}],m=e=>{let{children:t,color:a}=e;return(0,i.kt)("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},c={toc:p,Highlight:m};function g(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/cpp/community_detection_module/community_detection_online_module.cpp"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-community_detection_online-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"This query module implements the ",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1305.2006"},"LabelRankT"),"\ndynamic community detection algorithm."),(0,i.kt)("p",null,"LabelRankT belongs to the ",(0,i.kt)("em",{parentName:"p"},"label propagation")," family of community detection\nalgorithms and thus rests upon the idea that individual nodes learn from their\nneighbors what community they belong to."),(0,i.kt)("p",null,"Being ",(0,i.kt)("em",{parentName:"p"},"dynamic")," and ",(0,i.kt)("em",{parentName:"p"},"efficient"),", the algorithm is suitable for large-scale\ngraphs. It runs in ",(0,i.kt)("em",{parentName:"p"},"O(m)")," time and guarantees ",(0,i.kt)("em",{parentName:"p"},"O(mn)")," space complexity, where\n",(0,i.kt)("em",{parentName:"p"},"m")," and ",(0,i.kt)("em",{parentName:"p"},"n")," are the counts of vertices and edges in the graph, respectively."),(0,i.kt)("p",null,"Dynamic algorithms such as LabelRankT are especially suited for graph streaming\nsolutions such as Memgraph. As updates arrive in a stream, it avoids redundant\nwork by only processing the portion of the graph modified by the update."),(0,i.kt)("p",null,"Furthermore, the algorithm improves upon earlier label propagation methods by\nbeing deterministic; its results are replicable. Taking into account edge weight\nand directedness generally yields better community quality than similar methods,\nand it extends LabelRankT\u2019s compatibility to a wider set of graphs."),(0,i.kt)("p",null,(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," ",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1305.2006"},"LabelRankT: Incremental Community Detection in Dynamic Networks via Label\nPropagation"),", Xie, Jierui et al."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Trait"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Module type")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"algorithm")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Implementation")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"C++")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Graph direction")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"directed"))," / ",(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"undirected")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Edge weights")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"weighted"))," / ",(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"unweighted")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Parallelism")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(m,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"sequential")))))),(0,i.kt)("h2",{id:"procedures"},"Procedures"),(0,i.kt)("h3",{id:"setdirected-weighted-similarity_threshold-exponent-min_value-weight_property-w_selfloop-max_iterations-max_updates"},(0,i.kt)("inlineCode",{parentName:"h3"},"set(directed, weighted, similarity_threshold, exponent, min_value, weight_property, w_selfloop, max_iterations, max_updates)")),(0,i.kt)("p",null,"Performs dynamic community detection using the LabelRankT algorithm."),(0,i.kt)("p",null,"The default values of the ",(0,i.kt)("inlineCode",{parentName:"p"},"similarity_threshold"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"exponent")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"min_value"),"\nparameters are not universally applicable, and the actual values should be\ndetermined experimentally. This is especially pertinent to setting the\n",(0,i.kt)("inlineCode",{parentName:"p"},"min_value")," parameter. For example, with the default ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"1/10"))," value, vertices\nof degree greater than 10 are at risk of not being assigned to any community and\nthe user should check if that is indeed the case."),(0,i.kt)("h4",{id:"input"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directed: boolean (default=False)")," \u27a1 Specifies whether the graph is directed. If not set,\nthe graph is treated as undirected."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weighted: boolean (default=False)")," \u27a1 Specifies whether the graph is weighted. If not set,\nthe graph is considered unweighted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"similarity_threshold: double (default=0.7)")," \u27a1 Maximum similarity between node\u2019s and\nits neighbors\u2019 communities for the node to be updated in the ongoing\niteration."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exponent: double (default=4)")," \u27a1 Power which community probability vectors are raised\nelementwise to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min_value: double (default=0.1)")," \u27a1 Smallest community probability that is not pruned\nbetween iterations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'weight_property: string (default="weight")')," For directed graphs, the values at the given\nedge property are used as weights in the community detection algorithm."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"w_selfloop: double (default=1)")," \u27a1 Each vertex has a self-loop added to smooth the\nlabel propagation. This parameter specifies the weight assigned to the\nself-loops. If the graph is unweighted, this value is ignored.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_iterations: integer (default=100)")," \u27a1 Maximum number of iterations to run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_updates: integer (default=5)")," \u27a1 Maximum number of updates to any node\u2019s community\nprobabilities.")),(0,i.kt)("h4",{id:"output"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 Graph node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community_id: integer")," \u27a1 Community ID. If the node is not associated with any\ncommunity, defaults to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"-1")),".")),(0,i.kt)("h4",{id:"usage"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL community_detection_online.set(False, False, 0.7, 4.0, 0.1, "weight", 1, 100, 5)\nYIELD node, community_id;\n')),(0,i.kt)("h3",{id:"get"},(0,i.kt)("inlineCode",{parentName:"h3"},"get()")),(0,i.kt)("p",null,"Returns the latest previously calculated community detection results. If there\nare none, defaults to calling ",(0,i.kt)("inlineCode",{parentName:"p"},"set()")," with default parameters."),(0,i.kt)("h4",{id:"output-1"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 Graph node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community_id: integer")," \u27a1 Community ID. Defaults to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"-1"))," if the node does not belong to any community.")),(0,i.kt)("h4",{id:"usage-1"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL community_detection_online.get()\nYIELD node, community_id;\n")),(0,i.kt)("h3",{id:"updatecreatedvertices-creatededges-updatedvertices-updatededges-deletedvertices-deletededges"},(0,i.kt)("inlineCode",{parentName:"h3"},"update(createdVertices, createdEdges, updatedVertices, updatedEdges, deletedVertices, deletedEdges)")),(0,i.kt)("p",null,"Dynamically updates previously calculated community detection results based on\nchanges applied in the latest graph update and returns the results."),(0,i.kt)("h4",{id:"input-1"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createdVertices: mgp.List[mgp.Vertex]")," \u27a1 Vertices created in the latest graph\nupdate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createdEdges: mgp.List[mgp.Edge]")," \u27a1 Edges created in the latest graph update."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updatedVertices: mgp.List[mgp.Vertex]")," \u27a1 Vertices updated in the latest graph\nupdate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updatedEdges: mgp.List[mgp.Edge]")," \u27a1 Edges updated in the latest graph update."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deletedVertices: mgp.List[mgp.Vertex]")," \u27a1 Vertices deleted in the latest graph\nupdate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deletedEdges: mgp.List[mgp.Edge]")," \u27a1 Edges deleted in the latest graph update.")),(0,i.kt)("h4",{id:"output-2"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 Graph node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community_id: integer")," \u27a1 Community ID. If the node is not associated with any\ncommunity, defaults to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"-1")),".")),(0,i.kt)("h4",{id:"usage-2"},"Usage:"),(0,i.kt)("p",null,"As there are a total of six complex obligatory parameters, setting the\nparameters by hand might be cumbersome. The recommended use of this method is to\ncall it within a\n",(0,i.kt)("a",{parentName:"p",href:"https://memgraph.com/docs/memgraph/database-functionalities/triggers"},"trigger"),",\nmaking sure beforehand that all ",(0,i.kt)("a",{parentName:"p",href:"https://memgraph.com/docs/memgraph/database-functionalities/triggers/#predefined-variables"},"predefined\nvariables"),"\nare available:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER sample_trigger BEFORE COMMIT\nEXECUTE CALL community_detection_online.update(createdVertices, createdEdges, updatedVertices, updatedEdges, deletedVertices, deletedEdges) YIELD node, community_id;\n")),(0,i.kt)("p",null,"Communities calculated by ",(0,i.kt)("inlineCode",{parentName:"p"},"update()")," are also accessible by subsequently calling\n",(0,i.kt)("inlineCode",{parentName:"p"},"get()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER sample_trigger BEFORE COMMIT\nEXECUTE CALL community_detection_online.update(createdVertices, createdEdges, updatedVertices, updatedEdges, deletedVertices, deletedEdges) YIELD *;\n\nCALL community_detection_online.get()\nYIELD node, community_id\nRETURN node.id AS node_id, community_id\nORDER BY node_id;\n")),(0,i.kt)("h3",{id:"reset"},(0,i.kt)("inlineCode",{parentName:"h3"},"reset()")),(0,i.kt)("p",null,"Resets the algorithm to its initial state."),(0,i.kt)("h4",{id:"output-3"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message: string")," \u27a1 Reports whether the algorithm was successfully reset.")),(0,i.kt)("h4",{id:"usage-3"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL community_detection_online.reset() YIELD message;\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(r.Z,{groupId:"example",defaultValue:"visualization",values:[{label:"Step 1: Input graph",value:"visualization"},{label:"Step 2: Set trigger",value:"cypher-preset"},{label:"Step 3: Load commands",value:"cypher-load"},{label:"Step 4: Running command",value:"run"},{label:"Step 5: Results",value:"result"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"visualization",mdxType:"TabItem"},(0,i.kt)("img",{src:a(35738).Z})),(0,i.kt)(l.Z,{value:"cypher-preset",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE TRIGGER community_detection_online_trigger BEFORE COMMIT\nEXECUTE CALL community_detection_online.update(createdVertices, createdEdges, updatedVertices, updatedEdges, deletedVertices, deletedEdges) YIELD node, community_id\nSET node.community_id = community_id;\n"))),(0,i.kt)(l.Z,{value:"cypher-load",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"MERGE (a: Node {id: 0}) MERGE (b: Node {id: 1}) CREATE (a)-[r: Relation]->(b);\nMERGE (a: Node {id: 0}) MERGE (b: Node {id: 2}) CREATE (a)-[r: Relation]->(b);\nMERGE (a: Node {id: 1}) MERGE (b: Node {id: 2}) CREATE (a)-[r: Relation]->(b);\nMERGE (a: Node {id: 2}) MERGE (b: Node {id: 3}) CREATE (a)-[r: Relation]->(b);\nMERGE (a: Node {id: 3}) MERGE (b: Node {id: 4}) CREATE (a)-[r: Relation]->(b);\nMERGE (a: Node {id: 3}) MERGE (b: Node {id: 5}) CREATE (a)-[r: Relation]->(b);\nMERGE (a: Node {id: 4}) MERGE (b: Node {id: 5}) CREATE (a)-[r: Relation]->(b);\n"))),(0,i.kt)(l.Z,{value:"run",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL community_detection_online.get()\nYIELD node, community_id\nRETURN node.id AS node_id, community_id\nORDER BY node_id;\n"))),(0,i.kt)(l.Z,{value:"result",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"+-------------------------+-------------------------+\n| node_id                 | community_id            |\n+-------------------------+-------------------------+\n| 0                       | 1                       |\n| 1                       | 1                       |\n| 2                       | 1                       |\n| 3                       | 2                       |\n| 4                       | 2                       |\n| 5                       | 2                       |\n+-------------------------+-------------------------+\n")))))}g.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),i=a(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(87462),i=a(67294),r=a(86010),l=a(72389),o=a(67392),d=a(7094),s=a(12466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:a,block:l,defaultValue:m,values:c,groupId:g,className:h}=e,k=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,o.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===m?m:m??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,d.U)(),[E,_]=(0,i.useState)(N),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,s.o5)();if(null!=g){const e=f[g];null!=e&&e!==E&&y.some((t=>t.value===e))&&_(e)}const w=e=>{const t=e.currentTarget,a=C.indexOf(t),n=y[a].value;n!==E&&(T(t),_(n),null!=g&&v(g,String(n)))},x=e=>{var t;let a=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;a=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;a=C[t]??C[C.length-1];break}}null==(t=a)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},h)},y.map((e=>{let{value:t,label:a,attributes:l}=e;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:e=>C.push(e),onKeyDown:x,onClick:w},l,{className:(0,r.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":E===t})}),a??t)}))),a?(0,i.cloneElement)(k.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==E})))))}function c(e){const t=(0,l.Z)();return i.createElement(m,(0,n.Z)({key:String(t)},e))}},35738:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/community-detection-online-1-8bc46fdca771aa123098386c57150e41.png"}}]);