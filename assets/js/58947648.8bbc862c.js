"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[47103],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),p=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=p(e.components);return a.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=n,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(g,l(l({ref:r},c),{},{components:t})):a.createElement(g,l({ref:r},c))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=d;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},68871:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(87462),n=(t(67294),t(3905));const o={sidebar_label:"nx_translator",title:"gqlalchemy.transformations.translators.nx_translator"},l=void 0,s={unversionedId:"reference/transformations/translators/nx_translator",id:"reference/transformations/translators/nx_translator",title:"gqlalchemy.transformations.translators.nx_translator",description:"NetworkXCypherBuilder Objects",source:"@site/gqlalchemy/reference/transformations/translators/nx_translator.md",sourceDirName:"reference/transformations/translators",slug:"/reference/transformations/translators/nx_translator",permalink:"/docs/gqlalchemy/reference/transformations/translators/nx_translator",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/transformations/translators/nx_translator.md",tags:[],version:"current",frontMatter:{sidebar_label:"nx_translator",title:"gqlalchemy.transformations.translators.nx_translator"},sidebar:"gqlalchemy",previous:{title:"dgl_translator",permalink:"/docs/gqlalchemy/reference/transformations/translators/dgl_translator"},next:{title:"pyg_translator",permalink:"/docs/gqlalchemy/reference/transformations/translators/pyg_translator"}},i={},p=[{value:"NetworkXCypherBuilder Objects",id:"networkxcypherbuilder-objects",level:2},{value:"yield_queries",id:"yield_queries",level:4},{value:"yield_query_groups",id:"yield_query_groups",level:4},{value:"NxTranslator Objects",id:"nxtranslator-objects",level:2},{value:"to_cypher_queries",id:"to_cypher_queries",level:4},{value:"nx_graph_to_memgraph_parallel",id:"nx_graph_to_memgraph_parallel",level:4},{value:"get_instance",id:"get_instance",level:4}],c={toc:p};function u(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"networkxcypherbuilder-objects"},"NetworkXCypherBuilder Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class NetworkXCypherBuilder()\n")),(0,n.kt)("h4",{id:"yield_queries"},"yield","_","queries"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def yield_queries(graph: nx.Graph) -> Iterator[str]\n")),(0,n.kt)("p",null,"Generates Cypher queries for creating a graph."),(0,n.kt)("h4",{id:"yield_query_groups"},"yield","_","query","_","groups"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def yield_query_groups(graph: nx.Graph) -> List[Iterator[str]]\n")),(0,n.kt)("p",null,"Generates Cypher queries for creating a graph by query groups."),(0,n.kt)("h2",{id:"nxtranslator-objects"},"NxTranslator Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class NxTranslator(Translator)\n")),(0,n.kt)("p",null,"Uses original ids from Memgraph. Labels are encoded as properties. Since Networkx allows\nthat nodes have properties of different dimensionality, this modules makes use of it and stores properties\nas dictionary entries. All properties are saved to Networkx data structure."),(0,n.kt)("h4",{id:"to_cypher_queries"},"to","_","cypher","_","queries"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher_queries(graph: nx.Graph,\n                      config: NetworkXCypherConfig = None) -> Iterator[str]\n")),(0,n.kt)("p",null,"Generates a Cypher query for creating a graph."),(0,n.kt)("h4",{id:"nx_graph_to_memgraph_parallel"},"nx","_","graph","_","to","_","memgraph","_","parallel"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def nx_graph_to_memgraph_parallel(graph: nx.Graph,\n                                  config: NetworkXCypherConfig = None) -> None\n")),(0,n.kt)("p",null,"Generates Cypher queries and inserts data into Memgraph in parallel."),(0,n.kt)("h4",{id:"get_instance"},"get","_","instance"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_instance()\n")),(0,n.kt)("p",null,"Creates Networx instance of the graph from the data residing inside Memgraph. Since Networkx doesn","'","t support labels in a way Memgraph does, labels\nare encoded as a node and edge properties."))}u.isMDXComponent=!0}}]);