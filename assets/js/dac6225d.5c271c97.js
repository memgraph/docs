"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78217],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),_=d(a),u=r,c=_["".concat(s,".").concat(u)]||_[u]||h[u]||i;return a?n.createElement(c,l(l({ref:t},p),{},{components:a})):n.createElement(c,l({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=_;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}_.displayName="MDXCreateElement"},48645:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return h}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),l=["components"],o={sidebar_label:"memgraph",title:"gqlalchemy.memgraph"},s=void 0,d={unversionedId:"reference/memgraph",id:"reference/memgraph",title:"gqlalchemy.memgraph",description:"Memgraph Objects",source:"@site/gqlalchemy/reference/memgraph.md",sourceDirName:"reference",slug:"/reference/memgraph",permalink:"/docs/gqlalchemy/reference/memgraph",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/memgraph.md",tags:[],version:"current",frontMatter:{sidebar_label:"memgraph",title:"gqlalchemy.memgraph"},sidebar:"gqlalchemy",previous:{title:"instance_runner",permalink:"/docs/gqlalchemy/reference/instance_runner"},next:{title:"models",permalink:"/docs/gqlalchemy/reference/models"}},p={},h=[{value:"Memgraph Objects",id:"memgraph-objects",level:2},{value:"execute_and_fetch",id:"execute_and_fetch",level:4},{value:"execute",id:"execute",level:4},{value:"create_index",id:"create_index",level:4},{value:"drop_index",id:"drop_index",level:4},{value:"get_indexes",id:"get_indexes",level:4},{value:"ensure_indexes",id:"ensure_indexes",level:4},{value:"drop_indexes",id:"drop_indexes",level:4},{value:"create_constraint",id:"create_constraint",level:4},{value:"drop_constraint",id:"drop_constraint",level:4},{value:"get_constraints",id:"get_constraints",level:4},{value:"ensure_constraints",id:"ensure_constraints",level:4},{value:"create_stream",id:"create_stream",level:4},{value:"start_stream",id:"start_stream",level:4},{value:"get_streams",id:"get_streams",level:4},{value:"drop_stream",id:"drop_stream",level:4},{value:"drop_database",id:"drop_database",level:4},{value:"create_trigger",id:"create_trigger",level:4},{value:"get_triggers",id:"get_triggers",level:4},{value:"drop_trigger",id:"drop_trigger",level:4},{value:"drop_triggers",id:"drop_triggers",level:4},{value:"new_connection",id:"new_connection",level:4},{value:"init_disk_storage",id:"init_disk_storage",level:4},{value:"remove_on_disk_storage",id:"remove_on_disk_storage",level:4},{value:"get_variable_assume_one",id:"get_variable_assume_one",level:4},{value:"create_node",id:"create_node",level:4},{value:"save_node",id:"save_node",level:4},{value:"save_nodes",id:"save_nodes",level:4},{value:"save_node_with_id",id:"save_node_with_id",level:4},{value:"load_node",id:"load_node",level:4},{value:"load_node_with_all_properties",id:"load_node_with_all_properties",level:4},{value:"load_node_with_id",id:"load_node_with_id",level:4},{value:"load_relationship",id:"load_relationship",level:4},{value:"load_relationship_with_id",id:"load_relationship_with_id",level:4},{value:"load_relationship_with_start_node_id_and_end_node_id",id:"load_relationship_with_start_node_id_and_end_node_id",level:4},{value:"save_relationship",id:"save_relationship",level:4},{value:"save_relationships",id:"save_relationships",level:4},{value:"save_relationship_with_id",id:"save_relationship_with_id",level:4},{value:"create_relationship",id:"create_relationship",level:4}],_={toc:h};function u(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},_,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"memgraph-objects"},"Memgraph Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Memgraph()\n")),(0,i.kt)("h4",{id:"execute_and_fetch"},"execute","_","and","_","fetch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def execute_and_fetch(query: str, connection: Connection = None) -> Iterator[Dict[str, Any]]\n")),(0,i.kt)("p",null,"Executes Cypher query and returns iterator of results."),(0,i.kt)("h4",{id:"execute"},"execute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def execute(query: str, connection: Connection = None) -> None\n")),(0,i.kt)("p",null,"Executes Cypher query without returning any results."),(0,i.kt)("h4",{id:"create_index"},"create","_","index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_index(index: MemgraphIndex) -> None\n")),(0,i.kt)("p",null,"Creates an index (label or label-property type) in the database"),(0,i.kt)("h4",{id:"drop_index"},"drop","_","index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_index(index: MemgraphIndex) -> None\n")),(0,i.kt)("p",null,"Drops an index (label or label-property type) in the database"),(0,i.kt)("h4",{id:"get_indexes"},"get","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_indexes() -> List[MemgraphIndex]\n")),(0,i.kt)("p",null,"Returns a list of all database indexes (label and label-property types)"),(0,i.kt)("h4",{id:"ensure_indexes"},"ensure","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def ensure_indexes(indexes: List[MemgraphIndex]) -> None\n")),(0,i.kt)("p",null,"Ensures that database indexes match input indexes"),(0,i.kt)("h4",{id:"drop_indexes"},"drop","_","indexes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_indexes() -> None\n")),(0,i.kt)("p",null,"Drops all indexes in the database"),(0,i.kt)("h4",{id:"create_constraint"},"create","_","constraint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_constraint(index: MemgraphConstraint) -> None\n")),(0,i.kt)("p",null,"Creates a constraint (label or label-property type) in the database"),(0,i.kt)("h4",{id:"drop_constraint"},"drop","_","constraint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_constraint(index: MemgraphConstraint) -> None\n")),(0,i.kt)("p",null,"Drops a constraint (label or label-property type) in the database"),(0,i.kt)("h4",{id:"get_constraints"},"get","_","constraints"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_constraints() -> List[Union[MemgraphConstraintExists, MemgraphConstraintUnique]]\n")),(0,i.kt)("p",null,"Returns a list of all database constraints (label and label-property types)"),(0,i.kt)("h4",{id:"ensure_constraints"},"ensure","_","constraints"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def ensure_constraints(constraints: List[Union[MemgraphConstraintExists, MemgraphConstraintUnique]]) -> None\n")),(0,i.kt)("p",null,"Ensures that database constraints match input constraints"),(0,i.kt)("h4",{id:"create_stream"},"create","_","stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_stream(stream: MemgraphStream) -> None\n")),(0,i.kt)("p",null,"Create a stream"),(0,i.kt)("h4",{id:"start_stream"},"start","_","stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def start_stream(stream: MemgraphStream) -> None\n")),(0,i.kt)("p",null,"Start a stream"),(0,i.kt)("h4",{id:"get_streams"},"get","_","streams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_streams() -> List[str]\n")),(0,i.kt)("p",null,"Returns a list of all streams"),(0,i.kt)("h4",{id:"drop_stream"},"drop","_","stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_stream(stream: MemgraphStream) -> None\n")),(0,i.kt)("p",null,"Drop a stream"),(0,i.kt)("h4",{id:"drop_database"},"drop","_","database"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_database()\n")),(0,i.kt)("p",null,"Drops database by removing all nodes and edges"),(0,i.kt)("h4",{id:"create_trigger"},"create","_","trigger"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_trigger(trigger: MemgraphTrigger) -> None\n")),(0,i.kt)("p",null,"Creates a trigger"),(0,i.kt)("h4",{id:"get_triggers"},"get","_","triggers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_triggers() -> List[str]\n")),(0,i.kt)("p",null,"Returns a list of all database triggers"),(0,i.kt)("h4",{id:"drop_trigger"},"drop","_","trigger"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_trigger(trigger: MemgraphTrigger) -> None\n")),(0,i.kt)("p",null,"Drop a trigger"),(0,i.kt)("h4",{id:"drop_triggers"},"drop","_","triggers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def drop_triggers() -> None\n")),(0,i.kt)("p",null,"Drops all triggers in the database"),(0,i.kt)("h4",{id:"new_connection"},"new","_","connection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def new_connection() -> Connection\n")),(0,i.kt)("p",null,"Creates new Memgraph connection"),(0,i.kt)("h4",{id:"init_disk_storage"},"init","_","disk","_","storage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def init_disk_storage(on_disk_db: OnDiskPropertyDatabase) -> None\n")),(0,i.kt)("p",null,"Adds and OnDiskPropertyDatabase to Memgraph so that any property\nthat has a Field(on_disk=True) can be stored to and loaded from\nan OnDiskPropertyDatabase."),(0,i.kt)("h4",{id:"remove_on_disk_storage"},"remove","_","on","_","disk","_","storage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def remove_on_disk_storage() -> None\n")),(0,i.kt)("p",null,"Removes the OnDiskPropertyDatabase from Memgraph"),(0,i.kt)("h4",{id:"get_variable_assume_one"},"get","_","variable","_","assume","_","one"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_variable_assume_one(query_result: Iterator[Dict[str, Any]], variable_name: str) -> Any\n")),(0,i.kt)("p",null,"Returns a single result from the query_result (usually gotten from\nthe execute_and_fetch function).\nIf there is more than one result, raises a GQLAlchemyError."),(0,i.kt)("h4",{id:"create_node"},"create","_","node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_node(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Creates a node in Memgraph from the ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," object."),(0,i.kt)("h4",{id:"save_node"},"save","_","node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_node(node: Node) -> Node\n")),(0,i.kt)("p",null,"Saves node to Memgraph.\nIf the node._id is not None it fetches the node with the same id from\nMemgraph and updates it","'","s fields.\nIf the node has unique fields it fetches the nodes with the same unique\nfields from Memgraph and updates it","'","s fields.\nOtherwise it creates a new node with the same properties.\nNull properties are ignored."),(0,i.kt)("h4",{id:"save_nodes"},"save","_","nodes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_nodes(nodes: List[Node]) -> None\n")),(0,i.kt)("p",null,"Saves a list of nodes to Memgraph."),(0,i.kt)("h4",{id:"save_node_with_id"},"save","_","node","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_node_with_id(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Saves a node in Memgraph using the internal Memgraph id."),(0,i.kt)("h4",{id:"load_node"},"load","_","node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_node(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Loads a node from Memgraph.\nIf the node._id is not None it fetches the node from Memgraph with that\ninternal id.\nIf the node has unique fields it fetches the node from Memgraph with\nthose unique fields set.\nOtherwise it tries to find any node in Memgraph that has all properties\nset to exactly the same values.\nIf no node is found or no properties are set it raises a GQLAlchemyError."),(0,i.kt)("h4",{id:"load_node_with_all_properties"},"load","_","node","_","with","_","all","_","properties"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_node_with_all_properties(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Loads a node from Memgraph with all equal property values."),(0,i.kt)("h4",{id:"load_node_with_id"},"load","_","node","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_node_with_id(node: Node) -> Optional[Node]\n")),(0,i.kt)("p",null,"Loads a node with the same internal Memgraph id."),(0,i.kt)("h4",{id:"load_relationship"},"load","_","relationship"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Returns a relationship loaded from Memgraph.\nIf the relationship._id is not None it fetches the relationship from\nMemgraph that has the same internal id.\nOtherwise it returns the relationship whose relationship._start_node_id\nand relationship._end_node_id and all relationship properties that\nare not None match the relationship in Memgraph.\nIf there is no relationship like that in Memgraph, or if there are\nmultiple relationships like that in Memgraph, throws GQLAlchemyError."),(0,i.kt)("h4",{id:"load_relationship_with_id"},"load","_","relationship","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship_with_id(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Loads a relationship from Memgraph using the internal id."),(0,i.kt)("h4",{id:"load_relationship_with_start_node_id_and_end_node_id"},"load","_","relationship","_","with","_","start","_","node","_","id","_","and","_","end","_","node","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def load_relationship_with_start_node_id_and_end_node_id(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Loads a relationship from Memgraph using start node and end node id\nfor which all properties of the relationship that are not None match."),(0,i.kt)("h4",{id:"save_relationship"},"save","_","relationship"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Saves a relationship to Memgraph.\nIf relationship._id is not None it finds the relationship in Memgraph\nand updates it","'","s properties with the values in ",(0,i.kt)("inlineCode",{parentName:"p"},"relationship"),".\nIf relationship._id is None, it creates a new relationship.\nIf you want to set a relationship._id instead of creating a new\nrelationship, use ",(0,i.kt)("inlineCode",{parentName:"p"},"load_relationship")," first."),(0,i.kt)("h4",{id:"save_relationships"},"save","_","relationships"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationships(relationships: List[Relationship]) -> None\n")),(0,i.kt)("p",null,"Saves a list of relationships to Memgraph."),(0,i.kt)("h4",{id:"save_relationship_with_id"},"save","_","relationship","_","with","_","id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def save_relationship_with_id(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Saves a relationship in Memgraph using the relationship._id."),(0,i.kt)("h4",{id:"create_relationship"},"create","_","relationship"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def create_relationship(relationship: Relationship) -> Optional[Relationship]\n")),(0,i.kt)("p",null,"Creates a new relationship in Memgraph."))}u.isMDXComponent=!0}}]);