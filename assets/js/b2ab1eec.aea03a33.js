"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6314],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},35585:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],l={id:"cloud-connect",title:"Connect to a Cloud instances",sidebar_label:"Connect to Cloud"},s=void 0,p={unversionedId:"cloud-connect",id:"cloud-connect",title:"Connect to a Cloud instances",description:"You can connect to an instance running within the Memgraph Cloud project via",source:"@site/cloud/cloud-connect.md",sourceDirName:".",slug:"/cloud-connect",permalink:"/docs/memgraph-cloud/cloud-connect",editUrl:"https://github.com/memgraph/docs/tree/master/cloud/cloud-connect.md",tags:[],version:"current",frontMatter:{id:"cloud-connect",title:"Connect to a Cloud instances",sidebar_label:"Connect to Cloud"},sidebar:"cloud",previous:{title:"Cloud projects",permalink:"/docs/memgraph-cloud/cloud-projects"},next:{title:"Payment",permalink:"/docs/memgraph-cloud/payment"}},c={},m=[{value:"Connect with Memgraph Lab",id:"connect-with-memgraph-lab",level:2},{value:"Connect with <code>mgconsole</code>",id:"connect-with-mgconsole",level:2},{value:"Connect with drivers",id:"connect-with-drivers",level:2},{value:"Python",id:"python",level:3},{value:"Rust",id:"rust",level:3},{value:"C++",id:"c",level:3},{value:"Java",id:"java",level:3},{value:"C#",id:"c-1",level:3},{value:"Golang",id:"golang",level:3},{value:"PHP",id:"php",level:3},{value:"node.js",id:"nodejs",level:3}],d={toc:m};function u(e){var n=e.components,l=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can connect to an instance running within the Memgraph Cloud project via\n",(0,a.kt)("strong",{parentName:"p"},"Memgraph Lab"),", a visual interface, ",(0,a.kt)("strong",{parentName:"p"},"mgconsole"),", command-line interface, or\none of many ",(0,a.kt)("strong",{parentName:"p"},"drivers")," below. "),(0,a.kt)("p",null,"Fell free to watch a demo video made for the Cloud launch that will explain\nhow to connect to Memgraph using Memgraph Cloud: "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/Tt5KPKylU8k?t=1233",title:"Connect to Memgraph from Memgraph Cloud"},(0,a.kt)("img",{alt:"paused-project",src:t(89321).Z,style:{width:"30%"}}))),(0,a.kt)("h2",{id:"connect-with-memgraph-lab"},"Connect with Memgraph Lab"),(0,a.kt)("p",null,"Memgraph Lab comes in two flavors, as a desktop application and as an in-browser\napplication. "),(0,a.kt)("p",null,"To connect using the in-browser application:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("strong",{parentName:"li"},"Projects")," in the left sidebar. "),(0,a.kt)("li",{parentName:"ol"},"Locate ",(0,a.kt)("strong",{parentName:"li"},"Connect via client")," section."),(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("strong",{parentName:"li"},"Connect in browser")," button to open Memgraph Lab in your browser. The\nlogin form will be automatically filled with the connection data, except for\nthe password.")),(0,a.kt)("img",{src:t(59668).Z,className:"imgBorder"}),(0,a.kt)("p",null,"To use the desktop version of Memgraph Lab:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Download ",(0,a.kt)("a",{parentName:"li",href:"https://memgraph.com/download/#memgraph-lab"},"Memgraph Lab"),"."),(0,a.kt)("li",{parentName:"ol"},"Open Memgraph Lab and switch to ",(0,a.kt)("strong",{parentName:"li"},"Connect Manually"),"."),(0,a.kt)("li",{parentName:"ol"},"Extend the ",(0,a.kt)("strong",{parentName:"li"},"Advanced Settings")," and fill out the connection fields with the\ndata from the ",(0,a.kt)("strong",{parentName:"li"},"Connect via client")," section from the Memgraph Cloud project. "),(0,a.kt)("li",{parentName:"ol"},"Enable SSL ",(0,a.kt)("strong",{parentName:"li"},"Encryption")," and ",(0,a.kt)("strong",{parentName:"li"},"Connect now"),".")),(0,a.kt)("h2",{id:"connect-with-mgconsole"},"Connect with ",(0,a.kt)("inlineCode",{parentName:"h2"},"mgconsole")),(0,a.kt)("p",null,"To connect to Cloud via a command-line interface ",(0,a.kt)("strong",{parentName:"p"},"mgconsole"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/memgraph/mgconsole"},"Build ",(0,a.kt)("strong",{parentName:"a"},"mgconsole")," from source")," or\n",(0,a.kt)("a",{parentName:"li",href:"https://memgraph.com/download/#mgconsole"},"download it")),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"mgconsole")," with the ",(0,a.kt)("inlineCode",{parentName:"li"},"--host"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--port"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--username"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--password")," and\n",(0,a.kt)("inlineCode",{parentName:"li"},"use-ssl")," parameters set to the values provided in the  ",(0,a.kt)("strong",{parentName:"li"},"Connect via\nconsole")," section of the Memgraph Cloud project.")),(0,a.kt)("h2",{id:"connect-with-drivers"},"Connect with drivers"),(0,a.kt)("h3",{id:"python"},"Python"),(0,a.kt)("p",null,"Step 1: Install the driver with pip or poetry:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pip install gqlalchemy\n# or with Poetry: poetry add gqlalchemy\n\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details (",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS"),") before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from gqlalchemy import Memgraph\n\nMEMGRAPH_HOST = 'MEMGRAPH_HOST_ADDRESS'\nMEMGRAPH_PORT = 7687\nMEMGRAPH_USERNAME = 'YOUR_MEMGRAPH_USERNAME'\n# Place your Memgraph password that was created during Project creation\nMEMGRAPH_PASSWORD = 'YOUR_MEMGRAPH_PASSWORD'\n\ndef hello_memgraph(host: str, port: int, username: str, password: str):\n    connection = Memgraph(host, port, username, password, encrypted=True)\n    results = connection.execute_and_fetch(\n        'CREATE (n:FirstNode { message: \"Hello Memgraph from Python!\" }) RETURN n.message AS message'\n    )\n    print(\"Created node with message:\", next(results)[\"message\"])\n\nif __name__ == \"__main__\":\n    hello_memgraph(MEMGRAPH_HOST, MEMGRAPH_PORT, MEMGRAPH_USERNAME, MEMGRAPH_PASSWORD)\n\n")),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/gqlalchemy/how-to-guides"},"GQLAlchemy Quick Start Guide"),"."),(0,a.kt)("h3",{id:"rust"},"Rust"),(0,a.kt)("p",null,"Rust driver ",(0,a.kt)("inlineCode",{parentName:"p"},"rsmgclient")," is implemented as a wrapper around ",(0,a.kt)("inlineCode",{parentName:"p"},"mgclient"),", the official Memgraph client library. You will need to install ",(0,a.kt)("inlineCode",{parentName:"p"},"mgclient")," before using ",(0,a.kt)("inlineCode",{parentName:"p"},"rsmgclient"),"."),(0,a.kt)("p",null,"Step 1: Install ",(0,a.kt)("inlineCode",{parentName:"p"},"mgclient"),", which is a C library interface for the Memgraph database. Follow the installation instructions from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mgclient"},"GitHub main page"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/memgraph/mgclient\n# Install the library by following the GitHub installation instructions\n")),(0,a.kt)("p",null,"Step 2: Add the following line to the Cargo.toml file under the line ","[dependencies]",":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'rsmgclient = "0.1.1"\n')),(0,a.kt)("p",null,"Step 3: Copy the following code and fill out the missing details (",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS"),") before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'use rsmgclient::{ConnectParams, Connection, SSLMode};\n\nfn main(){\n    // Parameters for connecting to database.\n    let connect_params = ConnectParams {\n        host: Some(String::from("MEMGRAPH_HOST_ADDRESS")),\n        port: 7687,\n        username: Some(String::from("YOUR_MEMGRAPH_USERNAME")),\n        password: Some(String::from("YOUR_MEMGRAPH_PASSWORD")),\n        sslmode: SSLMode::Require,\n        ..Default::default()\n    };\n\n    // Make a connection to the database.\n    let mut connection = match Connection::connect(&connect_params) {\n        Ok(c) => c,\n        Err(err) => panic!("Connect failed: {}", err)\n    };\n\n    // Execute a query.\n    let query = "CREATE (n:FirstNode {message: \'Hello Memgraph from Rust!\'}) RETURN id(n) AS nodeId, n.message AS message";\n    match connection.execute(query, None) {\n        Ok(c) => c,\n        Err(err) => panic!("Query failed: {}", err)\n    };\n\n    match connection.fetchall() {\n        Ok(records) => {\n            println!("Created node: {}", &records[0].values[1])\n        },\n        Err(err) => panic!("{}", err)\n    };\n}\n')),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/rust"},"Rust Quick Start Guide"),"."),(0,a.kt)("h3",{id:"c"},"C++"),(0,a.kt)("p",null,"Step 1: Install ",(0,a.kt)("inlineCode",{parentName:"p"},"mgclient"),", which is a C library interface for the Memgraph database. Follow the installation instructions from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mgclient"},"GitHub main page"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/memgraph/mgclient\n# Install the library by following the GitHub installation instructions\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details (",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS"),") before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#include <cstdlib>\n#include <iostream>\n\n#include <mgclient.hpp>\n\nint main(int argc, char *argv[]) {\n  mg::Client::Init();\n\n  mg::Client::Params params;\n  params.host = "MEMGRAPH_HOST_ADDRESS";\n  params.port = "7687";\n  params.username = "YOUR_MEMGRAPH_USERNAME";\n  params.password = "YOUR_MEMGRAPH_PASSWORD";\n  params.use_ssl = true;\n  auto client = mg::Client::Connect(params);\n\n  if (!client) {\n    std::cerr << "Failed to connect!\\n";\n    return 1;\n  }\n\n  if (!client->Execute("CREATE (n:FirstNode {message: \'Hello Memgraph from C++!\'}) RETURN n")) {\n    std::cerr << "Failed to execute query!\\n";\n    return 1;\n  }\n\n  while (const auto maybe_result = client->FetchOne()) {\n    const auto result = *maybe_result;\n    if (result.size() < 1) {\n      continue;\n    }\n    const auto value = result[0];\n    if (value.type() != mg::Value::Type::Node) {\n      continue;\n    }\n    const auto node = value.ValueNode();\n    const auto props = node.properties();\n    std::cout << "Created node: " << props["message"].ValueString() << std::endl;\n  }\n\n  // Deallocate the client because mg_finalize has to be called globally.\n  client.reset(nullptr);\n\n  mg::Client::Finalize();\n\n  return 0;\n}\n')),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/c-sharp"},"C# Quick Start Guide"),"."),(0,a.kt)("h3",{id:"java"},"Java"),(0,a.kt)("p",null,"Step 1: Add the following driver dependency in your ",(0,a.kt)("inlineCode",{parentName:"p"},"pom.xml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n  <groupId>org.neo4j.driver</groupId>\n  <artifactId>neo4j-java-driver</artifactId>\n  <version>4.1.1</version>\n</dependency>\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details (",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS"),") before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import org.neo4j.driver.AuthTokens;\nimport org.neo4j.driver.Driver;\nimport org.neo4j.driver.GraphDatabase;\nimport org.neo4j.driver.Session;\nimport org.neo4j.driver.Result;\nimport org.neo4j.driver.Transaction;\nimport org.neo4j.driver.TransactionWork;\n\nimport static org.neo4j.driver.Values.parameters;\n\npublic class HelloMemgraph implements AutoCloseable\n{\n    private final Driver driver;\n\n    public HelloMemgraph( String uri, String username, String password )\n    {\n        driver = GraphDatabase.driver( uri, AuthTokens.basic( username, password ) );\n    }\n\n    public void close() throws Exception\n    {\n        driver.close();\n    }\n\n    public void createAndPrintNode( final String message )\n    {\n        try ( Session session = driver.session() )\n        {\n            String nodeMessage = session.writeTransaction( new TransactionWork<String>()\n            {\n                @Override\n                public String execute( Transaction tx )\n                {\n                    Result result = tx.run( "CREATE (n:FirstNode {message: $message}) " +\n                                            "RETURN id(n) AS nodeId, n.message AS message",\n                            parameters( "message", message ) );\n                    return result.single().get( 1 ).asString();\n                }\n            } );\n            System.out.println( "Created node:", nodeMessage );\n        }\n    }\n\n    public static void main( String... args ) throws Exception\n    {\n        try ( HelloMemgraph program = new HelloMemgraph( "bolt+ssc://MEMGRAPH_HOST_ADDRESS:7687", "YOUR_MEMGRAPH_USERNAME", "YOUR_MEMGRAPH_PASSWORD" ) )\n        {\n            program.createAndPrintNode( "Hello Memgraph from Java!" );\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/java"},"Java Quick Start Guide"),"."),(0,a.kt)("h3",{id:"c-1"},"C#"),(0,a.kt)("p",null,"Step 1: Install the driver with Package Manager:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Install-Package Neo4j.Driver.Simple\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details (",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS"),") before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'using System;\nusing System.Linq;\nusing Neo4j.Driver;\n\nnamespace MemgraphApp\n{\n    public class Program : IDisposable\n    {\n        private readonly IDriver _driver;\n\n        public Program(string uri, string user, string password)\n        {\n            _driver = GraphDatabase.Driver(uri, AuthTokens.Basic(user, password));\n        }\n\n        public void CreateAndPrintNode(string message)\n        {\n            using (var session = _driver.Session())\n            {\n                var nodeMessage = session.WriteTransaction(tx =>\n                {\n                    var result = tx.Run("CREATE (n:FirstNode {message: $message}) " +\n                                        "RETURN id(n) AS nodeId, n.message AS message",\n                        new { message });\n                    return result.Single()[1].As<string>();\n                });\n                Console.WriteLine("Created node:", nodeMessage);\n            }\n        }\n\n        public void Dispose()\n        {\n            _driver?.Dispose();\n        }\n\n        public static void Main()\n        {\n            using (var program = new Program("bolt+ssc://MEMGRAPH_HOST_ADDRESS:7687", "YOUR_MEMGRAPH_USERNAME", "<YOUR_MEMGRAPH_PASSWORD>"))\n            {\n                program.CreateAndPrintNode("Hello Memgraph from C#!");\n            }\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"golang"},"Golang"),(0,a.kt)("p",null,"Step 1: Make sure your application has been set up to use go modules (there should be a ",(0,a.kt)("inlineCode",{parentName:"p"},"go.mod")," file in your application root). Add the driver with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"go get github.com/neo4j/neo4j-go-driver/neo4j\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details (",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS"),") before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package main\n\nimport "github.com/neo4j/neo4j-go-driver/v4/neo4j"\nimport "fmt"\n\nfunc main() {\n    driver, err := neo4j.NewDriver(\n        "bolt+ssc://MEMGRAPH_HOST_ADDRESS:7687",\n        neo4j.BasicAuth("YOUR_MEMGRAPH_USERNAME", "YOUR_MEMGRAPH_PASSWORD", ""))\n\n    if err != nil {\n        fmt.Println(err)\n    }\n    defer driver.Close()\n\n    session, err := driver.Session(neo4j.AccessModeWrite)\n    if err != nil {\n        fmt.Println(err)\n    }\n    defer session.Close()\n\n    message, err := session.WriteTransaction(func(transaction neo4j.Transaction) (interface{}, error) {\n        records, err := transaction.Run(\n            "CREATE (n:FirstNode {message: $message}) RETURN id(n) AS nodeId, n.message AS message",\n            map[string]interface{}{"message": "Hello Memgraph from Go!"})\n        if err != nil {\n            return nil, err\n        }\n\n        record, err := records.Single()\n        if err != nil {\n            return nil, err\n        }\n\n        return record.Values[1].(string), nil\n    })\n\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    fmt.Println("Created node:", message)\n}\n')),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/go"},"Go Quick Start Guide"),"."),(0,a.kt)("h3",{id:"php"},"PHP"),(0,a.kt)("p",null,"Step 1: Install the driver with composer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"composer require stefanak-michal/bolt\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details( ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS")," ) before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<?php\n$conn = new \\Bolt\\connection\\StreamSocket('MEMGRAPH_HOST_ADDRESS', '7687');\n$conn->setSslContextOptions([\n    'passphrase' => 'bolt',\n    'allow_self_signed' => true,\n    'verify_peer' => false,\n    'verify_peer_name' => false\n]);\n// Create new Bolt instance\n$bolt = new \\Bolt\\Bolt($conn);\n// Set Bolt protocol version if needed\n$bolt->setProtocolVersions(4.0);\n// Connect to database\n$bolt->init('MyClient/1.0', 'YOUR_MEMGRAPH_USERNAME', 'YOUR_MEMGRAPH_PASSWORD');\n\n// Execute query\n$res = $bolt->run(\n    'CREATE (n:FirstNode {message: $message}) RETURN id(n) AS nodeId, n.message AS message',\n    ['message' => 'Hello Memgraph from PHP!']\n);\n// Pull records from last query\n$rows = $bolt->pull();\n\necho 'Created node: ' . $rows[0][1];\n")),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/php"},"PHP Quick Start Guide"),"."),(0,a.kt)("h3",{id:"nodejs"},"node.js"),(0,a.kt)("p",null,"Step 1: Install the driver with npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install neo4j-driver\n")),(0,a.kt)("p",null,"Step 2: Copy the following code and fill out the missing details( ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_PASSWORD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"YOUR_MEMGRAPH_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MEMGRAPH_HOST_ADDRESS")," ) before running it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const neo4j = require('neo4j-driver')\n\nconst MEMGRAPH_URI = 'bolt+ssc://MEMGRAPH_HOST_ADDRESS:7687';\nconst MEMGRAPH_USERNAME = 'YOUR_MEMGRAPH_USERNAME';\n// Place your Memgraph password that was created during Project creation\nconst MEMGRAPH_PASSWORD = 'YOUR_MEMGRAPH_PASSWORD';\n\nconst helloMemgraph = async (uri, username, password) => {\n    const driver = neo4j.driver(uri, neo4j.auth.basic(username, password));\n\n    const session = driver.session();\n    const message = 'Hello Memgraph from Node.js!';\n\n    try {\n        const result = await session.run(\n            `CREATE (n:FirstNode {message: $message}) RETURN n`,\n            { message },\n        );\n\n        const singleRecord = result.records[0];\n        const node = singleRecord.get(0);\n\n        console.log('Created node:', node.properties.message);\n    } finally {\n        await session.close()\n    }\n\n    await driver.close()\n};\n\nhelloMemgraph(MEMGRAPH_URI, MEMGRAPH_USERNAME, MEMGRAPH_PASSWORD)\n    .catch((error) => console.error(error));\n")),(0,a.kt)("p",null,"Read more about it on ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/connect-to-memgraph/drivers/javascript"},"Javascript Quick Start Guide"),"."))}u.isMDXComponent=!0},59668:function(e,n,t){n.Z=t.p+"assets/images/connect-to-cloud-memgraph-lab-web-f0647edbbe0acb8e6b528c385c1c45aa.png"},89321:function(e,n,t){n.Z=t.p+"assets/images/paused-project-c255441fd2f018abd9bbfc6a4e4f3d7a.png"}}]);