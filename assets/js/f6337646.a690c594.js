"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[11378],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),h=r,c=u["".concat(s,".").concat(h)]||u[h]||m[h]||o;return a?n.createElement(c,i(i({ref:t},d),{},{components:a})):n.createElement(c,i({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8917:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={id:"storage",title:"Storage",sidebar_label:"Storage"},i=void 0,l={unversionedId:"under-the-hood/storage",id:"version-2.1.1/under-the-hood/storage",title:"Storage",description:"Durability and data recovery",source:"@site/memgraph_versioned_docs/version-2.1.1/under-the-hood/storage.md",sourceDirName:"under-the-hood",slug:"/under-the-hood/storage",permalink:"/docs/memgraph/2.1.1/under-the-hood/storage",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.1/under-the-hood/storage.md",tags:[],version:"2.1.1",frontMatter:{id:"storage",title:"Storage",sidebar_label:"Storage"},sidebar:"memgraph",previous:{title:"Under the hood",permalink:"/docs/memgraph/2.1.1/under-the-hood"},next:{title:"Graph algorithms",permalink:"/docs/memgraph/2.1.1/under-the-hood/graph-algorithms"}},s={},p=[{value:"Durability and data recovery",id:"durability-and-data-recovery",level:2},{value:"Storable data types",id:"storable-data-types",level:2},{value:"Node labels &amp; relationship types",id:"node-labels--relationship-types",level:3},{value:"Properties",id:"properties",level:3},{value:"Disabling properties on relationships",id:"disabling-properties-on-relationships",level:3},{value:"Storage statistics",id:"storage-statistics",level:3}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"durability-and-data-recovery"},"Durability and data recovery"),(0,r.kt)("p",null,"Memgraph uses two mechanisms to ensure the durability of the stored data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"write-ahead logging (WAL)"),(0,r.kt)("li",{parentName:"ul"},"periodic snapshots")),(0,r.kt)("p",null,"In write-ahead logging, all database modifications are recorded in a log file\nbefore being applied to the database. WAL ensures that all operations are done\natomically and provides steps needed to reconstruct the database state."),(0,r.kt)("p",null,"Snapshots are taken periodically during the entire runtime of Memgraph. When\na snapshot is triggered, the whole data storage is written to disk. The\nsnapshot file provides a quicker way to restore the database state."),(0,r.kt)("p",null,"Database recovery is done on startup from the most recent snapshot file. Since\nthe snapshot may be older than the most recent update logged in the WAL file,\nthe recovery process will apply the remaining state changes found in the WAL\nfile."),(0,r.kt)("p",null,"Behavior of these mechanisms can be tweaked in the configuration file,\nusually found in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Snapshot and WAL files are (currently) not compatible between Memgraph\nversions.")),(0,r.kt)("h2",{id:"storable-data-types"},"Storable data types"),(0,r.kt)("p",null,"Since Memgraph is a graph database management system, data is stored in the form\nof graph elements: nodes and relationships. Each graph element can contain\nvarious types of data. This chapter describes which data types are supported in\nMemgraph."),(0,r.kt)("h3",{id:"node-labels--relationship-types"},"Node labels & relationship types"),(0,r.kt)("p",null,"Nodes can have labels that are used to label or group nodes. A label is a text\nvalue, and each node can have any number of labels, even none. Labels can be\nchanged at any time. "),(0,r.kt)("p",null,"Relationships have a type, also represented as text. Unlike nodes, relationships\nmust have exactly one relationship type and once it is set upon creation, it can\nnever be modified again."),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Nodes and relationships can store various properties. Properties are similar to\nmappings or tables containing property names and their accompanying values.\nProperty names are represented as text, while values can be of different types.\nEach property can store a single value, and it is not possible to have multiple\nproperties with the same name on a single graph element. But, the same property\nnames can be found across multiple graph elements. Also, there are no\nrestrictions on the number of properties that can be stored in a single graph\nelement. The only restriction is that the values must be of the supported types.\nBelow is a table of supported data types."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Null")),(0,r.kt)("td",{parentName:"tr",align:null},"Property has no value, which is the same as if the property does not exist.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"A character string (text).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"A boolean value, either ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"An integer number.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Float")),(0,r.kt)("td",{parentName:"tr",align:null},"A floating-point number (real number).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"List")),(0,r.kt)("td",{parentName:"tr",align:null},"A list containing any number of property values of any supported type under a single property name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Map")),(0,r.kt)("td",{parentName:"tr",align:null},"A mapping of string keys to values of any supported type.")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Even though it's possible to store ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," property values, it is\nimpossible to modify them. It is, however, possible to replace them entirely.\nSo, the following queries are valid:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (:Node {property: [1, 2, 3]});\nCREATE (:Node {property: {key: "value"}});\n')),(0,r.kt)("p",{parentName:"admonition"},"But these are not:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (n:Node) SET n.property[0] = 0;\nMATCH (n:Node) SET n.property.key = "other value";\n'))),(0,r.kt)("h3",{id:"disabling-properties-on-relationships"},"Disabling properties on relationships"),(0,r.kt)("p",null,"If you have a use-case that doesn't use properties on relationships, you can\nspecify a flag in the Memgraph configuration file to disable them and reduce\nmemory usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"--storage-properties-on-edges=false\n")),(0,r.kt)("p",null,"You can disable properties on relationships with a non-empty database, just make\nsure the relationships are without properties."),(0,r.kt)("h3",{id:"storage-statistics"},"Storage statistics"),(0,r.kt)("p",null,"You can retrieve information and statistics about the storage of a running\nMemgraph instance by using the following query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"SHOW STORAGE INFO;\n")),(0,r.kt)("p",null,"Example results:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"storage info"),(0,r.kt)("th",{parentName:"tr",align:null},"value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"average_degree")),(0,r.kt)("td",{parentName:"tr",align:null},"2.872567")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"disk_usage")),(0,r.kt)("td",{parentName:"tr",align:null},"38028")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"edge_count")),(0,r.kt)("td",{parentName:"tr",align:null},"90674")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"memory_usage")),(0,r.kt)("td",{parentName:"tr",align:null},"88842240")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"vertex_count")),(0,r.kt)("td",{parentName:"tr",align:null},"63131")))),(0,r.kt)("p",null,"All of the ",(0,r.kt)("inlineCode",{parentName:"p"},"*_usage")," results are expressed in bytes unless explicitly stated\notherwise."))}m.isMDXComponent=!0}}]);