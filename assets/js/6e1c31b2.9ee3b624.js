"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82718],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return g}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(r),g=n,m=c["".concat(s,".").concat(g)]||c[g]||u[g]||l;return r?a.createElement(m,i(i({ref:t},d),{},{components:r})):a.createElement(m,i({ref:t},d))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},85438:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=r(87462),n=r(63366),l=(r(67294),r(3905)),i=["components"],o={id:"python-api",title:"Query modules Python API",sidebar_label:"Python API",slug:"/reference-guide/query-modules/api/python-api"},s=void 0,p={unversionedId:"reference-guide/query-modules/implement-custom-query-modules/api/python-api",id:"version-2.3.0/reference-guide/query-modules/implement-custom-query-modules/api/python-api",title:"Query modules Python API",description:"This is the API documentation for mgp.py that contains definitions of the",source:"@site/memgraph_versioned_docs/version-2.3.0/reference-guide/query-modules/implement-custom-query-modules/api/python-api.md",sourceDirName:"reference-guide/query-modules/implement-custom-query-modules/api",slug:"/reference-guide/query-modules/api/python-api",permalink:"/docs/memgraph/reference-guide/query-modules/api/python-api",editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.3.0/reference-guide/query-modules/implement-custom-query-modules/api/python-api.md",tags:[],version:"2.3.0",frontMatter:{id:"python-api",title:"Query modules Python API",sidebar_label:"Python API",slug:"/reference-guide/query-modules/api/python-api"},sidebar:"memgraph",previous:{title:"Implement custom query modules",permalink:"/docs/memgraph/reference-guide/query-modules/implement-custom-query-modules/overview"},next:{title:"C API",permalink:"/docs/memgraph/reference-guide/query-modules/api/c-api"}},d={},u=[{value:"class mgp.read_proc(func: Callable[\u2026, mgp.Record])",id:"class-mgpread_procfunc-callable-mgprecord",level:2},{value:"class mgp.write_proc(func: Callable[\u2026, mgp.Record])",id:"class-mgpwrite_procfunc-callable-mgprecord",level:2},{value:"class mgp.function(func: Callable[\u2026])",id:"class-mgpfunctionfunc-callable",level:2},{value:"class mgp.Properties(vertex_or_edge)",id:"class-mgppropertiesvertex_or_edge",level:2},{value:"get(property_name: str, default=None)",id:"getproperty_name-str-defaultnone",level:3},{value:"items()",id:"items",level:3},{value:"keys()",id:"keys",level:3},{value:"set(property_name: str, value: object)",id:"setproperty_name-str-value-object",level:3},{value:"values()",id:"values",level:3},{value:"class mgp.Label(name: str)",id:"class-mgplabelname-str",level:2},{value:"property name()",id:"property-name",level:3},{value:"class mgp.EdgeType(name)",id:"class-mgpedgetypename",level:2},{value:"property name()",id:"property-name-1",level:3},{value:"class mgp.Edge(edge)",id:"class-mgpedgeedge",level:2},{value:"property from_vertex()",id:"property-from_vertex",level:3},{value:"property id()",id:"property-id",level:3},{value:"is_valid()",id:"is_valid",level:3},{value:"property properties()",id:"property-properties",level:3},{value:"property to_vertex()",id:"property-to_vertex",level:3},{value:"property type()",id:"property-type",level:3},{value:"underlying_graph_is_mutable()",id:"underlying_graph_is_mutable",level:3},{value:"class mgp.Vertex(vertex)",id:"class-mgpvertexvertex",level:2},{value:"add_label(label: str)",id:"add_labellabel-str",level:3},{value:"property id()",id:"property-id-1",level:3},{value:"property in_edges()",id:"property-in_edges",level:3},{value:"is_valid()",id:"is_valid-1",level:3},{value:"property labels()",id:"property-labels",level:3},{value:"property out_edges()",id:"property-out_edges",level:3},{value:"property properties()",id:"property-properties-1",level:3},{value:"remove_label(label: str)",id:"remove_labellabel-str",level:3},{value:"underlying_graph_is_mutable()",id:"underlying_graph_is_mutable-1",level:3},{value:"class mgp.Path(starting_vertex_or_path: Union_mgp.Path, mgp.Vertex)",id:"class-mgppathstarting_vertex_or_path-union_mgppath-mgpvertex",level:2},{value:"property edges()",id:"property-edges",level:3},{value:"expand(edge: mgp.Edge)",id:"expandedge-mgpedge",level:3},{value:"is_valid()",id:"is_valid-2",level:3},{value:"property vertices()",id:"property-vertices",level:3},{value:"class mgp.Record(**kwargs)",id:"class-mgprecordkwargs",level:2},{value:"fields()",id:"fields",level:3},{value:"class mgp.Vertices(graph)",id:"class-mgpverticesgraph",level:2},{value:"is_valid()",id:"is_valid-3",level:3},{value:"class mgp.Graph(graph)",id:"class-mgpgraphgraph",level:2},{value:"create_edge(from_vertex: mgp.Vertex, to_vertex: mgp.Vertex, edge_type: mgp.EdgeType)",id:"create_edgefrom_vertex-mgpvertex-to_vertex-mgpvertex-edge_type-mgpedgetype",level:3},{value:"create_vertex()",id:"create_vertex",level:3},{value:"delete_edge(edge: mgp.Edge)",id:"delete_edgeedge-mgpedge",level:3},{value:"delete_vertex(vertex: mgp.Vertex)",id:"delete_vertexvertex-mgpvertex",level:3},{value:"detach_delete_vertex(vertex: mgp.Vertex)",id:"detach_delete_vertexvertex-mgpvertex",level:3},{value:"get_vertex_by_id(vertex_id: VertexId)",id:"get_vertex_by_idvertex_id-vertexid",level:3},{value:"is_mutable()",id:"is_mutable",level:3},{value:"is_valid()",id:"is_valid-4",level:3},{value:"property vertices()",id:"property-vertices-1",level:3},{value:"class mgp.ProcCtx(graph)",id:"class-mgpprocctxgraph",level:2},{value:"check_must_abort()",id:"check_must_abort",level:3},{value:"property graph()",id:"property-graph",level:3},{value:"is_valid()",id:"is_valid-5",level:3},{value:"must_abort()",id:"must_abort",level:3},{value:"class mgp.FuncCtx(graph)",id:"class-mgpfuncctxgraph",level:2},{value:"is_valid()",id:"is_valid-6",level:3},{value:"class mgp.Deprecated(type_)",id:"class-mgpdeprecatedtype_",level:2},{value:"field_type()",id:"field_type",level:3},{value:"class mgp._typing_to_cypher_type(type_)",id:"class-mgp_typing_to_cypher_typetype_",level:2},{value:"class mgp.UnsupportedTypingError(type_)",id:"class-mgpunsupportedtypingerrortype_",level:2},{value:"class mgp.AbortError()",id:"class-mgpaborterror",level:2},{value:"class mgp.InvalidContextError()",id:"class-mgpinvalidcontexterror",level:2},{value:"class mgp.InvalidMessageError()",id:"class-mgpinvalidmessageerror",level:2},{value:"class mgp.InvalidMessagesError()",id:"class-mgpinvalidmessageserror",level:2},{value:"class mgp.DeletedObjectError(*args: Any, **kwargs: Any)",id:"class-mgpdeletedobjecterrorargs-any-kwargs-any",level:2},{value:"class mgp.ImmutableObjectError(*args: Any, **kwargs: Any)",id:"class-mgpimmutableobjecterrorargs-any-kwargs-any",level:2},{value:"class mgp.InsufficientBufferError(*args: Any, **kwargs: Any)",id:"class-mgpinsufficientbuffererrorargs-any-kwargs-any",level:2},{value:"class mgp.InvalidArgumentError(*args: Any, **kwargs: Any)",id:"class-mgpinvalidargumenterrorargs-any-kwargs-any",level:2},{value:"class mgp.KeyAlreadyExistsError(*args: Any, **kwargs: Any)",id:"class-mgpkeyalreadyexistserrorargs-any-kwargs-any",level:2},{value:"class mgp.LogicErrorError(*args: Any, **kwargs: Any)",id:"class-mgplogicerrorerrorargs-any-kwargs-any",level:2},{value:"class mgp.OutOfRangeError(*args: Any, **kwargs: Any)",id:"class-mgpoutofrangeerrorargs-any-kwargs-any",level:2},{value:"class mgp.SerializationError(*args: Any, **kwargs: Any)",id:"class-mgpserializationerrorargs-any-kwargs-any",level:2},{value:"class mgp.UnableToAllocateError(*args: Any, **kwargs: Any)",id:"class-mgpunabletoallocateerrorargs-any-kwargs-any",level:2},{value:"class mgp.UnknownError(*args: Any, **kwargs: Any)",id:"class-mgpunknownerrorargs-any-kwargs-any",level:2},{value:"class mgp.ValueConversionError(*args: Any, **kwargs: Any)",id:"class-mgpvalueconversionerrorargs-any-kwargs-any",level:2}],c={toc:u};function g(e){var t=e.components,r=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This is the API documentation for ",(0,l.kt)("inlineCode",{parentName:"p"},"mgp.py")," that contains definitions of the\npublic Python API provided by Memgraph. In essence, this is a wrapper around the\n",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"./c-api"},"C API")),". This source file can be found in the Memgraph\ninstallation directory, under ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/python_support"),"."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For an example of how to implement\xa0query modules in Python, take a look at ",(0,l.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/query-modules/implement-custom-query-modules/custom-query-module-example#python-api"},"the\nexample we\nprovided"),"."))),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If you install any Python modules after running Memgraph, you'll have to ",(0,l.kt)("a",{parentName:"p",href:"../load-call-query-modules#loading-query-modules"},"load\nthem into Memgraph")," or restart\nMemgraph in order to use them."),(0,l.kt)("p",{parentName:"div"},"You can also develop query modules in Python from Memgraph Lab (v2.0 and newer). Just\nnavigate to ",(0,l.kt)("strong",{parentName:"p"},"Query Modules")," and click on ",(0,l.kt)("strong",{parentName:"p"},"New Module")," to start."))),(0,l.kt)("h2",{id:"class-mgpread_procfunc-callable-mgprecord"},"class mgp.read_proc(func: Callable[","[\u2026]",", mgp.Record])"),(0,l.kt)("p",null,"Register func as a read-only procedure of the current module."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"read_proc")," is meant to be used as a decorator function to register module\nprocedures. The registered func needs to be a callable which optionally takes\n",(0,l.kt)("inlineCode",{parentName:"p"},"ProcCtx")," as the first argument. Other arguments of func will be bound to values\npassed in the Cypher query. The full signature of func needs to be annotated with\ntypes. The return type must be ",(0,l.kt)("inlineCode",{parentName:"p"},"Record(field_name=type, \u2026)")," and the procedure must\nproduce either a complete ",(0,l.kt)("inlineCode",{parentName:"p"},"Record")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),". To mark a field as deprecated, use\n",(0,l.kt)("inlineCode",{parentName:"p"},"Record(field_name=Deprecated(type), \u2026)"),". Multiple records can be produced by\nreturning an iterable of them. Registering generator functions is currently not\nsupported."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"    import mgp\n\n    @mgp.read_proc\n    def procedure(context: mgp.ProcCtx,\n                required_arg: mgp.Nullable[mgp.Any],\n                optional_arg: mgp.Nullable[mgp.Any] = None\n                ) -> mgp.Record(result=str, args=list):\n        args = [required_arg, optional_arg]\n        # Multiple rows can be produced by returning an iterable of mgp.Record\n        return mgp.Record(args=args, result='Hello World!')\n")),(0,l.kt)("p",null,"The example procedure above returns 2 fields: ",(0,l.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"args")," is a copy of arguments passed to the procedure."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"result")," is the result of this procedure, a \u201cHello World!\u201d string.")),(0,l.kt)("p",null,"Any errors can be reported by raising an ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception"),"."),(0,l.kt)("p",null,"The procedure can be invoked in Cypher using the following calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL example.procedure(1, 2) YIELD args, result;\nCALL example.procedure(1) YIELD args, result;\n")),(0,l.kt)("p",null,"Naturally, you may pass in different arguments or yield less fields."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"mgp")," Python module so your editor can use typing annotations\nproperly and suggest methods and classes it contains. You can install the module\nby running ",(0,l.kt)("inlineCode",{parentName:"p"},"pip install mgp"),"."))),(0,l.kt)("h2",{id:"class-mgpwrite_procfunc-callable-mgprecord"},"class mgp.write_proc(func: Callable[","[\u2026]",", mgp.Record])"),(0,l.kt)("p",null,"Register func as a writeable procedure of the current module."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"write_proc")," is meant to be used as a decorator function to register module\nprocedures. The registered func needs to be a callable which optionally takes\n",(0,l.kt)("inlineCode",{parentName:"p"},"ProcCtx")," as the first argument. Other arguments of func will be bound to values\npassed in the Cypher query. The full signature of func needs to be annotated with\ntypes. The return type must be ",(0,l.kt)("inlineCode",{parentName:"p"},"Record(field_name=type, \u2026)")," and the procedure must\nproduce either a complete ",(0,l.kt)("inlineCode",{parentName:"p"},"Record")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),". To mark a field as deprecated, use\n",(0,l.kt)("inlineCode",{parentName:"p"},"Record(field_name=Deprecated(type), \u2026)"),". Multiple records can be produced by\nreturning an iterable of them. Registering generator functions is currently not\nsupported."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import mgp\n\n@mgp.write_proc\ndef procedure(context: mgp.ProcCtx,\n    required_arg: str,\n    optional_arg: mgp.Nullable[str] = None\n    ) -> mgp.Record(result=mgp.Vertex):\n\n    vertex = context.graph.create_vertex()\n    vertex_properties = vertex.properties\n    vertex_properties[\u201crequired_arg\u201d] = required_arg\n\n    if optional_arg is not None:\n        vertex_properties[\u201coptional_arg\u201d] = optional_arg\n\n    return mgp.Record(result=vertex)\n")),(0,l.kt)("p",null,"The example procedure above returns  a newly created vertex which has at most 2\nproperties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"required_arg")," is always present and its value is the first argument of the\nprocedure."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"optional_arg")," is present if the second argument of the procedure is not null.")),(0,l.kt)("p",null,"Any errors can be reported by raising an ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception"),"."),(0,l.kt)("p",null,"The procedure can be invoked in Cypher using the following calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL example.procedure(\u201cproperty value\u201d, \u201canother one\u201d) YIELD result;\nCALL example.procedure(\u201csingle argument\u201d) YIELD result;\n")),(0,l.kt)("p",null,"Naturally, you may pass in different arguments."),(0,l.kt)("h2",{id:"class-mgpfunctionfunc-callable"},"class mgp.function(func: Callable[","[\u2026]","])"),(0,l.kt)("p",null,"Register func as a Memgraph function in the current module."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"function")," is meant to be used as a decorator function to register module\nfunctions. The registered func needs to be a callable which optionally takes\n",(0,l.kt)("inlineCode",{parentName:"p"},"FuncCtx")," as the first argument. Other arguments of func will be bound to values\npassed in the Cypher query. Only the funcion arguments need to be annotated with\ntypes. The return type doesn't need to be specified, but it has to be supported\nby ",(0,l.kt)("inlineCode",{parentName:"p"},"mgp.Any"),". Registering generator functions is currently not supported."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import mgp\n\n@mgp.function\ndef func_example(context: mgp.FuncCtx,\n    required_arg: str,\n    optional_arg: mgp.Nullable[str] = None\n    ):\n\n    return_args = [required_arg]\n\n    if optional_arg is not None:\n        return_args.append(optional_arg)\n\n    # Return any kind of result supported by mgp.Any\n    return return_args\n")),(0,l.kt)("p",null,"The example function above returns a list of provided arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"required_arg")," is always present and its value is the first argument of the\nfunction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"optional_arg")," is present if the second argument of the function is not\n",(0,l.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,l.kt)("p",null,"Any errors can be reported by raising an ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception"),"."),(0,l.kt)("p",null,"The function can be invoked in Cypher using the following calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},'RETURN example.func_example("first argument", "second_argument");\nRETURN example.func_example("first argument");\n')),(0,l.kt)("p",null,"Naturally, you may pass in different arguments."),(0,l.kt)("h2",{id:"class-mgppropertiesvertex_or_edge"},"class mgp.Properties(vertex_or_edge)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"A collection of properties either on a Vertex or an Edge."),(0,l.kt)("h3",{id:"getproperty_name-str-defaultnone"},"get(property_name: str, default=None)"),(0,l.kt)("p",null,"Get the value of a property with the given name or return default."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate a\nmgp.Value. Raise DeletedObjectError if the object has been deleted."),(0,l.kt)("h3",{id:"items"},"items()"),(0,l.kt)("p",null,"Iterate over the properties."),(0,l.kt)("p",null,"Doesn\u2019t return a dynamic view of the properties, but copies the current\nproperties."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate an\niterator. Raise DeletedObjectError if the object has been deleted."),(0,l.kt)("h3",{id:"keys"},"keys()"),(0,l.kt)("p",null,"Iterate over property names."),(0,l.kt)("p",null,"Doesn\u2019t return a dynamic view of the property names, but copies the name of the\ncurrent properties."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate an\niterator. Raise DeletedObjectError if the object has been deleted."),(0,l.kt)("h3",{id:"setproperty_name-str-value-object"},"set(property_name: str, value: object)"),(0,l.kt)("p",null,"Set the value of the property. When the value is None, then the property is\nremoved."),(0,l.kt)("p",null,"Raise UnableToAllocateError if unable to allocate memory for storing the\nproperty. Raise ImmutableObjectError if the object is immutable. Raise\nDeletedObjectError if the ojbect has been deleted. Raise SerializationError if\nthe object has been modified by another transaction. Raise ValueConversionError\nif value is vertex, edge or path."),(0,l.kt)("h3",{id:"values"},"values()"),(0,l.kt)("p",null,"Iterate over property values."),(0,l.kt)("p",null,"Doesn\u2019t return a dynamic view of the property values, but copies the value of\nthe current properties."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate an\niterator. Raise DeletedObjectError if the object has been deleted."),(0,l.kt)("h2",{id:"class-mgplabelname-str"},"class mgp.Label(name: str)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Label of a Vertex."),(0,l.kt)("h3",{id:"property-name"},"property name()"),(0,l.kt)("h2",{id:"class-mgpedgetypename"},"class mgp.EdgeType(name)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Type of an Edge."),(0,l.kt)("h3",{id:"property-name-1"},"property name()"),(0,l.kt)("h2",{id:"class-mgpedgeedge"},"class mgp.Edge(edge)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Edge in the graph database."),(0,l.kt)("p",null,"Access to an Edge is only valid during a single execution of a procedure in a\nquery. You should not globally store an instance of an Edge. Using an invalid\nEdge instance will raise InvalidContextError."),(0,l.kt)("h3",{id:"property-from_vertex"},"property from_vertex()"),(0,l.kt)("p",null,"Get the source vertex."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"property-id"},"property id()"),(0,l.kt)("p",null,"Get the ID of the edge."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"is_valid"},"is_valid()"),(0,l.kt)("p",null,"Return True if self is in valid context and may be used."),(0,l.kt)("h3",{id:"property-properties"},"property properties()"),(0,l.kt)("p",null,"Get the properties of the edge."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"property-to_vertex"},"property to_vertex()"),(0,l.kt)("p",null,"Get the destination vertex."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"property-type"},"property type()"),(0,l.kt)("p",null,"Get the type of the edge."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"underlying_graph_is_mutable"},"underlying_graph_is_mutable()"),(0,l.kt)("p",null,"Return True if the edge can be modified."),(0,l.kt)("h2",{id:"class-mgpvertexvertex"},"class mgp.Vertex(vertex)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Vertex in the graph database."),(0,l.kt)("p",null,"Access to a Vertex is only valid during a single execution of a procedure in a\nquery. You should not globally store an instance of a Vertex. Using an invalid\nVertex instance will raise InvalidContextError."),(0,l.kt)("h3",{id:"add_labellabel-str"},"add_label(label: str)"),(0,l.kt)("p",null,"Add the label to the vertex."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate\nmemory for storing the label. Raise ImmutableObjectError if self is immutable.\nRaise DeletedObjectError if self has been deleted. Raise SerializationError if\nself has been modified by another transaction."),(0,l.kt)("h3",{id:"property-id-1"},"property id()"),(0,l.kt)("p",null,"Get the ID of the vertex."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"property-in_edges"},"property in_edges()"),(0,l.kt)("p",null,"Iterate over inbound edges of the vertex."),(0,l.kt)("p",null,"Doesn\u2019t return a dynamic view of the edges, but copies the current inbound\nedges."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate an\niterator. Raise DeletedObjectError if self has been deleted."),(0,l.kt)("h3",{id:"is_valid-1"},"is_valid()"),(0,l.kt)("p",null,"Return True if self is in valid context and may be used."),(0,l.kt)("h3",{id:"property-labels"},"property labels()"),(0,l.kt)("p",null,"Get the labels of the vertex."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise OutOfRangeError if some of the labels are\nremoved while collecting the labels. Raise DeletedObjectError if self has been\ndeleted."),(0,l.kt)("h3",{id:"property-out_edges"},"property out_edges()"),(0,l.kt)("p",null,"Iterate over outbound edges of the vertex."),(0,l.kt)("p",null,"Doesn\u2019t return a dynamic view of the edges, but copies the current outbound\nedges."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise UnableToAllocateError if unable to allocate an\niterator. Raise DeletedObjectError if self has been deleted."),(0,l.kt)("h3",{id:"property-properties-1"},"property properties()"),(0,l.kt)("p",null,"Get the properties of the vertex."),(0,l.kt)("p",null,"Raise InvalidContextError."),(0,l.kt)("h3",{id:"remove_labellabel-str"},"remove_label(label: str)"),(0,l.kt)("p",null,"Remove the label from the vertex."),(0,l.kt)("p",null,"Raise InvalidContextError. Raise ImmutableObjectError if self is immutable.\nRaise DeletedObjectError if self has been deleted. Raise SerializationError if\nself has been modified by another transaction."),(0,l.kt)("h3",{id:"underlying_graph_is_mutable-1"},"underlying_graph_is_mutable()"),(0,l.kt)("p",null,"Return True if the vertex can be modified."),(0,l.kt)("h2",{id:"class-mgppathstarting_vertex_or_path-union_mgppath-mgpvertex"},"class mgp.Path(starting_vertex_or_path: Union","[_mgp.Path, mgp.Vertex]",")"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Path containing Vertex and Edge instances."),(0,l.kt)("h3",{id:"property-edges"},"property edges()"),(0,l.kt)("p",null,"Edges ordered from the start to the end of the path."),(0,l.kt)("p",null,"Raise InvalidContextError if using an invalid Path instance."),(0,l.kt)("h3",{id:"expandedge-mgpedge"},"expand(edge: mgp.Edge)"),(0,l.kt)("p",null,"Append an edge continuing from the last vertex on the path."),(0,l.kt)("p",null,"The last vertex on the path will become the other endpoint of the given edge, as\ncontinued from the current last vertex."),(0,l.kt)("p",null,"Raise InvalidContextError if using an invalid Path instance or if passed in edge\nis invalid. Raise LogicErrorError if the current last vertex in the path is not\npart of the given edge. Raise UnableToAllocateError if unable to allocate memory\nfor path extension."),(0,l.kt)("h3",{id:"is_valid-2"},"is_valid()"),(0,l.kt)("h3",{id:"property-vertices"},"property vertices()"),(0,l.kt)("p",null,"Vertices ordered from the start to the end of the path."),(0,l.kt)("p",null,"Raise InvalidContextError if using an invalid Path instance."),(0,l.kt)("h2",{id:"class-mgprecordkwargs"},"class mgp.Record(**kwargs)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Represents a record of resulting field values."),(0,l.kt)("h3",{id:"fields"},"fields()"),(0,l.kt)("h2",{id:"class-mgpverticesgraph"},"class mgp.Vertices(graph)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Iterable over vertices in a graph."),(0,l.kt)("h3",{id:"is_valid-3"},"is_valid()"),(0,l.kt)("p",null,"Return True if self is in valid context and may be used."),(0,l.kt)("h2",{id:"class-mgpgraphgraph"},"class mgp.Graph(graph)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"State of the graph database in current ProcCtx."),(0,l.kt)("h3",{id:"create_edgefrom_vertex-mgpvertex-to_vertex-mgpvertex-edge_type-mgpedgetype"},"create_edge(from_vertex: mgp.Vertex, to_vertex: mgp.Vertex, edge_type: mgp.EdgeType)"),(0,l.kt)("p",null,"Create an edge."),(0,l.kt)("p",null,"Raise ImmutableObjectError if self ","`"," is immutable. Raise UnableToAllocateError\nif unable to allocate an edge. Raise DeletedObjectError if ","`","from_vertex or\nto_vertex has been deleted. Raise SerializationError if from_vertex or to_vertex\nhas been modified by another transaction."),(0,l.kt)("h3",{id:"create_vertex"},"create_vertex()"),(0,l.kt)("p",null,"Create a vertex."),(0,l.kt)("p",null,"Raise ImmutableObjectError if self is immutable. Raise UnableToAllocateError if\nunable to allocate a vertex."),(0,l.kt)("h3",{id:"delete_edgeedge-mgpedge"},"delete_edge(edge: mgp.Edge)"),(0,l.kt)("p",null,"Delete an edge."),(0,l.kt)("p",null,"Raise ImmutableObjectError if self is immutable. Raise SerializationError if\nedge, its source or destination vertex has been modified by another transaction."),(0,l.kt)("h3",{id:"delete_vertexvertex-mgpvertex"},"delete_vertex(vertex: mgp.Vertex)"),(0,l.kt)("p",null,"Delete a vertex."),(0,l.kt)("p",null,"Raise ImmutableObjectError if self is immutable. Raise LogicErrorError if vertex\nhas edges. Raise SerializationError if vertex has been modified by another\ntransaction."),(0,l.kt)("h3",{id:"detach_delete_vertexvertex-mgpvertex"},"detach_delete_vertex(vertex: mgp.Vertex)"),(0,l.kt)("p",null,"Delete a vertex and all of its edges."),(0,l.kt)("p",null,"Raise ImmutableObjectError if self is immutable. Raise SerializationError if\nvertex has been modified by another transaction."),(0,l.kt)("h3",{id:"get_vertex_by_idvertex_id-vertexid"},"get_vertex_by_id(vertex_id: VertexId)"),(0,l.kt)("p",null,"Return the Vertex corresponding to given vertex_id from the graph."),(0,l.kt)("p",null,"Access to a Vertex is only valid during a single execution of a procedure in a\nquery. You should not globally store the returned Vertex."),(0,l.kt)("p",null,"Raise IndexError if unable to find the given vertex_id. Raise\nInvalidContextError if context is invalid."),(0,l.kt)("h3",{id:"is_mutable"},"is_mutable()"),(0,l.kt)("p",null,"Return True if self represents a mutable graph, thus it can be used to modify\nvertices and edges."),(0,l.kt)("h3",{id:"is_valid-4"},"is_valid()"),(0,l.kt)("p",null,"Return True if self is in valid context and may be used."),(0,l.kt)("h3",{id:"property-vertices-1"},"property vertices()"),(0,l.kt)("p",null,"All vertices in the graph."),(0,l.kt)("p",null,"Access to a Vertex is only valid during a single execution of a procedure in a\nquery. You should not globally store the returned Vertex instances."),(0,l.kt)("p",null,"Raise InvalidContextError if context is invalid."),(0,l.kt)("h2",{id:"class-mgpprocctxgraph"},"class mgp.ProcCtx(graph)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Context of a procedure being executed."),(0,l.kt)("p",null,"Access to a ProcCtx is only valid during a single execution of a procedure in a\nquery. You should not globally store a ProcCtx instance."),(0,l.kt)("h3",{id:"check_must_abort"},"check_must_abort()"),(0,l.kt)("h3",{id:"property-graph"},"property graph()"),(0,l.kt)("p",null,"Raise InvalidContextError if context is invalid."),(0,l.kt)("h3",{id:"is_valid-5"},"is_valid()"),(0,l.kt)("h3",{id:"must_abort"},"must_abort()"),(0,l.kt)("h2",{id:"class-mgpfuncctxgraph"},"class mgp.FuncCtx(graph)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Context of a function being executed."),(0,l.kt)("p",null,"Access to a FuncCtx is only valid during a single execution of a function in a\nquery. You should not globally store a FuncCtx instance. The graph object within\nthe FuncCtx is not mutable."),(0,l.kt)("h3",{id:"is_valid-6"},"is_valid()"),(0,l.kt)("h2",{id:"class-mgpdeprecatedtype_"},"class mgp.Deprecated(type_)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Annotate a resulting Record\u2019s field as deprecated."),(0,l.kt)("h3",{id:"field_type"},"field_type()"),(0,l.kt)("h2",{id:"class-mgp_typing_to_cypher_typetype_"},"class mgp.","_","typing","_","to","_","cypher","_","type(type_)"),(0,l.kt)("p",null,"Convert typing annotation to a _mgp.CypherType instance."),(0,l.kt)("h2",{id:"class-mgpunsupportedtypingerrortype_"},"class mgp.UnsupportedTypingError(type_)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")),(0,l.kt)("p",null,"Signals a typing annotation is not supported as a _mgp.CypherType."),(0,l.kt)("h2",{id:"class-mgpaborterror"},"class mgp.AbortError()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")),(0,l.kt)("p",null,"Signals that the procedure was asked to abort its execution."),(0,l.kt)("h2",{id:"class-mgpinvalidcontexterror"},"class mgp.InvalidContextError()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")),(0,l.kt)("p",null,"Signals using a graph element instance outside of the registered procedure."),(0,l.kt)("h2",{id:"class-mgpinvalidmessageerror"},"class mgp.InvalidMessageError()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")),(0,l.kt)("p",null,"Signals using a message instance outside of the registered transformation."),(0,l.kt)("h2",{id:"class-mgpinvalidmessageserror"},"class mgp.InvalidMessagesError()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")),(0,l.kt)("p",null,"Signals using a messages instance outside of the registered transformation."),(0,l.kt)("h2",{id:"class-mgpdeletedobjecterrorargs-any-kwargs-any"},"class mgp.DeletedObjectError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals accessing an already deleted object."),(0,l.kt)("h2",{id:"class-mgpimmutableobjecterrorargs-any-kwargs-any"},"class mgp.ImmutableObjectError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals modification of an immutable object."),(0,l.kt)("h2",{id:"class-mgpinsufficientbuffererrorargs-any-kwargs-any"},"class mgp.InsufficientBufferError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals that some buffer is not big enough."),(0,l.kt)("h2",{id:"class-mgpinvalidargumenterrorargs-any-kwargs-any"},"class mgp.InvalidArgumentError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals that some of the arguments have invalid values."),(0,l.kt)("h2",{id:"class-mgpkeyalreadyexistserrorargs-any-kwargs-any"},"class mgp.KeyAlreadyExistsError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals that a key already exists in a container-like object."),(0,l.kt)("h2",{id:"class-mgplogicerrorerrorargs-any-kwargs-any"},"class mgp.LogicErrorError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals faulty logic within the program such as violating logical preconditions\nor class invariants and may be preventable."),(0,l.kt)("h2",{id:"class-mgpoutofrangeerrorargs-any-kwargs-any"},"class mgp.OutOfRangeError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals that an index-like parameter has a value that is outside its possible\nvalues."),(0,l.kt)("h2",{id:"class-mgpserializationerrorargs-any-kwargs-any"},"class mgp.SerializationError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals serialization error caused by concurrent modifications from different\ntransactions."),(0,l.kt)("h2",{id:"class-mgpunabletoallocateerrorargs-any-kwargs-any"},"class mgp.UnableToAllocateError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals failed memory allocation."),(0,l.kt)("h2",{id:"class-mgpunknownerrorargs-any-kwargs-any"},"class mgp.UnknownError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals unspecified failure."),(0,l.kt)("h2",{id:"class-mgpvalueconversionerrorargs-any-kwargs-any"},"class mgp.ValueConversionError(*args: Any, **kwargs: Any)"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"_mgp.")),(0,l.kt)("p",null,"Signals that the conversion failed between python and cypher values."))}g.isMDXComponent=!0}}]);