"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8916],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),u=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(a),c=n,h=m["".concat(p,".").concat(c)]||m[c]||d[c]||l;return a?r.createElement(h,o(o({ref:t},s),{},{components:a})):r.createElement(h,o({ref:t},s))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},54751:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=a(87462),n=(a(67294),a(3905)),l=a(74866),o=a(85162);const i={id:"filter-data",title:"How to filter data",sidebar_label:"Filter data"},p=void 0,u={unversionedId:"how-to-guides/query-builder/filter-data",id:"how-to-guides/query-builder/filter-data",title:"How to filter data",description:"You can use the methods where(), wherenot(), orwhere(),",source:"@site/gqlalchemy/how-to-guides/query-builder/filter-data.md",sourceDirName:"how-to-guides/query-builder",slug:"/how-to-guides/query-builder/filter-data",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/filter-data",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/query-builder/filter-data.md",tags:[],version:"current",frontMatter:{id:"filter-data",title:"How to filter data",sidebar_label:"Filter data"}},s={},d=[{value:"Filter data by property comparison",id:"filter-data-by-property-comparison",level:2},{value:"Filter data by property value",id:"filter-data-by-property-value",level:2},{value:"Filter data by label",id:"filter-data-by-label",level:2}],m={toc:d};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"You can use the methods ",(0,n.kt)("inlineCode",{parentName:"p"},"where()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"where_not()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"or_where()"),",\n",(0,n.kt)("inlineCode",{parentName:"p"},"or_where_not()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"and_where()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"and_where_not()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"xor_where()")," and\n",(0,n.kt)("inlineCode",{parentName:"p"},"xor_where_not()")," to construct queries that will filter data."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"where(self, item: str, operator: Operator, **kwargs)")," - Filter data so that\n",(0,n.kt)("inlineCode",{parentName:"li"},"operator")," evaluates the comparison of ",(0,n.kt)("inlineCode",{parentName:"li"},"item")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"literal")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"expression")," to true."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"where_not(self, item: str, operator: Operator, **kwargs)")," - Filter data so that\n",(0,n.kt)("inlineCode",{parentName:"li"},"operator")," evaluates the comparison of ",(0,n.kt)("inlineCode",{parentName:"li"},"item")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"literal")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"expression")," to false."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"or_where(self, item: str, operator: Operator, **kwargs)")," - Append an additional\nfilter with ",(0,n.kt)("inlineCode",{parentName:"li"},"OR"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"or_not_where(self, item: str, operator: Operator, **kwargs)")," - Append an additional\nfilter with ",(0,n.kt)("inlineCode",{parentName:"li"},"OR NOT"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"and_where(self, item: str, operator: Operator, **kwargs)")," - Append an additional\nfilter with ",(0,n.kt)("inlineCode",{parentName:"li"},"AND"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"and_not_where(self, item: str, operator: Operator, **kwargs)")," - Append an additional\nfilter with ",(0,n.kt)("inlineCode",{parentName:"li"},"AND NOT"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"xor_where(self, item: str, operator: Operator, **kwargs)")," - Append an additional\nfilter with ",(0,n.kt)("inlineCode",{parentName:"li"},"XOR"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"xor_not_where(self, item: str, operator: Operator, **kwargs)")," - Append an additional\nfilter with ",(0,n.kt)("inlineCode",{parentName:"li"},"XOR NOT"),".")),(0,n.kt)("p",null,"In this guide, you'll learn how to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data-by-property-comparison"},"Filter data by property comparison")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data-by-property-value"},"Filter data by property value")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#filter-data-by-label"},"Filter data by label"))),(0,n.kt)("h2",{id:"filter-data-by-property-comparison"},"Filter data by property comparison"),(0,n.kt)("p",null,"You can filter data by comparing properties of graph objects. Below you can see\nhow to compare ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," properties of two nodes."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = Match()\n        .node(labels="Person", variable="p1")\n        .to(relationship_type="FRIENDS_WITH")\n        .node(labels="Person", variable="p2")\n        .where(item="p1.name", operator=Operator.EQUAL, expression="p2.name")\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE p1.name = p2.name RETURN *;\n")))),(0,n.kt)("p",null,"Here the ",(0,n.kt)("inlineCode",{parentName:"p"},"expression")," keyword argument is used because the property shouldn't be\nquoted in the Cypher query."),(0,n.kt)("p",null,"Standard boolean operators like ",(0,n.kt)("inlineCode",{parentName:"p"},"NOT"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"AND"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"OR")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"XOR")," are used in the\nCypher query language. To have ",(0,n.kt)("inlineCode",{parentName:"p"},"NOT")," within ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," clause, you need to use\n",(0,n.kt)("inlineCode",{parentName:"p"},"where_not()")," method."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = Match()\n        .node(labels="Person", variable="p1")\n        .to(relationship_type="FRIENDS_WITH")\n        .node(labels="Person", variable="p2")\n        .where_not(item="p1.name", operator=Operator.EQUAL, expression="p2.name")\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE NOT p1.name = p2.name RETURN *;\n")))),(0,n.kt)("p",null,"In a similar way, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"AND")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"AND NOT")," clauses, which correspond to\nthe methods ",(0,n.kt)("inlineCode",{parentName:"p"},"and_where()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"and_not_where()"),". Using the query below you can\nfind all persons with the same ",(0,n.kt)("inlineCode",{parentName:"p"},"first_name")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"last_name"),", but different\n",(0,n.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = Match()\n        .node(labels="Person", variable="p1")\n        .to(relationship_type="FRIENDS_WITH")\n        .node(labels="Person", variable="p2")\n        .where(item="p1.first_name", operator=Operator.EQUAL, expression="p2.first_name")\n        .and_where(item="p1.last_name", operator=Operator.EQUAL, expression="p2.last_name")\n        .and_not_where(item="p1.address", operator=Operator.EQUAL, expression="p2.address")\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE p1.name = p2.name AND p1.last_name = p2.last_name AND NOT p1.address = p2.address RETURN *;\n")))),(0,n.kt)("p",null,"The same goes for the ",(0,n.kt)("inlineCode",{parentName:"p"},"OR"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"OR NOT"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"XOR")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"XOR NOT")," clauses, which\ncorrespond to the methods ",(0,n.kt)("inlineCode",{parentName:"p"},"or_where()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"or_not_where()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"xor_where()")," and\n",(0,n.kt)("inlineCode",{parentName:"p"},"xor_not_where()"),"."),(0,n.kt)("h2",{id:"filter-data-by-property-value"},"Filter data by property value"),(0,n.kt)("p",null,"You can filter data by comparing the property of a graph object to some value (a\nliteral). Below you can see how to compare ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," property of a node to the\ninteger."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\n\nquery = Match()\n        .node(labels="Person", variable="p")\n        .where(item="p.age", operator=">", literal=18)\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) WHERE p.age > 18 RETURN *;\n")))),(0,n.kt)("p",null,"It's important that the third keyword argument is ",(0,n.kt)("inlineCode",{parentName:"p"},"literal"),", since then, it will\nbe of the correct type."),(0,n.kt)("p",null,"Just like in ",(0,n.kt)("a",{parentName:"p",href:"#filter-data-by-property-comparison"},"property comparison"),", you can\nuse different boolean operators to further filter the data."),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = Match()\n        .node(labels="Person", variable="p")\n        .where(item="p.age", operator=Operator.GREATER_THAN, literal=18)\n        .or_where(item="p.name", operator=Operator.EQUAL, literal="John")\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (p:Person) WHERE p.age > 18 OR p.name = "John" RETURN *;\n')))),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"literal")," keyword is used again since you want ",(0,n.kt)("inlineCode",{parentName:"p"},"John")," to be quoted in the\nCypher query."),(0,n.kt)("h2",{id:"filter-data-by-label"},"Filter data by label"),(0,n.kt)("p",null,"Nodes can be filtered by their label using the ",(0,n.kt)("inlineCode",{parentName:"p"},"WHERE")," clause instead of\nspecifying it directly in the ",(0,n.kt)("inlineCode",{parentName:"p"},"MATCH")," clause. You have to use ",(0,n.kt)("inlineCode",{parentName:"p"},"expression")," as\nthe third keyword argument again since you don't want the quotes surrounding the\nlabel in the Cypher clause."),(0,n.kt)("p",null,"Below you can see an example of how to filter data by label:"),(0,n.kt)(l.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import Match\nfrom gqlalchemy.query_builders.memgraph_query_builder import Operator\n\nquery = Match()\n        .node(variable="p")\n        .where(item="p", operator=Operator.LABEL_FILTER, expression="Person")\n        .return_()\n        .execute()\n'))),(0,n.kt)(o.Z,{value:"cypher",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p) WHERE p:Person RETURN *;\n")))),(0,n.kt)("p",null,"Just like in ",(0,n.kt)("a",{parentName:"p",href:"#filter-data-by-property-comparison"},"property comparison"),", you can\nuse different boolean operators to further filter the data."))}c.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var r=a(67294),n=a(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>w});var r=a(87462),n=a(67294),l=a(86010),o=a(12466),i=a(16550),p=a(91980),u=a(67392),s=a(50012);function d(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function m(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function c(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const r=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,p._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,l=m(e),[o,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[p,u]=h({queryString:a,groupId:r}),[d,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,s.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:r}),b=(()=>{const e=p??d;return c({value:e,tabValues:l})?e:null})();(0,n.useEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),y(e)}),[u,y,l]),tabValues:l}}var b=a(72389);const f="tabList__CuJ",k="tabItem_LNqP";function g(e){let{className:t,block:a,selectedValue:i,selectValue:p,tabValues:u}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const t=e.currentTarget,a=s.indexOf(t),r=u[a].value;r!==i&&(d(t),p(r))},c=e=>{var t;let a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;a=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;a=s[t]??s[s.length-1];break}}null==(t=a)||t.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>s.push(e),onKeyDown:c,onClick:m},o,{className:(0,l.Z)("tabs__item",k,null==o?void 0:o.className,{"tabs__item--active":i===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:r}=e;if(t){const e=a.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=y(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",f)},n.createElement(g,(0,r.Z)({},e,t)),n.createElement(N,(0,r.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return n.createElement(v,(0,r.Z)({key:String(t)},e))}}}]);