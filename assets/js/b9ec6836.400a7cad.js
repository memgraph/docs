"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21640],{3905:(e,l,n)=>{n.d(l,{Zo:()=>k,kt:()=>s});var t=n(67294);function a(e,l,n){return l in e?Object.defineProperty(e,l,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[l]=n,e}function i(e,l){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);l&&(t=t.filter((function(l){return Object.getOwnPropertyDescriptor(e,l).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var l=1;l<arguments.length;l++){var n=null!=arguments[l]?arguments[l]:{};l%2?i(Object(n),!0).forEach((function(l){a(e,l,n[l])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(l){Object.defineProperty(e,l,Object.getOwnPropertyDescriptor(n,l))}))}return e}function u(e,l){if(null==e)return{};var n,t,a=function(e,l){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],l.indexOf(n)>=0||(a[n]=e[n]);return a}(e,l);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],l.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),o=function(e){var l=t.useContext(p),n=l;return e&&(n="function"==typeof e?e(l):r(r({},l),e)),n},k=function(e){var l=o(e.components);return t.createElement(p.Provider,{value:l},e.children)},d={inlineCode:"code",wrapper:function(e){var l=e.children;return t.createElement(t.Fragment,{},l)}},m=t.forwardRef((function(e,l){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,k=u(e,["components","mdxType","originalType","parentName"]),m=o(n),s=a,N=m["".concat(p,".").concat(s)]||m[s]||d[s]||i;return n?t.createElement(N,r(r({ref:l},k),{},{components:n})):t.createElement(N,r({ref:l},k))}));function s(e,l){var n=arguments,a=l&&l.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var u={};for(var p in l)hasOwnProperty.call(l,p)&&(u[p]=l[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,r[1]=u;for(var o=2;o<i;o++)r[o]=n[o];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1169:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>o});var t=n(87462),a=(n(67294),n(3905));const i={id:"gss-functions",title:"Graph Style Script built-in functions",sidebar_label:"GSS functions"},r=void 0,u={unversionedId:"style-script/gss-functions",id:"style-script/gss-functions",title:"Graph Style Script built-in functions",description:"Graph Style Script has a large number of built-in functions. With these",source:"@site/lab/style-script/gss-functions.md",sourceDirName:"style-script",slug:"/style-script/gss-functions",permalink:"/docs/memgraph-lab/style-script/gss-functions",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/lab/style-script/gss-functions.md",tags:[],version:"current",frontMatter:{id:"gss-functions",title:"Graph Style Script built-in functions",sidebar_label:"GSS functions"},sidebar:"lab",previous:{title:"GSS colors",permalink:"/docs/memgraph-lab/style-script/gss-colors"},next:{title:"GSS variables",permalink:"/docs/memgraph-lab/style-script/gss-variables"}},p={},o=[{value:"Color functions",id:"color-functions",level:2},{value:"<code>Darker(color)</code>",id:"darkercolor",level:3},{value:"<code>Lighter(color)</code>",id:"lightercolor",level:3},{value:"<code>Mix(color1, color2)</code>",id:"mixcolor1-color2",level:3},{value:"<code>Red(color)</code>",id:"redcolor",level:3},{value:"<code>Green(color)</code>",id:"greencolor",level:3},{value:"<code>Blue(color)</code>",id:"bluecolor",level:3},{value:"<code>RGB(red, green, blue)</code>",id:"rgbred-green-blue",level:3},{value:"<code>RGBA(red, green, blue, alpha)</code>",id:"rgbared-green-blue-alpha",level:3},{value:"<code>Hue(color)</code>",id:"huecolor",level:3},{value:"<code>Saturation(color)</code>",id:"saturationcolor",level:3},{value:"<code>Lightness(color)</code>",id:"lightnesscolor",level:3},{value:"<code>HSL(hue, saturation, lightness)</code>",id:"hslhue-saturation-lightness",level:3},{value:"<code>HSLA(hue, saturation, lightness, alpha)</code>",id:"hslahue-saturation-lightness-alpha",level:3},{value:"<code>Alpha(color)</code>",id:"alphacolor",level:3},{value:"Conditional functions",id:"conditional-functions",level:2},{value:"<code>And(value...)</code>",id:"andvalue",level:3},{value:"<code>Or(value...)</code>",id:"orvalue",level:3},{value:"<code>Not(value)</code>",id:"notvalue",level:3},{value:"<code>Equals(value1, value2)</code>",id:"equalsvalue1-value2",level:3},{value:"<code>Greater(value1, value2)</code>",id:"greatervalue1-value2",level:3},{value:"<code>Less(number1, number2)</code>",id:"lessnumber1-number2",level:3},{value:"<code>If(condition, then, else)</code>",id:"ifcondition-then-else",level:3},{value:"Graph functions",id:"graph-functions",level:2},{value:"<code>HasLabel(node, label)</code>",id:"haslabelnode-label",level:3},{value:"<code>HasProperty(nodeOrEdge, propertyName)</code>",id:"haspropertynodeoredge-propertyname",level:3},{value:"<code>Id(nodeOrEdge)</code>",id:"idnodeoredge",level:3},{value:"<code>Identity(nodeOrEdge)</code>",id:"identitynodeoredge",level:3},{value:"<code>Labels(node)</code>",id:"labelsnode",level:3},{value:"<code>Property(nodeOrEdge, propertyName)</code>",id:"propertynodeoredge-propertyname",level:3},{value:"<code>Type(edge)</code>",id:"typeedge",level:3},{value:"<code>InEdges(node)</code>",id:"inedgesnode",level:3},{value:"<code>OutEdges(node)</code>",id:"outedgesnode",level:3},{value:"<code>Edges(graphOrNode)</code>",id:"edgesgraphornode",level:3},{value:"<code>Nodes(graphOrEdge)</code>",id:"nodesgraphoredge",level:3},{value:"<code>AdjacentNodes(node)</code>",id:"adjacentnodesnode",level:3},{value:"<code>StartNode(edge)</code>",id:"startnodeedge",level:3},{value:"<code>EndNode(edge)</code>",id:"endnodeedge",level:3},{value:"<code>NodeCount(graph)</code>",id:"nodecountgraph",level:3},{value:"<code>EdgeCount(graph)</code>",id:"edgecountgraph",level:3},{value:"Map functions",id:"map-functions",level:2},{value:"<code>MapKeys(map)</code>",id:"mapkeysmap",level:3},{value:"<code>MapValues(map)</code>",id:"mapvaluesmap",level:3},{value:"Math functions",id:"math-functions",level:2},{value:"<code>Add(value...)</code>",id:"addvalue",level:3},{value:"<code>Div(value1, value2)</code>",id:"divvalue1-value2",level:3},{value:"<code>Exp(value)</code>",id:"expvalue",level:3},{value:"<code>Log(value)</code>",id:"logvalue",level:3},{value:"<code>Log10(value)</code>",id:"log10value",level:3},{value:"<code>Mul(value...)</code>",id:"mulvalue",level:3},{value:"<code>Random()</code>",id:"random",level:3},{value:"<code>RandomInt(bound)</code>",id:"randomintbound",level:3},{value:"<code>Sqrt(value)</code>",id:"sqrtvalue",level:3},{value:"<code>Sub(value1, value2)</code>",id:"subvalue1-value2",level:3},{value:"<code>Floor(value)</code>",id:"floorvalue",level:3},{value:"<code>Ceil(value)</code>",id:"ceilvalue",level:3},{value:"<code>Round(value)</code>",id:"roundvalue",level:3},{value:"<code>Sum(array)</code>",id:"sumarray",level:3},{value:"<code>Avg(array)</code>",id:"avgarray",level:3},{value:"<code>Min(array)</code>",id:"minarray",level:3},{value:"<code>Max(array)</code>",id:"maxarray",level:3},{value:"Text functions",id:"text-functions",level:2},{value:"<code>Concat(value...)</code>",id:"concatvalue",level:3},{value:"<code>Slice(value, start, end?)</code>",id:"slicevalue-start-end",level:3},{value:"<code>Split(text, delimiter)</code>",id:"splittext-delimiter",level:3},{value:"<code>Format(formatString, value...)</code>",id:"formatformatstring-value",level:3},{value:"<code>Matches(text, regex)</code>",id:"matchestext-regex",level:3},{value:"<code>Replace(text, regex, replacement)</code>",id:"replacetext-regex-replacement",level:3},{value:"<code>LowerCase(text)</code>",id:"lowercasetext",level:3},{value:"<code>UpperCase(text)</code>",id:"uppercasetext",level:3},{value:"<code>Trim(text)</code>",id:"trimtext",level:3},{value:"Array functions",id:"array-functions",level:2},{value:"<code>Join(array, delimiter)</code>",id:"joinarray-delimiter",level:3},{value:"<code>Contains(array, value)</code>",id:"containsarray-value",level:3},{value:"<code>RandomOf(array)</code>",id:"randomofarray",level:3},{value:"<code>Find(array, function)</code>",id:"findarray-function",level:3},{value:"<code>Filter(array, function)</code>",id:"filterarray-function",level:3},{value:"<code>Map(array, function)</code>",id:"maparray-function",level:3},{value:"<code>Reduce(array, function, initialValue)</code>",id:"reducearray-function-initialvalue",level:3},{value:"<code>All(array, function)</code>",id:"allarray-function",level:3},{value:"<code>Any(array, function)</code>",id:"anyarray-function",level:3},{value:"<code>Uniq(array)</code>",id:"uniqarray",level:3},{value:"<code>Reverse(array)</code>",id:"reversearray",level:3},{value:"<code>Sort(array)</code>",id:"sortarray",level:3},{value:"<code>Next(iterator)</code>",id:"nextiterator",level:3},{value:"Type functions",id:"type-functions",level:2},{value:"<code>AsArray(value...)</code>",id:"asarrayvalue",level:3},{value:"<code>AsMap(key, value, ...)</code>",id:"asmapkey-value-",level:3},{value:"<code>AsIterator(array)</code>",id:"asiteratorarray",level:3},{value:"<code>AsNumber(value)</code>",id:"asnumbervalue",level:3},{value:"<code>AsText(value)</code>",id:"astextvalue",level:3},{value:"<code>TypeOf(value)</code>",id:"typeofvalue",level:3},{value:"<code>IsArray(value)</code>",id:"isarrayvalue",level:3},{value:"<code>IsMap(value)</code>",id:"ismapvalue",level:3},{value:"<code>IsIterator(value)</code>",id:"isiteratorvalue",level:3},{value:"<code>IsNumber(value)</code>",id:"isnumbervalue",level:3},{value:"<code>IsBoolean(value)</code>",id:"isbooleanvalue",level:3},{value:"<code>IsString(value)</code>",id:"isstringvalue",level:3},{value:"<code>IsNull(value)</code>",id:"isnullvalue",level:3},{value:"Utility functions",id:"utility-functions",level:2},{value:"<code>Define(name, value)</code>",id:"definename-value",level:3},{value:"<code>Function(arg..., body)</code>",id:"functionarg-body",level:3},{value:"<code>Execute(expression...)</code>",id:"executeexpression",level:3},{value:"<code>Get(object, key, defaultValue?)</code>",id:"getobject-key-defaultvalue",level:3},{value:"<code>Set(object, key, value)</code>",id:"setobject-key-value",level:3},{value:"<code>Del(map, key)</code>",id:"delmap-key",level:3},{value:"<code>Size(value)</code>",id:"sizevalue",level:3},{value:"<code>Coalesce(value...)</code>",id:"coalescevalue",level:3}],k={toc:o};function d(e){let{components:l,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},k,n,{components:l,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Graph Style Script has a large number of built-in functions. With these\nfunctions, you can achieve the right style for your graph."),(0,a.kt)("h2",{id:"color-functions"},"Color functions"),(0,a.kt)("h3",{id:"darkercolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Darker(color)")),(0,a.kt)("p",null,"Returns a darker version of the given color."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color-hover: Darker(#dd2222)")," will make the hover event color darker.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"lightercolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Lighter(color)")),(0,a.kt)("p",null,"Returns a lighter version of the given color."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color-hover: Lighter(#dd2222)")," sets a lighter on hover event color.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"mixcolor1-color2"},(0,a.kt)("inlineCode",{parentName:"h3"},"Mix(color1, color2)")),(0,a.kt)("p",null,"Mixes given colors (performs linear interpolation)."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Mix(#1B5E20, orange)"))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color1: Color")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color2: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"redcolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Red(color)")),(0,a.kt)("p",null,"Returns the red component of a given color. The value will be between 0 and 255\n(both inclusive)."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Red(mediumseagreen)")," will return the value 60."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Red(#6a0dad)")," will return the value 106.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"greencolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Green(color)")),(0,a.kt)("p",null,"Returns the green component of a given color. The value will be between 0 and\n255 (both inclusive)."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Green(mediumseagreen)")," will return the value 179."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Green(#6a0dad)")," will return the value 13.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"bluecolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Blue(color)")),(0,a.kt)("p",null,"Returns the blue component of a given color. The value will be between 0 and 255\n(both inclusive)."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Blue(mediumseagreen)")," will return the value 113."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Blue(#6a0dad)")," will return the value 173.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"rgbred-green-blue"},(0,a.kt)("inlineCode",{parentName:"h3"},"RGB(red, green, blue)")),(0,a.kt)("p",null,"Creates a new color with given components."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RGB (128, 159, 255)")," will return the color that has value #809fff.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"red: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"green: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"blue: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"rgbared-green-blue-alpha"},(0,a.kt)("inlineCode",{parentName:"h3"},"RGBA(red, green, blue, alpha)")),(0,a.kt)("p",null,"Creates a new color with given components. Same as ",(0,a.kt)("inlineCode",{parentName:"p"},"RGB")," with an additional\n",(0,a.kt)("inlineCode",{parentName:"p"},"alpha")," value (between 0 and 1) for transparency."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RGBA(128, 159, 255, 0.2)")," will return the color that has value #809fff33.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"red: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"green: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"blue: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"alpha: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"huecolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Hue(color)")),(0,a.kt)("p",null,"Returns the hue (HSL) component of a given color. The value will\nbe between 0 and 359 (both inclusive)."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Hue(aliceblue)")," will return value 208."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Hue(#00FFFF)")," will return value 180.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"saturationcolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Saturation(color)")),(0,a.kt)("p",null,"Returns the saturation (HSL) component of a given color. The value will\nbe between 0 and 100 (both inclusive)."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Saturation(aliceblue)")," will return value 100."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Saturation(#77a4ab)")," will return value 24.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"lightnesscolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Lightness(color)")),(0,a.kt)("p",null,"Returns the lightness (HSL) component of a given color. The value will\nbe between 0 and 100 (both inclusive)."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Lightness(aliceblue)")," will return value 97."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Lightness(#FFFF00)")," will return value 50.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"hslhue-saturation-lightness"},(0,a.kt)("inlineCode",{parentName:"h3"},"HSL(hue, saturation, lightness)")),(0,a.kt)("p",null,"Creates a new color with given HSL (hue, saturation, lightness) values. Hue\nvalue must be between 0 and 359 (both inclusive), saturation and lightness\nvalues must be between 0 and 100 (both inclusive)."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HSL(282, 23, 56)")," will return the color that has value #9975a9.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"hue: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"saturation: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lightness: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"hslahue-saturation-lightness-alpha"},(0,a.kt)("inlineCode",{parentName:"h3"},"HSLA(hue, saturation, lightness, alpha)")),(0,a.kt)("p",null,"Creates a new color with given components. Same as ",(0,a.kt)("inlineCode",{parentName:"p"},"HSL")," with an additional\n",(0,a.kt)("inlineCode",{parentName:"p"},"alpha")," value (between 0 and 1) for transparency."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HSLA(282, 23, 56, 0.2)")," will return the color that has value #9975a933.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"hue: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"saturation: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lightness: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"alpha: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Color"))),(0,a.kt)("h3",{id:"alphacolor"},(0,a.kt)("inlineCode",{parentName:"h3"},"Alpha(color)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"alpha")," (transparency) component of a given color. The value will\nbe between 0 and 1 (both inclusive)."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Alpha(aliceblue)")," will return value 1."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Alpha(#FFFF0033)")," will return value 0.2."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Alpha(RGBA(282, 23, 56, 0.8))")," will return value 0.8."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Alpha(HSLA(282, 23, 56, 0.2))")," will return value 0.2.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color: Color"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h2",{id:"conditional-functions"},"Conditional functions"),(0,a.kt)("h3",{id:"andvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"And(value...)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if all the given values are ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),". Returns False otherwise.\nExpressions after the first expression that evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," are not\nevaluated."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'And(HasProperty(node, "a"), HasProperty(node, "b"))')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if\nnode has properties ",(0,a.kt)("inlineCode",{parentName:"li"},"a")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"b"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"orvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Or(value...)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if any of the given values is ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),". Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"\notherwise. Expressions after the first expression that evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy")," are\nnot evaluated."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Or(Less(Property(node, "age"),20), Greater(Property(node, "age"),40))'),"\nreturns ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if the node's ",(0,a.kt)("inlineCode",{parentName:"li"},"age")," property is either less than 20 or greater\nthan 40.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"notvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Not(value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the value is ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," and returns ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," if the value is\n",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'@NodeStyle Not(HasProperty(node, "count")) {...}')," will apply the defined\nstyles to the nodes without the ",(0,a.kt)("inlineCode",{parentName:"li"},"count")," property.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"equalsvalue1-value2"},(0,a.kt)("inlineCode",{parentName:"h3"},"Equals(value1, value2)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if given values are equal, ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," otherwise. Numbers, Strings\nand Booleans are compared by value, Arrays and Maps by the content, Nodes and\nEdges are compared by identity."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Equals(Property(edge, "category"), "Food")')," checks if ",(0,a.kt)("inlineCode",{parentName:"li"},"edge.category"),' equals\nto text "Food".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Equals(Property(node, "name"), "Jon Snow")')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if the condition\nis met.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"greatervalue1-value2"},(0,a.kt)("inlineCode",{parentName:"h3"},"Greater(value1, value2)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Greater(Size(Labels(node)), 0)"))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"lessnumber1-number2"},(0,a.kt)("inlineCode",{parentName:"h3"},"Less(number1, number2)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is less than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Less(Property(node, "age"),40)')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if given ",(0,a.kt)("inlineCode",{parentName:"li"},"node.age")," is\nless than 40.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"ifcondition-then-else"},(0,a.kt)("inlineCode",{parentName:"h3"},"If(condition, then, else)")),(0,a.kt)("p",null,"If condition is ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy")," returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"then")," value, otherwise returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"else"),"\nvalue."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'label: If(HasProperty(node, "name"), Property(node, "name"), "No name")'),"\nreturns the property ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," as label if the node has one, or ",(0,a.kt)("inlineCode",{parentName:"li"},"No name")," if the\nnode doesn't have it.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"condition: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"then: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"else: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h2",{id:"graph-functions"},"Graph functions"),(0,a.kt)("h3",{id:"haslabelnode-label"},(0,a.kt)("inlineCode",{parentName:"h3"},"HasLabel(node, label)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the given graph node has a label, ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'HasLabel(node, "Category")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if a node has a label with the\nname ",(0,a.kt)("inlineCode",{parentName:"li"},"Category"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node: Node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"haspropertynodeoredge-propertyname"},(0,a.kt)("inlineCode",{parentName:"h3"},"HasProperty(nodeOrEdge, propertyName)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if a given graph node or relationship has the property\n",(0,a.kt)("inlineCode",{parentName:"p"},"propertyName"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'HasProperty(node, "City")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if a node has a property with\nthe name ",(0,a.kt)("inlineCode",{parentName:"li"},"City"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nodeOrEdge: Node | Relationship")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"propertyName: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"idnodeoredge"},(0,a.kt)("inlineCode",{parentName:"h3"},"Id(nodeOrEdge)")),(0,a.kt)("p",null,"Returns the ID of a given graph ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"edge"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: AsText(Id(node))")," sets the label to be the node ID.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nodeOrEdge: Node | Relationship"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"identitynodeoredge"},(0,a.kt)("inlineCode",{parentName:"h3"},"Identity(nodeOrEdge)")),(0,a.kt)("p",null,"Returns the ID of a given graph ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"edge"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: AsText(Identity(node))")," sets the label to be the node ID.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nodeOrEdge: Node | Relationship"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"labelsnode"},(0,a.kt)("inlineCode",{parentName:"h3"},"Labels(node)")),(0,a.kt)("p",null,"Returns the list of labels of the given graph node."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: Labels(node)")," sets the label to be a list of all the node's labels.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node: Node"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[string]"))),(0,a.kt)("h3",{id:"propertynodeoredge-propertyname"},(0,a.kt)("inlineCode",{parentName:"h3"},"Property(nodeOrEdge, propertyName)")),(0,a.kt)("p",null,"Returns the property with the name ",(0,a.kt)("inlineCode",{parentName:"p"},"propertyName")," of given graph node or\nrelationship."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'label: AsText(Property(node, "name"))')," creates a label using the node's\n",(0,a.kt)("inlineCode",{parentName:"li"},"name")," property.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nodeOrEdge: Node | Relationship")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"propertyName: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h3",{id:"typeedge"},(0,a.kt)("inlineCode",{parentName:"h3"},"Type(edge)")),(0,a.kt)("p",null,"Returns the type of a given graph relationship."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: Type(edge)")," sets the label to the relationship type.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edge: Relationship"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"inedgesnode"},(0,a.kt)("inlineCode",{parentName:"h3"},"InEdges(node)")),(0,a.kt)("p",null,"Returns the list of inbound edges from a given graph node."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(InEdges(node))")," sets the size to be equal to the count of inbound\nedges.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node: Node"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[Relationship]"))),(0,a.kt)("h3",{id:"outedgesnode"},(0,a.kt)("inlineCode",{parentName:"h3"},"OutEdges(node)")),(0,a.kt)("p",null,"Returns the list of outbound edges from a given graph node."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(OutEdges(node))")," sets the size to be equal to the count of\noutbound edges.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node: Node"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[Relationship]"))),(0,a.kt)("h3",{id:"edgesgraphornode"},(0,a.kt)("inlineCode",{parentName:"h3"},"Edges(graphOrNode)")),(0,a.kt)("p",null,"Returns the list of inbound and outbound edges from a given graph node. It\nreturns all the edges in the graph if the input is a graph."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(Edges(graph))")," sets the size to be equal to the count of all\ngraph edges."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(Edges(node))")," sets the size to be equal to the count of inbound\nand outbound edges.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graphOrNode: Graph | Node"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[Relationship]"))),(0,a.kt)("h3",{id:"nodesgraphoredge"},(0,a.kt)("inlineCode",{parentName:"h3"},"Nodes(graphOrEdge)")),(0,a.kt)("p",null,"Returns the list of start and end nodes from a given graph edge. It returns\nall the nodes in the graph if the input is a graph."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(Nodes(graph))")," sets the size to be equal to the count of all\ngraph nodes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(Nodes(edge))")," sets the size to be equal to the count of nodes\nthat edge connects (usually 2).")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graphOrEdge: Graph | Relationship"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[Node]"))),(0,a.kt)("h3",{id:"adjacentnodesnode"},(0,a.kt)("inlineCode",{parentName:"h3"},"AdjacentNodes(node)")),(0,a.kt)("p",null,"Returns the list of adjacent nodes for a given graph node. An adjacent node is a\nnode connected directly with a single edge, inbound or outbound."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: Size(AdjacentNodes(node))")," sets the size to be equal to the count of\nadjacent nodes.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node: Node"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[Node]"))),(0,a.kt)("h3",{id:"startnodeedge"},(0,a.kt)("inlineCode",{parentName:"h3"},"StartNode(edge)")),(0,a.kt)("p",null,"Returns the start (source) node for a given graph edge."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: AsText(Id(StartNode(edge)))")," sets the label of the edge to be the\nstart node ID.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edge: Relationship"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Node"))),(0,a.kt)("h3",{id:"endnodeedge"},(0,a.kt)("inlineCode",{parentName:"h3"},"EndNode(edge)")),(0,a.kt)("p",null,"Returns the end (target) node for a given graph edge."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label: AsText(Id(EndNode(edge)))")," sets the label of the edge to be the end\nnode ID.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edge: Relationship"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Node"))),(0,a.kt)("h3",{id:"nodecountgraph"},(0,a.kt)("inlineCode",{parentName:"h3"},"NodeCount(graph)")),(0,a.kt)("p",null,"Returns the total number of nodes in the graph."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: NodeCount(graph)")," sets the size to be the total number of nodes in the\ngraph.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graph: Graph"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"edgecountgraph"},(0,a.kt)("inlineCode",{parentName:"h3"},"EdgeCount(graph)")),(0,a.kt)("p",null,"Returns the total number of edges in the graph."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size: EdgeCount(graph)")," sets the size to be the total number of edges in the\ngraph.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graph: Graph"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h2",{id:"map-functions"},"Map functions"),(0,a.kt)("h3",{id:"mapkeysmap"},(0,a.kt)("inlineCode",{parentName:"h3"},"MapKeys(map)")),(0,a.kt)("p",null,"Returns an array of all map keys."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'MapKeys(AsMap("key1", "value1", "key2", "value2")))')," will return an array ",(0,a.kt)("inlineCode",{parentName:"li"},'["key1", "key2"]'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map: Map[string, any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[string]"))),(0,a.kt)("h3",{id:"mapvaluesmap"},(0,a.kt)("inlineCode",{parentName:"h3"},"MapValues(map)")),(0,a.kt)("p",null,"Returns an array of all map values."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'MapValues(AsMap("key1", "value1", "key2", 12)))')," will return an array ",(0,a.kt)("inlineCode",{parentName:"li"},'["value1", 12]'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map: Map[string, any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[any]"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Check other map functions down below: ",(0,a.kt)("inlineCode",{parentName:"p"},"AsMap"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"IsMap"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Set"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Del"),".")),(0,a.kt)("h2",{id:"math-functions"},"Math functions"),(0,a.kt)("h3",{id:"addvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Add(value...)")),(0,a.kt)("p",null,"Returns the sum of given values."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Add(10, Property(node, "age"))')," will give node.age + 10 if age is defined (as\na number).")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"divvalue1-value2"},(0,a.kt)("inlineCode",{parentName:"h3"},"Div(value1, value2)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," divided by ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Div(Property(node, "population"), 2)')," will divide ",(0,a.kt)("inlineCode",{parentName:"li"},"node.population")," with 2 if\npopulation is defined (as a number).")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"expvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Exp(value)")),(0,a.kt)("p",null,"Returns 2.71828... raised to the power value."),(0,a.kt)("p",null,"Example: -",(0,a.kt)("inlineCode",{parentName:"p"},"Exp(2)")," will return the number 7.38905609893"),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"logvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Log(value)")),(0,a.kt)("p",null,"Returns the logarithm (to the base e) of a value."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Log(Property(node, "sales"))'))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"log10value"},(0,a.kt)("inlineCode",{parentName:"h3"},"Log10(value)")),(0,a.kt)("p",null,"Returns the logarithm (to the base 10) of a value."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Log10(Property(node, "sales"))'))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"mulvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Mul(value...)")),(0,a.kt)("p",null,"Returns the product of given values."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Mul(2,10,3)")," returns 60 (2",(0,a.kt)("em",{parentName:"li"},"10"),"3).")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"random"},(0,a.kt)("inlineCode",{parentName:"h3"},"Random()")),(0,a.kt)("p",null,"Returns a random number between 0 (inclusive) and 1 (exclusive). All the\npossible numbers are equally likely to be returned."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Random()"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"randomintbound"},(0,a.kt)("inlineCode",{parentName:"h3"},"RandomInt(bound)")),(0,a.kt)("p",null,"Returns a random integer between 0 (inclusive) and bound (exclusive). All the\npossible numbers are equally likely to be returned."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'RandomInteger(Property(node, "population"))')," will return an integer between 0\nand ",(0,a.kt)("inlineCode",{parentName:"li"},"node.population")," if population is defined (as a number).")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bound: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"sqrtvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Sqrt(value)")),(0,a.kt)("p",null,"Returns the square root of a value."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Sqrt(Property(node, "surface"))')," will return the square root of a\n",(0,a.kt)("inlineCode",{parentName:"li"},"node.surface"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"subvalue1-value2"},(0,a.kt)("inlineCode",{parentName:"h3"},"Sub(value1, value2)")),(0,a.kt)("p",null,"Subtracts ",(0,a.kt)("inlineCode",{parentName:"p"},"value2")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"value1"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Sub(Property(node, "age"),10)')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"node.age")," - 10 if age is defined (as\na number).")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"floorvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Floor(value)")),(0,a.kt)("p",null,"Returns the largest integer less than or equal to the input value."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Floor(2.8)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Floor(2)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"ceilvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Ceil(value)")),(0,a.kt)("p",null,"Returns the smallest integer greater than or equal to the input value."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ceil(2.1)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ceil(2)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"roundvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Round(value)")),(0,a.kt)("p",null,"Returns the closest integer to the input value."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Round(2.1)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Round(2.5)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Round(2.8)")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"sumarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Sum(array)")),(0,a.kt)("p",null,"Returns the sum of all numbers in the input array. For an empty array,\nit returns ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sum(AsArray())")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sum(AsArray(1, 2, 3, 4))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"10"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sum(AsArray(5.0, 6.5))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"11.5"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[number]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"avgarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Avg(array)")),(0,a.kt)("p",null,"Returns the average of all numbers in the input array. An array\nshould have at least one number."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Avg(AsArray(1))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Avg(AsArray(1, 2, 3, 4, 5))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Avg(AsArray(4.8, 6.2))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"5.5"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[number]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"minarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Min(array)")),(0,a.kt)("p",null,"Returns the minimum of all numbers in the input array. An\narray should have at least one number."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Min(AsArray(1))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Min(AsArray(1, 2, 3, 4, 5))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Min(AsArray(4.8, 6.2))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"4.8"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[number]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"maxarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Max(array)")),(0,a.kt)("p",null,"Returns the maximum of all numbers in the input array. An\narray should have at least one number."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Max(AsArray(1))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Max(AsArray(1, 2, 3, 4, 5))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"5"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Max(AsArray(4.8, 6.2))")," will return number ",(0,a.kt)("inlineCode",{parentName:"li"},"6.2"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[number]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h2",{id:"text-functions"},"Text functions"),(0,a.kt)("h3",{id:"concatvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Concat(value...)")),(0,a.kt)("p",null,"Concatenates given strings or arrays."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Concat("City", " ", "of", " ", "London")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"City of London"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Concat(AsArray(1, 2, 3), AsArray(4, 5))")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 2, 3, 4, 5]"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: string | List[any]")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"value2: string | List[any]")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"valueN: string\n| List[any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string | List[any]"))),(0,a.kt)("h3",{id:"slicevalue-start-end"},(0,a.kt)("inlineCode",{parentName:"h3"},"Slice(value, start, end?)")),(0,a.kt)("p",null,"Returns a string or array slice defined by the start and optional end index.\nNegative indexes will also work."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Slice("Hello", 1)')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'"ello"'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Slice("Hello", -3, -1)')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'"ll"'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Slice(AsArray(1, 2, 3, 4, 5), 1, 3)")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"[2, 3]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Slice(AsArray(1, 2, 3, 4, 5), -2)")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"[4, 5]"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: string | List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start: number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"end?: number"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string | List[any]"))),(0,a.kt)("h3",{id:"splittext-delimiter"},(0,a.kt)("inlineCode",{parentName:"h3"},"Split(text, delimiter)")),(0,a.kt)("p",null,"Returns a string or array slice defined by the start and optional end index.\nNegative indexes will also work."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Split("Hello", "x")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'["Hello"]'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Split("Hello", "")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'["H", "e", "l", "l", "o"]'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Split("Hello", "lo")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'["Hel", ""]'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Split("Hello there", " ")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'["Hello", "there"]'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delimiter: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[string]"))),(0,a.kt)("h3",{id:"formatformatstring-value"},(0,a.kt)("inlineCode",{parentName:"h3"},"Format(formatString, value...)")),(0,a.kt)("p",null,"Substitutes occurrences of curly brace pairs in formatString with textual\nrepresentations of given values. The first occurrence is substituted with the\nfirst value, the second occurrence with the second value and so on."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Format("{}, {}!", "Hello", "World")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'"Hello, World!"'))),(0,a.kt)("p",null,"Text inside curly braces is ignored."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Format("{name}: {age}", "Antun", 23)')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'"Antun: 23"'))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"formatString: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"matchestext-regex"},(0,a.kt)("inlineCode",{parentName:"h3"},"Matches(text, regex)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if text matches regex. The evaluation of the regex is done with\nthe Javascript function ",(0,a.kt)("inlineCode",{parentName:"p"},"RegExp.test(text)"),"."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Matches("Graph style script", "style")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"True")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Matches("Graph style script", "st.* script")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"True")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Matches("Graph style script", "^G")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"True")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Matches("Graph style script", "GRAPH?")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"False"))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"regex: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"replacetext-regex-replacement"},(0,a.kt)("inlineCode",{parentName:"h3"},"Replace(text, regex, replacement)")),(0,a.kt)("p",null,"Returns a new string where a replacement value will be used instead of the\nfirst regex match. The creation of the regex is done with the Javascript\nfunction ",(0,a.kt)("inlineCode",{parentName:"p"},"new RegExp(text)"),"."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Replace("Graph style script", "xyz", "text")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'"Graph style script"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Replace("Graph style script", "style ", "")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'"Graph script"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Replace("Graph style script", "style.*", "rocks!")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'"Graph rocks!"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Replace("Graph style script", "s", "S!")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'"Graph S!tyle script"'))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"regex: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"replacement: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"lowercasetext"},(0,a.kt)("inlineCode",{parentName:"h3"},"LowerCase(text)")),(0,a.kt)("p",null,"Returns the value of a string converted to lower case."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'AsText(LowerCase(Property(node, "name")))')," will return node name in lower\ncase.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"uppercasetext"},(0,a.kt)("inlineCode",{parentName:"h3"},"UpperCase(text)")),(0,a.kt)("p",null,"Returns the value of a string converted to upper case."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'AsText(UpperCase(Property(node, "name")))')," will return the node name in upper\ncase.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"trimtext"},(0,a.kt)("inlineCode",{parentName:"h3"},"Trim(text)")),(0,a.kt)("p",null,"Returns the string without starting and ending whitespaces."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Trim("  Hello  there!  ")')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'"Hello  there!'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h2",{id:"array-functions"},"Array functions"),(0,a.kt)("h3",{id:"joinarray-delimiter"},(0,a.kt)("inlineCode",{parentName:"h3"},"Join(array, delimiter)")),(0,a.kt)("p",null,"Returns a new string by joining array elements with the delimiter."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'label: Join(Labels(node), ", ")')," creates a label which is a string made out\nof all the labels delimited with a comma.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delimiter: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"containsarray-value"},(0,a.kt)("inlineCode",{parentName:"h3"},"Contains(array, value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the array contains the defined value, ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Contains(AsArray(2,7,8,9), 2)")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"randomofarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"RandomOf(array)")),(0,a.kt)("p",null,"Returns a random element of the given array. All the elements are equally likely\nto be chosen."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RandomOf(AsArray(1,3,5,7,11,13))")," will return one of the array elements.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any | null"))),(0,a.kt)("h3",{id:"findarray-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"Find(array, function)")),(0,a.kt)("p",null,"Returns the first element of the given array for which the function yields\n",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy")," value."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Function argument ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," has one input argument which is the ",(0,a.kt)("inlineCode",{parentName:"p"},"item")," of the\narray."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Find(AsArray(1, 2, 3, 4), Function(item, Greater(item, 2)))")," will return\nnumber ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Find(AsArray(1, 2, 1, 1), Function(item, Greater(item, 2)))")," will return\n",(0,a.kt)("inlineCode",{parentName:"li"},"Null"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"function: Function"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any | null"))),(0,a.kt)("h3",{id:"filterarray-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"Filter(array, function)")),(0,a.kt)("p",null,"Returns the new array with elements of the given array for which the function\nyields ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy")," value."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Function argument ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," has one input argument which is the ",(0,a.kt)("inlineCode",{parentName:"p"},"item")," of the\narray."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Filter(AsArray(1, 2, 3, 4), Function(item, Greater(item, 2)))")," will return\narray ",(0,a.kt)("inlineCode",{parentName:"li"},"[3, 4]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Filter(AsArray(1, 2, 1, 1), Function(item, Greater(item, 2)))")," will return\n",(0,a.kt)("inlineCode",{parentName:"li"},"[]"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"function: Function"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[any]"))),(0,a.kt)("h3",{id:"maparray-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"Map(array, function)")),(0,a.kt)("p",null,"Returns the new array where each element of the given array is converted\n(mapped) with the defined function."),(0,a.kt)("p",null,"Function argument ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," has one input argument which is the ",(0,a.kt)("inlineCode",{parentName:"p"},"item")," of the\narray."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Map(AsArray(1, 2, 3, 4), Function(item, Mul(item, 2)))")," will return array\n",(0,a.kt)("inlineCode",{parentName:"li"},"[2, 4, 6, 8]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Map(AdjacentNodes(node), Function(n, Property(n, "name")))')," will return the\nlist of names of adjacent nodes.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"function: Function"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[any]"))),(0,a.kt)("h3",{id:"reducearray-function-initialvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Reduce(array, function, initialValue)")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Reduce()")," function returns a single value generated by reducing an array of values.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"function "),"parameter has two arguments, ",(0,a.kt)("inlineCode",{parentName:"p"},"previous reduced value")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"current array value"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"initalValue")," parameter specifies the initial value used for the first reduce iteration."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The following example does a sum of all elements in the array with the initial\nvalue of ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),". Because the array is empty, the returned value is the initial one: ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Reduce(\n  AsArray(),\n  Function(prev, current, Add(prev, current)),\n  1\n)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The same example as the above one, but with a defined array of three elements. The result\nwill be number ",(0,a.kt)("inlineCode",{parentName:"li"},"6"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Reduce(\n  AsArray(1, 2, 3),\n  Function(prev, current, Add(prev, current)),\n  0\n)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The following example joins all letters from an array into a single text ",(0,a.kt)("inlineCode",{parentName:"li"},'"ABC"'),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Reduce(\n  AsArray("A", "B", "C"),\n  Function(prev, current, Format("{}{}", prev, current)),\n  ""\n)\n')),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"function: Function")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"initalValue: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h3",{id:"allarray-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"All(array, function)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the function yields ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy")," value for all elements of the\ngiven array."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Function argument ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," has one input argument which is the ",(0,a.kt)("inlineCode",{parentName:"p"},"item")," of the\narray."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"All(AsArray(1, 2, 3, 4), Function(item, Greater(item, 2)))")," will return\n",(0,a.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"All(AsArray(1, 2, 1, 1), Function(item, Less(item, 3)))")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"function: Function"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"anyarray-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"Any(array, function)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the function yields ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy")," value for any element of the\ngiven array."),(0,a.kt)("p",null,"In GSS, there are six ",(0,a.kt)("inlineCode",{parentName:"p"},"Falsy")," values: ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," , ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," , ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\n(empty array), and ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," (empty map). Everything else is considered ",(0,a.kt)("inlineCode",{parentName:"p"},"Truthy"),"."),(0,a.kt)("p",null,"Function argument ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," has one input argument which is the ",(0,a.kt)("inlineCode",{parentName:"p"},"item")," of the\narray."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Any(AsArray(1, 2, 3, 4), Function(item, Greater(item, 2)))")," will return\n",(0,a.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Any(AsArray(1, 2, 1, 1), Function(item, Greater(item, 3)))")," will return\n",(0,a.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"function: Function"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"uniqarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Uniq(array)")),(0,a.kt)("p",null,"Returns an array of unique elements of the given array."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Uniq(AsArray(2,1,1,2,1,3,1))")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"[2, 1, 3]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Uniq(AsArray("1", "1", 1, True, True, 1))')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},'["1", 1, True]'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[any]"))),(0,a.kt)("h3",{id:"reversearray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Reverse(array)")),(0,a.kt)("p",null,"Returns an array with reversed elements of the given array."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Reverse(AsArray(1, 2, 3))")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"[3, 2, 1]"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[any]"))),(0,a.kt)("h3",{id:"sortarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"Sort(array)")),(0,a.kt)("p",null,"Returns an array with sorted items. The sort works only on arrays with\nprimitive types: strings, numbers, and booleans."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sort(AsArray(3, 2, 1, 8, 3))")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 2, 3, 3, 8]"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[string] | List[boolean] | List[number]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[string] | List[boolean] | List[number]"))),(0,a.kt)("h3",{id:"nextiterator"},(0,a.kt)("inlineCode",{parentName:"h3"},"Next(iterator)")),(0,a.kt)("p",null,"Returns the next item in the iterator. If iterator has no items,\nit returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Null"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Next(AsIterator(AsArray(3, 2, 1)))")," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"iterator: Iterator[any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any | null"))),(0,a.kt)("h2",{id:"type-functions"},"Type functions"),(0,a.kt)("h3",{id:"asarrayvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"AsArray(value...)")),(0,a.kt)("p",null,"Creates and returns an array of given values. The function can be used\nto convert ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator")," back to the array with ",(0,a.kt)("inlineCode",{parentName:"p"},"AsArray(AsIterator(AsArray(1, 2)))"),"."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'AsArray("Alfa", "Bravo", "Charlie", "Delta", "Echo")')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'["Alfa", "Bravo",\n"Charlie", "Delta", "Echo"]')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AsArray(AsIterator(AsArray(1, 2, 3)))")," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value2: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List[any]"))),(0,a.kt)("h3",{id:"asmapkey-value-"},(0,a.kt)("inlineCode",{parentName:"h3"},"AsMap(key, value, ...)")),(0,a.kt)("p",null,"Creates and returns a map of given pairs of keys and values. There must be an even\nnumber of inputs because each key should have its own value. Keys must be type of string.\nValues can be any type."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'AsMap("1", 10, "2", 20)')," -> ",(0,a.kt)("inlineCode",{parentName:"li"},'{"1": 10, "2": 20}'))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key1: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"keyN: string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Map[string, any]"))),(0,a.kt)("h3",{id:"asiteratorarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"AsIterator(array)")),(0,a.kt)("p",null,"Creates and returns an iterator of given array. Iterator values can be used only once with\n",(0,a.kt)("inlineCode",{parentName:"p"},"Next")," function until all values have been used."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AsIterator(AsArray(1, 2, 3))")," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"(1, 2, 3)"))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array: List[any]"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Iterator[any]"))),(0,a.kt)("h3",{id:"asnumbervalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"AsNumber(value)")),(0,a.kt)("p",null,"Parses the given string or boolean and returns a number. The string should\ncontain only one number in base 10 and nothing else. Boolean ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," returns\nnumber 1. Boolean ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," returns number 0."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'AsNumber("8")')," will return number 8.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: string | number | boolean"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"astextvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"AsText(value)")),(0,a.kt)("p",null,"Returns a textual representation of a given value."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'AsText(Property(node, "age"))')," will return ",(0,a.kt)("inlineCode",{parentName:"li"},"node.age")," as string.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"typeofvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"TypeOf(value)")),(0,a.kt)("p",null,"Returns the type of a given value. Type is returned as a string. Following types\nare used in GSS:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"number"')," - represents numbers"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"boolean"')," - represents booleans (",(0,a.kt)("inlineCode",{parentName:"li"},"True")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"string"')," - represents textual values"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Null"')," - represents null value (",(0,a.kt)("inlineCode",{parentName:"li"},"Null"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Color"')," - represents colors"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Node"')," - represents graph node"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Edge"')," - represents graph relationship"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Graph"')," - represents graph"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"List"')," - represents an array object (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Iterator"')," - represents an iterator object (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"(1, 2, 3)"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Map"')," - represents a map object (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},'{ "name": "GSS" }'),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"Function"')," - represents function object")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'TypeOf(Property(node, "name"))')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"string"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h3",{id:"isarrayvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsArray(value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the input value is an array, otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsArray(10.2)")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsArray(AsArray(1, 2, 3))")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"ismapvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsMap(value)")),(0,a.kt)("p",null,"Returns True if the input value is a map, otherwise False."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsMap(10.2)")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'IsMap(AsMap("key", "value"))')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"isiteratorvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsIterator(value)")),(0,a.kt)("p",null,"Returns True if the input value is an iterator, otherwise False."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsIterator(AsArray(1, 2, 3))")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsIterator(AsIterator(AsArray(1, 2, 3)))")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"isnumbervalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsNumber(value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the input value is a number, otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsNumber(10.2)")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"isbooleanvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsBoolean(value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the input value is a boolean, otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsBoolean(False)")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"isstringvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsString(value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the input value is a string, otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'IsString("text")')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h3",{id:"isnullvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"IsNull(value)")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," if the input value is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Null"),", otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsNull(Null)")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,a.kt)("h2",{id:"utility-functions"},"Utility functions"),(0,a.kt)("h3",{id:"definename-value"},(0,a.kt)("inlineCode",{parentName:"h3"},"Define(name, value)")),(0,a.kt)("p",null,"Binds the given value to the given name. Names can be redefined."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Define(city, "London")')," will set the value of the ",(0,a.kt)("inlineCode",{parentName:"li"},"city")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"London"),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name: Variable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("h3",{id:"functionarg-body"},(0,a.kt)("inlineCode",{parentName:"h3"},"Function(arg..., body)")),(0,a.kt)("p",null,"Creates a function. ",(0,a.kt)("inlineCode",{parentName:"p"},"body")," is the expression to evaluate when the function is\ncalled. All arguments except ",(0,a.kt)("inlineCode",{parentName:"p"},"body")," are argument names of the function to\ncreate. When the created function is called names ",(0,a.kt)("inlineCode",{parentName:"p"},"arg1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"arg2"),", ... are bound\nto function arguments and available in the ",(0,a.kt)("inlineCode",{parentName:"p"},"body")," expression. This function is\nmost useful in combination with ",(0,a.kt)("inlineCode",{parentName:"p"},"Define"),"."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Define(makeGreeting, Function(firstName, Format("Hello, {}!", firstName)))\nmakeGreeting("World") // -> Hello, World!\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Define(pow, Function(x, n, If(Equals(n, 1), x, Mul(x, pow(x, Sub(n, 1))))))\npow(2, 10) // -> 1024\n")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arg1: Variable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"argN: Variable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"body: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Function"))),(0,a.kt)("h3",{id:"executeexpression"},(0,a.kt)("inlineCode",{parentName:"h3"},"Execute(expression...)")),(0,a.kt)("p",null,"Executes all expressions given as arguments. The function comes in handy when there\nare set of commands that should be executed, e.g. setting several items on the map\nwith ",(0,a.kt)("inlineCode",{parentName:"p"},"Set")," and returning the last value."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Define(map, AsMap())\nDefine(mapKeys, Execute(\n  Set(map, "key1", "value1"),\n  Set(map, "key2", "value2"),\n  MapKeys(map),\n))\n')),(0,a.kt)("p",null,"Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," will be ",(0,a.kt)("inlineCode",{parentName:"p"},'{"key1": "value1", "key2": "value2"}'),". Execution returns the\nlast value of the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"mapKeys")," which is an array of keys: ",(0,a.kt)("inlineCode",{parentName:"p"},'["key1", "key2"]'),"."),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expression1: Expression")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expressionN: Expression"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h3",{id:"getobject-key-defaultvalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Get(object, key, defaultValue?)")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is a List, returns the element with index ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," of list ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," (indexing\nis zero based). If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is a Map, returns the value for key ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),". If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is\na string, returns the letter with index ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," of string ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," (indexing is zero\nbased). If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is a Node, returns the value for key ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),". If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is a\nRelationship, returns the value for key ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,a.kt)("p",null,"In case of invalid input or missing value, it returns ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultValue")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," if\ndefault value is not defined."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Get(AsArray(3,6,7,3), 2)")," returns number 7."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Get(Property(node, "map"), "year") will get the property '),"year` from the map\nof node properties.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"object: List | Map | string | Node | Relationship")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key: number | string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defaultValue?: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h3",{id:"setobject-key-value"},(0,a.kt)("inlineCode",{parentName:"h3"},"Set(object, key, value)")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is a List, sets the value with index ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," (indexing is zero based). Value will\nbe returned on successful set. If index is out of ranges of the list, nothing will\nbe set, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," will be returned."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"obj")," is a Map, sets the value for key ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),". Key must be a string type. Input value\nwill be returned."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Define(array, AsArray(1, 2, 3)) Set(array, 1, 5)")," returns number ",(0,a.kt)("inlineCode",{parentName:"li"},"5")," and array will be ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 5, 3]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Define(map, AsMap()) Set(map, "key", "value")')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},'"value"')," and map will be ",(0,a.kt)("inlineCode",{parentName:"li"},'{"key": "value"}'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"object: List | Map")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key: number | string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any | null"))),(0,a.kt)("h3",{id:"delmap-key"},(0,a.kt)("inlineCode",{parentName:"h3"},"Del(map, key)")),(0,a.kt)("p",null,"Removes a value from a map under key ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),". Removed value will be returned. If key\nwas missing in a map, ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," will be returned."),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Define(map, AsMap("a", 1, "b", 2)) Del(map, "a")')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," and map will be ",(0,a.kt)("inlineCode",{parentName:"li"},'{"b": 2}'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Define(map, AsMap("a", 1)) Del(map, "b")')," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Null")," and map will be ",(0,a.kt)("inlineCode",{parentName:"li"},'{"a": 1}'),".")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map: Map[string, any]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key: string"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any | null"))),(0,a.kt)("h3",{id:"sizevalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Size(value)")),(0,a.kt)("p",null,"If value is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Map"),", returns its size. If value is of type\n",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", returns its length. If value is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Node"),", returns the size of\nnode properties. If value is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Relationship"),", returns the size of\nrelationship properties. If value is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Graph"),", returns the size of the\ngraph (nodes and relationships)"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'Size(Property(node, "name"))')," returns the size of the node's ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," property.")),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value: List | Map | string | Node | Relationship | Graph"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("h3",{id:"coalescevalue"},(0,a.kt)("inlineCode",{parentName:"h3"},"Coalesce(value...)")),(0,a.kt)("p",null,"Returns the first non-null value. In case of empty call or all values being\n",(0,a.kt)("inlineCode",{parentName:"p"},"Null"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Null")," will be returned."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Coalesce()")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Null")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Coalesce(Null, 1, False)")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"1"))),(0,a.kt)("p",null,"Inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value1: any")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueN: any"))),(0,a.kt)("p",null,"Outputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any | null"))))}d.isMDXComponent=!0}}]);