"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93562],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var u=n.createContext({}),p=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=p(a),m=i,g=h["".concat(u,".").concat(m)]||h[m]||s[m]||l;return a?n.createElement(g,r(r({ref:t},d),{},{components:a})):n.createElement(g,r({ref:t},d))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=h;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5308:(e,t,a)=>{a.r(t),a.d(t,{Highlight:()=>d,assets:()=>u,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));a(65488),a(85162);const l={id:"igraphalg",title:"igraphalg",sidebar_label:"igraphalg"},r=void 0,o={unversionedId:"query-modules/python/igraphalg",id:"query-modules/python/igraphalg",title:"igraphalg",description:"docs-source",source:"@site/mage/query-modules/python/igraphalg.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/igraphalg",permalink:"/docs/mage/query-modules/python/igraphalg",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/igraphalg.md",tags:[],version:"current",frontMatter:{id:"igraphalg",title:"igraphalg",sidebar_label:"igraphalg"},sidebar:"mage",previous:{title:"graph_coloring",permalink:"/docs/mage/query-modules/python/graph-coloring"},next:{title:"import_util",permalink:"/docs/mage/query-modules/python/import-util"}},u={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>get_all_simple_paths(v, to, cutoff)</code>",id:"get_all_simple_pathsv-to-cutoff",level:3},{value:"Input:",id:"input",level:4},{value:"Output:",id:"output",level:4},{value:"Usage:",id:"usage",level:4},{value:"<code>spanning_tree(weights, directed)</code>",id:"spanning_treeweights-directed",level:3},{value:"Input:",id:"input-1",level:4},{value:"Output:",id:"output-1",level:4},{value:"Usage:",id:"usage-1",level:4},{value:"<code>pagerank(damping, weights, directed,implementation)</code>",id:"pagerankdamping-weights-directedimplementation",level:3},{value:"Input:",id:"input-2",level:4},{value:"Output:",id:"output-2",level:4},{value:"Usage:",id:"usage-2",level:4},{value:"<code>get_shortest_path(source, target, weights, directed)</code>",id:"get_shortest_pathsource-target-weights-directed",level:3},{value:"Input:",id:"input-3",level:4},{value:"Output:",id:"output-3",level:4},{value:"Usage:",id:"usage-3",level:4},{value:"<code>shortest_path_length(source, target, weights, directed)</code>",id:"shortest_path_lengthsource-target-weights-directed",level:3},{value:"Input:",id:"input-4",level:4},{value:"Output:",id:"output-4",level:4},{value:"Usage:",id:"usage-4",level:4},{value:"<code>topological_sort(mode)</code>",id:"topological_sortmode",level:3},{value:"Input:",id:"input-5",level:4},{value:"Output:",id:"output-5",level:4},{value:"Usage:",id:"usage-5",level:4},{value:"<code>maxflow(source, target, capacity)</code>",id:"maxflowsource-target-capacity",level:3},{value:"Input:",id:"input-6",level:4},{value:"Output:",id:"output-6",level:4},{value:"Usage:",id:"usage-6",level:4},{value:"<code>mincut(source, target, capacity,directed)</code>",id:"mincutsource-target-capacitydirected",level:3},{value:"Input:",id:"input-7",level:4},{value:"Output:",id:"output-7",level:4},{value:"Usage:",id:"usage-7",level:4},{value:"<code>community_leiden(objective_function, weights, resolution_parameter, beta, initial_membership, n_iterations, node_weights)</code>",id:"community_leidenobjective_function-weights-resolution_parameter-beta-initial_membership-n_iterations-node_weights",level:3},{value:"Input:",id:"input-8",level:4},{value:"Output:",id:"output-8",level:4},{value:"Usage:",id:"usage-8",level:4},{value:"<code>all_shortest_path_lengths( weights, directed)</code>",id:"all_shortest_path_lengths-weights-directed",level:3},{value:"Input:",id:"input-9",level:4},{value:"Output:",id:"output-9",level:4},{value:"Usage:",id:"usage-9",level:4}],d=e=>{let{children:t,color:a}=e;return(0,i.kt)("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},s={toc:p,Highlight:d};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/igraphalg.py"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-igraphalg-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"The  ",(0,i.kt)("strong",{parentName:"p"},"igraphalg")," module provides a comprehensive set of thin wrappers around some of the algorithms present in the ",(0,i.kt)("a",{parentName:"p",href:"https://igraph.org/"},"igraph")," package. The wrapper functions can create an igraph compatible graph-like object that can stream the native database graph directly, significantly lowering memory usage."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Trait"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Module type")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"module")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Implementation")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"Python")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Graph direction")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"directed")),"/",(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"undirected")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Edge weights")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"weighted")),"/",(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"unweighted")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Parallelism")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{color:"#FB6E00",mdxType:"Highlight"},(0,i.kt)("strong",{parentName:"td"},"sequential")))))),(0,i.kt)("h2",{id:"procedures"},"Procedures"),(0,i.kt)("h3",{id:"get_all_simple_pathsv-to-cutoff"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_all_simple_paths(v, to, cutoff)")),(0,i.kt)("p",null,"Returns all simple paths in the graph ",(0,i.kt)("inlineCode",{parentName:"p"},"G")," from source to target. A simple path is a path with no repeated nodes."),(0,i.kt)("h4",{id:"input"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"v: Vertex")," \u27a1 Path's starting node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to: Vertex")," \u27a1 Path's ending node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cutoff: int (default=-1)")," \u27a1 Maximum length of the considered path. If negative, paths of all lengths are considered.")),(0,i.kt)("h4",{id:"output"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path: List[Vertex]")," \u27a1 List of vertices for a certain path. If there are no paths between the source and the target within the given cutoff, there is no output.")),(0,i.kt)("h4",{id:"usage"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Label), (m:Label)\nCALL igraphalg.get_all_simple_paths(n, m, 5) YIELD *\nRETURN path;\n")),(0,i.kt)("h3",{id:"spanning_treeweights-directed"},(0,i.kt)("inlineCode",{parentName:"h3"},"spanning_tree(weights, directed)")),(0,i.kt)("p",null,"Returns a minimum spanning tree on a graph ",(0,i.kt)("inlineCode",{parentName:"p"},"G"),".\nA ",(0,i.kt)("em",{parentName:"p"},"minimum spanning tree")," is a subset of the edges of a connected graph that connects all of the vertices without any cycles."),(0,i.kt)("h4",{id:"input-1"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weights: string (default=NULL)")," \u27a1 Data key to use for edge weights."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directed: bool (default=False)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," the graph is directed, otherwise it's undirected.")),(0,i.kt)("h4",{id:"output-1"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tree: List[List[Vertex]]")," \u27a1 A minimum spanning tree or forest.")),(0,i.kt)("h4",{id:"usage-1"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL igraphalg.spanning_tree() \nYIELD *\nRETURN tree;\n")),(0,i.kt)("h3",{id:"pagerankdamping-weights-directedimplementation"},(0,i.kt)("inlineCode",{parentName:"h3"},"pagerank(damping, weights, directed,implementation)")),(0,i.kt)("p",null,"Returns the PageRank of the nodes in the graph."),(0,i.kt)("p",null,"PageRank computes a ranking of the nodes in graph G based on the structure of the incoming links. It was originally designed as an algorithm to rank web pages."),(0,i.kt)("h4",{id:"input-2"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"damping: double (default=0.85)")," \u27a1 Damping parameter for PageRank."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'weights: string (default="weight")')," \u27a1 Edge data key to use as a weight. If ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", weights are set to 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directed: bool (default=True)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," the graph is directed, otherwise it's undirected."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'implementation: string (default="prpack")')," \u27a1 Algorithm used for calculating PageRank values. The algorithm can be either ",(0,i.kt)("inlineCode",{parentName:"li"},"prpack")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"arpack"),".")),(0,i.kt)("h4",{id:"output-2"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 Vertex for which the PageRank is calculated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rank: double")," \u27a1 Node's PageRank value.")),(0,i.kt)("h4",{id:"usage-2"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL igraphalg.pagerank() YIELD *\nRETURN node, rank;\n")),(0,i.kt)("h3",{id:"get_shortest_pathsource-target-weights-directed"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_shortest_path(source, target, weights, directed)")),(0,i.kt)("p",null,"Compute the shortest path in the graph."),(0,i.kt)("h4",{id:"input-3"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source: Vertex (default=NULL)")," \u27a1 Path's starting node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"target: Vertex (default=NULL)")," \u27a1 Path's ending node. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weights: string (default=NULL)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", every edge has weight/distance/cost 1. If the value is a property name, use that property as the edge weight. If an edge doesn't have a property, the value defaults to 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directed: bool (default=True)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the graph is directed, otherwise, it's undirected.")),(0,i.kt)("h4",{id:"output-3"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path: List[Vertex]")," \u27a1  Path between ",(0,i.kt)("inlineCode",{parentName:"li"},"source")," node and ",(0,i.kt)("inlineCode",{parentName:"li"},"target")," node.")),(0,i.kt)("h4",{id:"usage-3"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Label), (m:Label)\nCALL igraphalg.get_shortest_path(n, m) YIELD *\nRETURN path;\n")),(0,i.kt)("h3",{id:"shortest_path_lengthsource-target-weights-directed"},(0,i.kt)("inlineCode",{parentName:"h3"},"shortest_path_length(source, target, weights, directed)")),(0,i.kt)("p",null,"Compute the shortest path length in the graph."),(0,i.kt)("h4",{id:"input-4"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source: Vertex (default=NULL)")," \u27a1 Path's starting node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"target: Vertex (default=NULL)")," \u27a1 Path's ending node. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weights: string (default=NULL)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", every edge has weight/distance/cost 1. If the value is a property name, use that property as the edge weight. If an edge doesn't have a property, the value defaults to 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directed: bool (default=True)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the graph is directed, otherwise, it's undirected.")),(0,i.kt)("h4",{id:"output-4"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"length: double")," \u27a1 Shortest path length between the ",(0,i.kt)("inlineCode",{parentName:"li"},"source")," node and ",(0,i.kt)("inlineCode",{parentName:"li"},"target")," node. If there is no path it returns ",(0,i.kt)("inlineCode",{parentName:"li"},"inf"),".")),(0,i.kt)("h4",{id:"usage-4"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (n:Label), (m:Label)\nCALL igraphalg.shortest_path_length(n, m) YIELD length\nRETURN length;\n")),(0,i.kt)("h3",{id:"topological_sortmode"},(0,i.kt)("inlineCode",{parentName:"h3"},"topological_sort(mode)")),(0,i.kt)("p",null,"Returns nodes in topologically sorted order.\nA ",(0,i.kt)("em",{parentName:"p"},"topological sort")," is a non-unique permutation of the nodes such that an edge from ",(0,i.kt)("inlineCode",{parentName:"p"},"u")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," implies that ",(0,i.kt)("inlineCode",{parentName:"p"},"u")," appears before ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," in the topological sort order."),(0,i.kt)("h4",{id:"input-5"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'mode: string (default="out")')," \u27a1 Specifies how to use the direction of the edges. For ",(0,i.kt)("inlineCode",{parentName:"li"},"out"),", the sorting order ensures that each node comes before all nodes to which it has edges, so nodes with no incoming edges go first. For ",(0,i.kt)("inlineCode",{parentName:"li"},"in"),", it is quite the opposite: each node comes before all nodes from which it receives edges. Nodes with no outgoing edges go first.")),(0,i.kt)("h4",{id:"output-5"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nodes: List[Vertex]")," \u27a1 A list of nodes in topological sorted order.")),(0,i.kt)("h4",{id:"usage-5"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL igraphalg.topological_sort() YIELD *\nRETURN nodes;\n")),(0,i.kt)("h3",{id:"maxflowsource-target-capacity"},(0,i.kt)("inlineCode",{parentName:"h3"},"maxflow(source, target, capacity)")),(0,i.kt)("p",null,"The maximum flow problem consists of finding a flow through a graph such that it is the maximum possible flow."),(0,i.kt)("h4",{id:"input-6"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source: Vertex")," \u27a1 Source node from which the maximum flow is calculated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"target: Vertex")," \u27a1 Sink node to which the max flow is calculated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'capacity: string (default="weight")')," \u27a1 Edge property which is used as the flow capacity of the edge.")),(0,i.kt)("h4",{id:"output-6"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_flow: Number")," \u27a1 Maximum flow of the network, from source to sink")),(0,i.kt)("h4",{id:"usage-6"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (source {id: 0}), (sink {id: 5})\nCALL igraphalg.maxflow(source, sink, "weight")\nYIELD max_flow\nRETURN max_flow;\n')),(0,i.kt)("h3",{id:"mincutsource-target-capacitydirected"},(0,i.kt)("inlineCode",{parentName:"h3"},"mincut(source, target, capacity,directed)")),(0,i.kt)("p",null,"Minimum cut calculates the minimum st-cut between two vertices in a graph."),(0,i.kt)("h4",{id:"input-7"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source: Vertex")," \u27a1 Source node from which the maximum flow is calculated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"target: Vertex")," \u27a1 Sink node to which the max flow is calculated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'capacity: string (default="weight")')," \u27a1 Edge property which is used as the capacity of the edge.")),(0,i.kt)("h4",{id:"output-7"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 Vertex in graph."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"partition_id: int")," \u27a1 Id of the partition where ",(0,i.kt)("inlineCode",{parentName:"li"},"node")," belongs after min-cut.")),(0,i.kt)("h4",{id:"usage-7"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"  MATCH (source {id: 0}), (sink {id: 5})\n  CALL igraphalg.mincut(source, sink)\n  YIELD node, partition_id \n  RETURN node, partition_id;\n")),(0,i.kt)("h3",{id:"community_leidenobjective_function-weights-resolution_parameter-beta-initial_membership-n_iterations-node_weights"},(0,i.kt)("inlineCode",{parentName:"h3"},"community_leiden(objective_function, weights, resolution_parameter, beta, initial_membership, n_iterations, node_weights)")),(0,i.kt)("p",null,"Finding community structure of a graph using the Leiden algorithm of Traag, van Eck & Waltman."),(0,i.kt)("h4",{id:"input-8"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'objective_function: string (default="CPM")')," \u27a1 Whether to use the Constant Potts Model (CPM) or modularity. Must be either ",(0,i.kt)("inlineCode",{parentName:"li"},"CPM")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"modularity"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weights: string (default=NULL)")," \u27a1 If a string is present, use this edge attribute as the edge weight if it isn't edge weights default to 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resolution_parameter: float (default=1.0)")," \u27a1 Higher resolutions lead to smaller communities, while lower resolutions lead to fewer larger communities."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beta: float (default=0.01)")," \u27a1 Parameter affecting the randomness in the Leiden algorithm. This affects only the refinement step of the algorithm."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initial_membership: List[int](default=NULL)")," \u27a1  If provided, the Leiden algorithm will try to improve this provided membership. If no argument is provided, the algorithm simply starts from the singleton partition."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n_iterations: int (default=2)")," \u27a1 The number of iterations to iterate the Leiden algorithm. Each iteration may improve the partition further.\n",(0,i.kt)("inlineCode",{parentName:"li"},"vertex_weights: List[float] (default=NULL)")," \u27a1 The vertex weights used in the Leiden algorithm. If this is not provided, it will be automatically determined based on the objective_function.")),(0,i.kt)("h4",{id:"output-8"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node: Vertex")," \u27a1 Vertex in graph."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"community_id: int")," \u27a1 Id of community where ",(0,i.kt)("inlineCode",{parentName:"li"},"node")," belongs.")),(0,i.kt)("h4",{id:"usage-8"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"    CALL igraphalg.community_leiden() \n    YIELD node, community_id\n    RETURN node, community_id;\n")),(0,i.kt)("h3",{id:"all_shortest_path_lengths-weights-directed"},(0,i.kt)("inlineCode",{parentName:"h3"},"all_shortest_path_lengths( weights, directed)")),(0,i.kt)("p",null,"Compute all shortest path lengths in the graph."),(0,i.kt)("h4",{id:"input-9"},"Input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weights: string (default=NULL)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", every edge has weight/distance/cost 1. If the value is a property name, use that property as the edge weight. If an edge doesn't have a property, the value defaults to 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directed: bool (default=True)")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the graph is directed, otherwise, it's undirected.")),(0,i.kt)("h4",{id:"output-9"},"Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src_node: Vertex")," \u27a1 ",(0,i.kt)("inlineCode",{parentName:"li"},"Source")," node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dest_node: Vertex")," \u27a1 ",(0,i.kt)("inlineCode",{parentName:"li"},"Destination")," node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"length: double")," \u27a1 If ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the graph is directed, otherwise, it's undirected.")),(0,i.kt)("h4",{id:"usage-9"},"Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL igraphalg.all_shortest_path_length()\n  YIELD src_node, dest_node, length\n  RETURN src_node, dest_node, length;\n")))}h.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),i=a(86010);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,r),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(87462),i=a(67294),l=a(86010),r=a(72389),o=a(67392),u=a(7094),p=a(12466);const d="tabList__CuJ",s="tabItem_LNqP";function h(e){var t;const{lazy:a,block:r,defaultValue:h,values:m,groupId:g,className:c}=e,k=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=m??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,o.l)(N,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===h?h:h??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==v&&!N.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:b}=(0,u.U)(),[w,C]=(0,i.useState)(v),_=[],{blockElementScrollPositionUntilNextRender:L}=(0,p.o5)();if(null!=g){const e=y[g];null!=e&&e!==w&&N.some((t=>t.value===e))&&C(e)}const I=e=>{const t=e.currentTarget,a=_.indexOf(t),n=N[a].value;n!==w&&(L(t),C(n),null!=g&&b(g,String(n)))},x=e=>{var t;let a=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;a=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;a=_[t]??_[_.length-1];break}}null==(t=a)||t.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},c)},N.map((e=>{let{value:t,label:a,attributes:r}=e;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>_.push(e),onKeyDown:x,onClick:I},r,{className:(0,l.Z)("tabs__item",s,null==r?void 0:r.className,{"tabs__item--active":w===t})}),a??t)}))),a?(0,i.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,r.Z)();return i.createElement(h,(0,n.Z)({key:String(t)},e))}}}]);