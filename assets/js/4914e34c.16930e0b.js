"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[31914],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),y=s(t),m=a,f=y["".concat(i,".").concat(m)]||y[m]||u[m]||o;return t?n.createElement(f,l(l({ref:r},c),{},{components:t})):n.createElement(f,l({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=y;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var s=2;s<o;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},37754:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=t(87462),a=(t(67294),t(3905));const o={sidebar_label:"transformations",title:"gqlalchemy.transformations"},l=void 0,p={unversionedId:"reference/transformations",id:"reference/transformations",title:"gqlalchemy.transformations",description:"nx\\to\\cypher",source:"@site/gqlalchemy/reference/transformations.md",sourceDirName:"reference",slug:"/reference/transformations",permalink:"/docs/gqlalchemy/reference/transformations",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/transformations.md",tags:[],version:"current",frontMatter:{sidebar_label:"transformations",title:"gqlalchemy.transformations"}},i={},s=[{value:"nx_to_cypher",id:"nx_to_cypher",level:4},{value:"nx_graph_to_memgraph_parallel",id:"nx_graph_to_memgraph_parallel",level:4},{value:"NetworkXCypherBuilder Objects",id:"networkxcypherbuilder-objects",level:2},{value:"yield_queries",id:"yield_queries",level:4},{value:"yield_query_groups",id:"yield_query_groups",level:4}],c={toc:s};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"nx_to_cypher"},"nx","_","to","_","cypher"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def nx_to_cypher(graph: nx.Graph, config: NetworkXCypherConfig = None) -> Iterator[str]\n")),(0,a.kt)("p",null,"Generates a Cypher query for creating a graph."),(0,a.kt)("h4",{id:"nx_graph_to_memgraph_parallel"},"nx","_","graph","_","to","_","memgraph","_","parallel"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def nx_graph_to_memgraph_parallel(graph: nx.Graph, host: str = "127.0.0.1", port: int = 7687, username: str = "", password: str = "", encrypted: bool = False, config: NetworkXCypherConfig = None) -> None\n')),(0,a.kt)("p",null,"Generates Cypher queries and inserts data into Memgraph in parallel."),(0,a.kt)("h2",{id:"networkxcypherbuilder-objects"},"NetworkXCypherBuilder Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class NetworkXCypherBuilder()\n")),(0,a.kt)("h4",{id:"yield_queries"},"yield","_","queries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def yield_queries(graph: nx.Graph) -> Iterator[str]\n")),(0,a.kt)("p",null,"Generates Cypher queries for creating a graph."),(0,a.kt)("h4",{id:"yield_query_groups"},"yield","_","query","_","groups"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def yield_query_groups(graph: nx.Graph) -> List[Iterator[str]]\n")),(0,a.kt)("p",null,"Generates Cypher queries for creating a graph by query groups."))}u.isMDXComponent=!0}}]);