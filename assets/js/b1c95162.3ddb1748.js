"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[90079],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(r),c=a,h=m["".concat(u,".").concat(c)]||m[c]||d[c]||o;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},95951:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={id:"overview",title:"Query modules",sidebar_label:"Query modules overview",slug:"/database-functionalities/query-modules"},i=void 0,l={unversionedId:"database-functionalities/query-modules/overview",id:"version-2.1.0/database-functionalities/query-modules/overview",title:"Query modules",description:"Memgraph supports extending the query language with user-written procedures.",source:"@site/memgraph_versioned_docs/version-2.1.0/database-functionalities/query-modules/overview.md",sourceDirName:"database-functionalities/query-modules",slug:"/database-functionalities/query-modules",permalink:"/docs/memgraph/2.1.0/database-functionalities/query-modules",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.1.0/database-functionalities/query-modules/overview.md",tags:[],version:"2.1.0",frontMatter:{id:"overview",title:"Query modules",sidebar_label:"Query modules overview",slug:"/database-functionalities/query-modules"},sidebar:"version-2.1.0/memgraph",previous:{title:"Profiling queries",permalink:"/docs/memgraph/2.1.0/database-functionalities/profiling-queries"},next:{title:"Implement custom query modules",permalink:"/docs/memgraph/2.1.0/database-functionalities/query-modules/implement-query-modules"}},u={},s=[{value:"Loading query modules",id:"loading-query-modules",level:2},{value:"Avilable query modules",id:"avilable-query-modules",level:2},{value:"Syntax for calling procedures",id:"syntax-for-calling-procedures",level:2},{value:"Controlling procedure memory usage",id:"controlling-procedure-memory-usage",level:2},{value:"Implementing custom query modules",id:"implementing-custom-query-modules",level:2}],p={toc:s};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Memgraph supports extending the query language with user-written procedures.\nThese procedures are grouped into modules, which can then be loaded on startup."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"For detailed technical information on query modules, check out the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/reference-guide/query-modules"},"reference guide"),".")),(0,a.kt)("h2",{id:"loading-query-modules"},"Loading query modules"),(0,a.kt)("p",null,"Upon startup, Memgraph will attempt to load the query modules form all ",(0,a.kt)("inlineCode",{parentName:"p"},"*.so"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"*.py")," files it finds in the default (",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules"),")\ndirectory."),(0,a.kt)("p",null,"If you want to change the directory in which Memgraph searches for query\nmodules, just change the ",(0,a.kt)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main\nconfiguration file (",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply it as a\ncommand-line parameter (e.g. when using Docker)."),(0,a.kt)("h2",{id:"avilable-query-modules"},"Avilable query modules"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"MAGE"),", also known as ",(0,a.kt)("strong",{parentName:"p"},"Memgraph Advanced Graph Extensions"),", is an\nopen-source repository that contains graph algorithms in the form of ",(0,a.kt)("strong",{parentName:"p"},"query\nmodules")," written by the team behind Memgraph and its users. You can find and\ncontribute implementations of various algorithms in multiple programming\nlanguages, all runnable inside Memgraph."),(0,a.kt)("admonition",{title:"MAGE Documentation",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Check out the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/mage"},"MAGE documentation"))," for a\ndetailed overview of all the available modules and installation instructions.")),(0,a.kt)("admonition",{title:"MAGE Source code",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Check out the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/memgraph/mage"},"MAGE source\ncode"))," on GitHub if you are interested in the\nunderlying implementation.")),(0,a.kt)("h2",{id:"syntax-for-calling-procedures"},"Syntax for calling procedures"),(0,a.kt)("p",null,"OpenCypher has a special syntax for calling procedures in loaded query modules:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) YIELD res1, res2, ...;\n")),(0,a.kt)("p",null,"Each procedure returns zero or more records, where each record contains named\nfields. The ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," part is used to select fields we are interested in. If the\nprocedure doesn't return any fields, then the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," part can be omitted."),(0,a.kt)("p",null,"Procedures may be called standalone as the above, or as a part of a larger\nquery. This is useful if we want the procedure to work on data the query is\nproducing. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(node) YIELD result RETURN *;\n")),(0,a.kt)("p",null,"For ",(0,a.kt)("strong",{parentName:"p"},"writeable procedures")," we have some other limitations also:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the rest of the query has to be read-only"),(0,a.kt)("li",{parentName:"ul"},"the writeable procedure call has to be the last cause in the query apart from\nthe ",(0,a.kt)("inlineCode",{parentName:"li"},"RETURN")," clause. The last example also works with writeable procedures\nbecause it satisfies all of these requirements.")),(0,a.kt)("p",null,"When we use ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," in a larger query, we have to explicitly ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," from the\nquery to get the results. Naturally, the ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," is not needed if we perform\nupdates after ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," or the called procedure is a writeable procedure. This\nfollows the openCypher convention that read-only queries need to end with a\n",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN"),", while queries which update something don't need to ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," anything."),(0,a.kt)("p",null,"If a procedure returns a record with a field name that may clash with some\nvariable we already have in a query, that field name can be aliased into some\nother name. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(42) YIELD node AS result RETURN *;\n")),(0,a.kt)("h2",{id:"controlling-procedure-memory-usage"},"Controlling procedure memory usage"),(0,a.kt)("p",null,"When running a procedure, Memgraph controls the maximum memory usage that the\nprocedure may consume during its execution.  By default, the upper memory limit\nwhen running a procedure is ",(0,a.kt)("inlineCode",{parentName:"p"},"100 MB"),".  If your query procedure requires more\nmemory to be able to yield its results, you can increase the memory limit using\nthe following syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 KB YIELD res1, res2, ...;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 MB YIELD res1, res2, ...;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY UNLIMITED YIELD res1, res2, ...;\n")),(0,a.kt)("p",null,"The limit can either be specified to a specific value (either in ",(0,a.kt)("inlineCode",{parentName:"p"},"KB")," or in\n",(0,a.kt)("inlineCode",{parentName:"p"},"MB"),"), or it can be set to unlimited."),(0,a.kt)("h2",{id:"implementing-custom-query-modules"},"Implementing custom query modules"),(0,a.kt)("p",null,"Query modules can be implemented by either using the C API or Python API\nprovided by Memgraph."),(0,a.kt)("p",null,"Modules implemented using the C API need to be compiled to a shared library\n(",(0,a.kt)("inlineCode",{parentName:"p"},".so")," file), so they can be loaded when Memgraph starts.  The C API is well\ndocumented in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/include/memgraph/mg_procedure.h")," header and in the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/reference-guide/query-modules/api/c-api"},"reference guide"),"."),(0,a.kt)("p",null,"Modules implemented using the Python API need to be written in Python version\n",(0,a.kt)("inlineCode",{parentName:"p"},"3.5.0")," and above. The Python API is well documented in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/python_support/mgp.py")," file and in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/reference-guide/query-modules/api/python-api"},"reference\nguide"),"."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"If your programming language of choice throws\nexceptions, these exceptions must never leave the scope of your module! You\nshould have a top level exception handler which returns with an error value and\npotentially logs the error message. Exceptions which cross the module boundary\nwill cause all sorts of unexpected issues.")),(0,a.kt)("p",null,"For a more detailed example on how to implement your own query modules, we\nsuggest you take a look at the ",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.1.0/database-functionalities/query-modules/implement-query-modules"},"Implement custom query\nmodules"),"\nguide."))}d.isMDXComponent=!0}}]);