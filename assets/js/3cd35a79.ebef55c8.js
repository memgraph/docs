"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[39356],{3905:(e,r,n)=>{n.d(r,{Zo:()=>m,kt:()=>c});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),d=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},m=function(e){var r=d(e.components);return t.createElement(i.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),p=d(n),c=a,y=p["".concat(i,".").concat(c)]||p[c]||s[c]||o;return n?t.createElement(y,l(l({ref:r},m),{},{components:n})):t.createElement(y,l({ref:r},m))}));function c(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var u={};for(var i in r)hasOwnProperty.call(r,i)&&(u[i]=r[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var d=2;d<o;d++)l[d]=n[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},79770:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>y,contentTitle:()=>p,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>g});var t=n(87462),a=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},o,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once you start Memgraph, it will attempt to load query modules from all ",(0,a.kt)("inlineCode",{parentName:"p"},"*.so"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"*.py")," files from the default (",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules"),")\ndirectory. "),(0,a.kt)("p",null,"If you want to change the location from which Memgraph will load query modules,\nchange the ",(0,a.kt)("inlineCode",{parentName:"p"},"--query-modules-directory")," flag in the main configuration file\n(",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/memgraph/memgraph.conf"),") or supply it as a command-line parameter (e.g.\nwhen using Docker)."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"When working with Docker and ",(0,a.kt)("inlineCode",{parentName:"p"},"memgraph-platform")," image, you should pass\nconfiguration flags inside of environmental variables, for example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},'docker run -p 7687:7686 -e MEMGRAPH="--query-modules-directory=/usr/lib/memgraph/my_modules" memgraph/memgraph-platform`.\n')),(0,a.kt)("p",{parentName:"admonition"},"If you are working with ",(0,a.kt)("inlineCode",{parentName:"p"},"memgraph")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"memgraph-mage")," images you should pass\nconfiguration options like this: "),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"docker run -p 7687:7687 memgraph --query-modules-directory=/usr/lib/memgraph/my_modules\n"))),(0,a.kt)("p",null,"If a certain query module was added while Memgraph was already running, you need\nto load it manually using the ",(0,a.kt)("inlineCode",{parentName:"p"},'mg.load("module_name")')," procedure within a query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL mg.load("py_example");\n')),(0,a.kt)("p",null,"If there is no response (no error message), the load was successful."),(0,a.kt)("p",null,"If you want to reload all existing modules and load any newly added ones, use\n",(0,a.kt)("inlineCode",{parentName:"p"},"mg.load_all()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.load_all();\n")),(0,a.kt)("p",null,"If there is no response (no error message), the load was successful."),(0,a.kt)("p",null,"You can check if the query module has been loaded by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"mg.procedures()"),"\nprocedure within a query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL mg.procedures() YIELD *;\n")))}l.isMDXComponent=!0;const u={toc:[]};function i(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once the MAGE query modules or any custom modules you developed have been\nloaded into Memgraph, you can call them within queries using the following Cypher\nsyntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL module.procedure(arg1, "string_argument", ...) YIELD res1, res2, ...;\n')),(0,a.kt)("p",null,"Each procedure returns zero or more records, where each record contains named\nfields. The ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause is used to select fields you are interested in or all\nof them (*). If you are not interested in any fields, omit the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause.\nThe procedure will still run, but the record fields will not be stored in\nvariables. If you are trying to ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," fields that are not a part of the\nproduced record, the query will result in an error."),(0,a.kt)("p",null,"Procedures can be standalone as in the example above, or a part of a larger\nquery when we want the procedure to work on data the query is\nproducing. "),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (node) CALL module.procedure(node) YIELD result RETURN *;\n")),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause is a part of a larger query, results from the query are\nreturned using the ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," clause. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause is followed by a clause\nthat only updates the data and doesn't read it, ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," is unnecessary. It is\nthe Cypher convention that read-only queries need to end with a ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN"),", while\nqueries that update something don't need to ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," anything."),(0,a.kt)("p",null,"Also, if the procedure itself writes into the database, all the rest of the\nclauses in the query can only read from the database, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"CALL")," clause can\nonly be followed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"YIELD")," clause and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," clause. "),(0,a.kt)("p",null,"If a procedure returns a record with the same field name as some variable we\nalready have in the query, that field name can be aliased with some other name\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"AS")," sub-clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (result) CALL module.procedure(42) YIELD result AS procedure_result RETURN *;\n")))}i.isMDXComponent=!0;const d={toc:[]};function m(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When running a procedure, Memgraph controls the maximum memory usage that the\nprocedure may consume during its execution.  By default, the upper memory limit\nwhen running a procedure is ",(0,a.kt)("inlineCode",{parentName:"p"},"100 MB"),".  If your query procedure requires more\nmemory to yield its results, you can increase the memory limit using the\nfollowing syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 KB YIELD result;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY LIMIT 100 MB YIELD result;\nCALL module.procedure(arg1, arg2, ...) PROCEDURE MEMORY UNLIMITED YIELD result;\n")),(0,a.kt)("p",null,"The limit can either be specified to a specific value (either in ",(0,a.kt)("inlineCode",{parentName:"p"},"KB")," or in\n",(0,a.kt)("inlineCode",{parentName:"p"},"MB"),"), or it can be set to unlimited."))}m.isMDXComponent=!0;const s={id:"load-call-query-modules",title:"Load and call query modules",sidebar_label:"Load and call query modules"},p=void 0,c={unversionedId:"reference-guide/query-modules/load-call-query-modules",id:"version-2.2.0/reference-guide/query-modules/load-call-query-modules",title:"Load and call query modules",description:"The following page describes how query modules are loaded into Memgraph and",source:"@site/memgraph_versioned_docs/version-2.2.0/reference-guide/query-modules/load-call-query-modules.md",sourceDirName:"reference-guide/query-modules",slug:"/reference-guide/query-modules/load-call-query-modules",permalink:"/docs/memgraph/2.2.0/reference-guide/query-modules/load-call-query-modules",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/memgraph_versioned_docs/version-2.2.0/reference-guide/query-modules/load-call-query-modules.md",tags:[],version:"2.2.0",frontMatter:{id:"load-call-query-modules",title:"Load and call query modules",sidebar_label:"Load and call query modules"},sidebar:"memgraph",previous:{title:"Example of a custom query",permalink:"/docs/memgraph/2.2.0/reference-guide/query-modules/implement-custom-query-modules/custom-query-module-example"},next:{title:"Utility query module",permalink:"/docs/memgraph/2.2.0/reference-guide/query-modules/module-file-utilities"}},y={},g=[{value:"Loading query modules",id:"loading-query-modules",level:2},{value:"Calling query modules",id:"calling-query-modules",level:2},{value:"Controlling procedure memory usage",id:"controlling-procedure-memory-usage",level:2}],h={toc:g};function f(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},h,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The following page describes how query modules are loaded into Memgraph and\ncalled within a Cypher query. "),(0,a.kt)("p",null,"If you require more information about what query modules are, please\nread ",(0,a.kt)("a",{parentName:"p",href:"/docs/memgraph/2.2.0/overview-page"},"the query modules overview page"),"."),(0,a.kt)("h2",{id:"loading-query-modules"},"Loading query modules"),(0,a.kt)(l,{mdxType:"Loading"}),(0,a.kt)("h2",{id:"calling-query-modules"},"Calling query modules"),(0,a.kt)(i,{mdxType:"Calling"}),(0,a.kt)("h2",{id:"controlling-procedure-memory-usage"},"Controlling procedure memory usage"),(0,a.kt)(m,{mdxType:"Controlling"}))}f.isMDXComponent=!0}}]);