"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[54862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=u(n),c=r,h=m["".concat(i,".").concat(c)]||m[c]||d[c]||o;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},52664:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>c,assets:()=>d,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),l=n(85162),p=n(83523);const i={id:"export-util",title:"export_util",sidebar_label:"export_util"},u=void 0,s={unversionedId:"query-modules/python/export-util",id:"query-modules/python/export-util",title:"export_util",description:"docs-source",source:"@site/mage/query-modules/python/export-util.md",sourceDirName:"query-modules/python",slug:"/query-modules/python/export-util",permalink:"/docs/mage/query-modules/python/export-util",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/query-modules/python/export-util.md",tags:[],version:"current",frontMatter:{id:"export-util",title:"export_util",sidebar_label:"export_util"},sidebar:"mage",previous:{title:"elasticsearch_synchronization",permalink:"/docs/mage/query-modules/python/elasticsearch-synchronization"},next:{title:"graph_analyzer",permalink:"/docs/mage/query-modules/python/graph-analyzer"}},d={},m=[{value:"Abstract",id:"abstract",level:2},{value:"Procedures",id:"procedures",level:2},{value:"<code>json(path)</code>",id:"jsonpath",level:3},{value:"Input:",id:"input",level:4},{value:"Usage:",id:"usage",level:4},{value:"Example - Exporting database to a JSON file",id:"example---exporting-database-to-a-json-file",level:2}],c=e=>{let{children:t,color:n}=e;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},h={toc:m,Highlight:c};function g(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage/blob/main/python/export_util.py"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-export_util-FB6E00?logo=github&style=for-the-badge",alt:"docs-source"}))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"Module for exporting a graph database in different formats. Currently, this\nmodule supports only the export to JSON file format."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Trait"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Module type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(c,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"util")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Implementation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(c,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"Python")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Parallelism")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)(c,{color:"#FB6E00",mdxType:"Highlight"},(0,r.kt)("strong",{parentName:"td"},"sequential")))))),(0,r.kt)("h2",{id:"procedures"},"Procedures"),(0,r.kt)(p.ZP,{mdxType:"RunOnSubgraph"}),(0,r.kt)("h3",{id:"jsonpath"},(0,r.kt)("inlineCode",{parentName:"h3"},"json(path)")),(0,r.kt)("h4",{id:"input"},"Input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path: string")," \u27a1 Path to the JSON file containing the exported graph database.")),(0,r.kt)("h4",{id:"usage"},"Usage:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," you have to provide as procedure argument depends on how you started\nMemgraph."),(0,r.kt)(o.Z,{groupId:"export_to_json_usage",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"docker",mdxType:"TabItem"},(0,r.kt)("p",null,"If you ran Memgraph with Docker, database will be exported to a JSON file inside\nthe Docker container. We recommend exporting the database to the JSON file\ninside the ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory."),(0,r.kt)("p",null,"You can call the procedure by running the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL export_util.json(path);\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is the path to the JSON file inside the\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory in the running Docker container (e.g.,\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules/export.json"),")."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can copy the exported JSON file to your local file system using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/cp/"},(0,r.kt)("inlineCode",{parentName:"a"},"docker cp"))," command: "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"docker cp <container_id>:/usr/lib/memgraph/query_modules/export.json /path_to_local_folder/export.json\n")))),(0,r.kt)(l.Z,{value:"linux",mdxType:"TabItem"},(0,r.kt)("p",null,"To export database to a local JSON file create a new directory (for example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"export_folder"),") and run the following command to give the user ",(0,r.kt)("inlineCode",{parentName:"p"},"memgraph")," the\nnecessary permissions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo chown memgraph export_folder\n")),(0,r.kt)("p",null,"Then, call the procedure by running the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CALL export_util.json(path);\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is the path to a local JSON file that will be created inside the\n",(0,r.kt)("inlineCode",{parentName:"p"},"export_folder")," (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/my_user/export_folder/export.json"),")."))),(0,r.kt)("h2",{id:"example---exporting-database-to-a-json-file"},"Example - Exporting database to a JSON file"),(0,r.kt)(o.Z,{groupId:"export_to_json_example",defaultValue:"input",values:[{label:"Step 1: Cypher load commands",value:"load"},{label:"Step 2: Input graph",value:"input"},{label:"Step 3: Running command",value:"run"},{label:"Step 4: Results",value:"result"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"load",mdxType:"TabItem"},(0,r.kt)("p",null,"You can create a simple graph database by running the following queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CREATE (n:Person {name:"Anna"}), (m:Person {name:"John"}), (k:Person {name:"Kim"})\nCREATE (n)-[:IS_FRIENDS_WITH]->(m), (n)-[:IS_FRIENDS_WITH]->(k), (m)-[:IS_MARRIED_TO]->(k);\n'))),(0,r.kt)(l.Z,{value:"input",mdxType:"TabItem"},(0,r.kt)("p",null,"Below you can see how the data looks like after you created the nodes and relationships:"),(0,r.kt)("img",{src:n(94395).Z})),(0,r.kt)(l.Z,{value:"run",mdxType:"TabItem"},(0,r.kt)("p",null,"If you're using ",(0,r.kt)("strong",{parentName:"p"},"Memgraph with Docker"),", then the following Cypher query will\nexport the database to the ",(0,r.kt)("inlineCode",{parentName:"p"},"export.json")," file in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/memgraph/query_modules")," directory inside the running Docker container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL export_util.json("/usr/lib/memgraph/query_modules/export.json");\n')),(0,r.kt)("p",null,"If you're using ",(0,r.kt)("strong",{parentName:"p"},"Memgraph on Ubuntu, Debian, RPM package or WSL"),", then the\nfollowing Cypher query will export the database to the ",(0,r.kt)("inlineCode",{parentName:"p"},"export.json")," file in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"/users/my_user/export_folder"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},'CALL export_util.json("/users/my_user/export_folder/export.json");\n'))),(0,r.kt)(l.Z,{value:"result",mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"export.json")," file should be similar to the one below, except for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"id")," values that depend on the internal database ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id": 6114,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "Anna"\n        },\n        "type": "node"\n    },\n    {\n        "id": 6115,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "John"\n        },\n        "type": "node"\n    },\n    {\n        "id": 6116,\n        "labels": [\n            "Person"\n        ],\n        "properties": {\n            "name": "Kim"\n        },\n        "type": "node"\n    },\n    {\n        "end": 6115,\n        "id": 21120,\n        "label": "IS_FRIENDS_WITH",\n        "properties": {},\n        "start": 6114,\n        "type": "relationship"\n    },\n    {\n        "end": 6116,\n        "id": 21121,\n        "label": "IS_FRIENDS_WITH",\n        "properties": {},\n        "start": 6114,\n        "type": "relationship"\n    },\n    {\n        "end": 6116,\n        "id": 21122,\n        "label": "IS_MARRIED_TO",\n        "properties": {},\n        "start": 6115,\n        "type": "relationship"\n    }\n]\n')))))}g.isMDXComponent=!0},83523:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to execute this algorithm on graph projections, subgraphs or portions\nof the graph, be sure to check out the guide on\n",(0,r.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-subgraph-module"},"How to run a MAGE module on subgraphs"),".")))}l.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(87462),r=n(67294),o=n(86010),l=n(72389),p=n(67392),i=n(7094),u=n(12466);const s="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:m,values:c,groupId:h,className:g}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,p.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==f&&!y.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,i.U)(),[x,_]=(0,r.useState)(f),T=[],{blockElementScrollPositionUntilNextRender:w}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==x&&y.some((t=>t.value===e))&&_(e)}const C=e=>{const t=e.currentTarget,n=T.indexOf(t),a=y[n].value;a!==x&&(w(t),_(a),null!=h&&N(h,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",s)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},g)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>T.push(e),onKeyDown:E,onClick:C},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":x===t})}),n??t)}))),n?(0,r.cloneElement)(k.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function c(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},94395:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/export-util-1-6f272764c2ffb63fae58905c1dded702.png"}}]);