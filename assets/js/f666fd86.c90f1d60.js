"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[282],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,u=m["".concat(o,".").concat(h)]||m[h]||d[h]||s;return a?n.createElement(u,l(l({ref:t},c),{},{components:a})):n.createElement(u,l({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},28229:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const s={sidebar_label:"models",title:"gqlalchemy.models"},l=void 0,i={unversionedId:"reference/models",id:"reference/models",title:"gqlalchemy.models",description:"TriggerEventType Objects",source:"@site/gqlalchemy/reference/models.md",sourceDirName:"reference",slug:"/reference/models",permalink:"/docs/gqlalchemy/reference/models",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/reference/models.md",tags:[],version:"current",frontMatter:{sidebar_label:"models",title:"gqlalchemy.models"},sidebar:"gqlalchemy",previous:{title:"instance_runner",permalink:"/docs/gqlalchemy/reference/instance_runner"},next:{title:"export",permalink:"/docs/gqlalchemy/reference/transformations/export"}},o={},p=[{value:"TriggerEventType Objects",id:"triggereventtype-objects",level:2},{value:"TriggerEventObject Objects",id:"triggereventobject-objects",level:2},{value:"TriggerExecutionPhase Objects",id:"triggerexecutionphase-objects",level:2},{value:"MemgraphKafkaStream Objects",id:"memgraphkafkastream-objects",level:2},{value:"to_cypher",id:"to_cypher",level:4},{value:"MemgraphPulsarStream Objects",id:"memgraphpulsarstream-objects",level:2},{value:"to_cypher",id:"to_cypher-1",level:4},{value:"MemgraphTrigger Objects",id:"memgraphtrigger-objects",level:2},{value:"to_cypher",id:"to_cypher-2",level:4},{value:"GraphObject Objects",id:"graphobject-objects",level:2},{value:"__init_subclass__",id:"__init_subclass__",level:4},{value:"_convert_to_real_type_",id:"_convert_to_real_type_",level:4},{value:"parse_obj",id:"parse_obj",level:4},{value:"NodeMetaclass Objects",id:"nodemetaclass-objects",level:2},{value:"__new__",id:"__new__",level:4},{value:"Node Objects",id:"node-objects",level:2},{value:"has_unique_fields",id:"has_unique_fields",level:4},{value:"save",id:"save",level:4},{value:"load",id:"load",level:4},{value:"RelationshipMetaclass Objects",id:"relationshipmetaclass-objects",level:2},{value:"__new__",id:"__new__-1",level:4},{value:"Relationship Objects",id:"relationship-objects",level:2},{value:"save",id:"save-1",level:4},{value:"load",id:"load-1",level:4}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"triggereventtype-objects"},"TriggerEventType Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class TriggerEventType()\n")),(0,r.kt)("p",null,"An enum representing types of trigger events."),(0,r.kt)("h2",{id:"triggereventobject-objects"},"TriggerEventObject Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class TriggerEventObject()\n")),(0,r.kt)("p",null,"An enum representing types of trigger objects."),(0,r.kt)("p",null,"NODE -",">"," ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),"\nRELATIONSHIP -",">"," ",(0,r.kt)("inlineCode",{parentName:"p"},"--&gt;")),(0,r.kt)("h2",{id:"triggerexecutionphase-objects"},"TriggerExecutionPhase Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class TriggerExecutionPhase()\n")),(0,r.kt)("p",null,"An enum representing types of trigger objects."),(0,r.kt)("p",null,"Enum:\nBEFORE\nAFTER"),(0,r.kt)("h2",{id:"memgraphkafkastream-objects"},"MemgraphKafkaStream Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MemgraphKafkaStream(MemgraphStream)\n")),(0,r.kt)("p",null,"A class for creating and managing Kafka streams in Memgraph."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string representing the stream name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topics")," - A list of strings representing the stream topics."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transform")," - A string representing the name of the transformation procedure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consumer_group")," - A string representing the consumer group."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string representing the batch interval."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string representing the batch size."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string or list of strings representing bootstrap server addresses.")),(0,r.kt)("h4",{id:"to_cypher"},"to","_","cypher"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher() -> str\n")),(0,r.kt)("p",null,"Converts Kafka stream to a Cypher clause."),(0,r.kt)("h2",{id:"memgraphpulsarstream-objects"},"MemgraphPulsarStream Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MemgraphPulsarStream(MemgraphStream)\n")),(0,r.kt)("p",null,"A class for creating and managing Pulsar streams in Memgraph."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string representing the stream name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topics")," - A list of strings representing the stream topics."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transform")," - A string representing the name of the transformation procedure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consumer_group")," - A string representing the consumer group."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string representing the batch interval."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string representing the batch size."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - A string or list of strings representing bootstrap server addresses.")),(0,r.kt)("h4",{id:"to_cypher-1"},"to","_","cypher"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher() -> str\n")),(0,r.kt)("p",null,"Converts Pulsar stream to a Cypher clause."),(0,r.kt)("h2",{id:"memgraphtrigger-objects"},"MemgraphTrigger Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True, eq=True)\nclass MemgraphTrigger()\n")),(0,r.kt)("h4",{id:"to_cypher-2"},"to","_","cypher"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def to_cypher() -> str\n")),(0,r.kt)("p",null,"Converts a Trigger to a cypher clause."),(0,r.kt)("h2",{id:"graphobject-objects"},"GraphObject Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class GraphObject(BaseModel)\n")),(0,r.kt)("h4",{id:"__init_subclass__"},"_","_","init","_","subclass","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init_subclass__(cls, type=None, label=None, labels=None, index=None, db=None)\n")),(0,r.kt)("p",null,"Stores the subclass by type if type is specified, or by class name\nwhen instantiating a subclass."),(0,r.kt)("h4",{id:"_convert_to_real_type_"},"_","convert","_","to","_","real","_","type","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef _convert_to_real_type_(cls, data)\n")),(0,r.kt)("p",null,"Converts the GraphObject class into the appropriate subclass.\nThis is used when deserialising a json representation of the class,\nor the object returned from the GraphDatabase."),(0,r.kt)("h4",{id:"parse_obj"},"parse","_","obj"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef parse_obj(cls, obj)\n")),(0,r.kt)("p",null,"Used to convert a dictionary object into the appropriate\nGraphObject."),(0,r.kt)("h2",{id:"nodemetaclass-objects"},"NodeMetaclass Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class NodeMetaclass(BaseModel.__class__)\n")),(0,r.kt)("h4",{id:"__new__"},"_","_","new","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __new__(mcs, name, bases, namespace, **kwargs)\n")),(0,r.kt)("p",null,"This creates the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),". It also creates all subclasses\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),". Whenever a class is defined as a subclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"MyMeta.__new__")," is called."),(0,r.kt)("h2",{id:"node-objects"},"Node Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Node(UniqueGraphObject, metaclass=NodeMetaclass)\n")),(0,r.kt)("h4",{id:"has_unique_fields"},"has","_","unique","_","fields"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def has_unique_fields() -> bool\n")),(0,r.kt)("p",null,"Returns True if the Node has any unique fields."),(0,r.kt)("h4",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def save(db: "Database") -> "Node"\n')),(0,r.kt)("p",null,"Saves node to Memgraph.\nIf the node._id is not None it fetches the node with the same id from\nMemgraph and updates it","'","s fields.\nIf the node has unique fields it fetches the nodes with the same unique\nfields from Memgraph and updates it","'","s fields.\nOtherwise it creates a new node with the same properties.\nNull properties are ignored."),(0,r.kt)("h4",{id:"load"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def load(db: "Database") -> "Node"\n')),(0,r.kt)("p",null,"Loads a node from Memgraph.\nIf the node._id is not None it fetches the node from Memgraph with that\ninternal id.\nIf the node has unique fields it fetches the node from Memgraph with\nthose unique fields set.\nOtherwise it tries to find any node in Memgraph that has all properties\nset to exactly the same values.\nIf no node is found or no properties are set it raises a GQLAlchemyError."),(0,r.kt)("h2",{id:"relationshipmetaclass-objects"},"RelationshipMetaclass Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class RelationshipMetaclass(BaseModel.__class__)\n")),(0,r.kt)("h4",{id:"__new__-1"},"_","_","new","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __new__(mcs, name, bases, namespace, **kwargs)\n")),(0,r.kt)("p",null,"This creates the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Relationship"),". It also creates all\nsubclasses of ",(0,r.kt)("inlineCode",{parentName:"p"},"Relationship"),". Whenever a class is defined as a\nsubclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"Relationship"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"self.__new__")," is called."),(0,r.kt)("h2",{id:"relationship-objects"},"Relationship Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Relationship(UniqueGraphObject, metaclass=RelationshipMetaclass)\n")),(0,r.kt)("h4",{id:"save-1"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def save(db: "Database") -> "Relationship"\n')),(0,r.kt)("p",null,"Saves a relationship to Memgraph.\nIf relationship._id is not None it finds the relationship in Memgraph\nand updates it","'","s properties with the values in ",(0,r.kt)("inlineCode",{parentName:"p"},"relationship"),".\nIf relationship._id is None, it creates a new relationship.\nIf you want to set a relationship._id instead of creating a new\nrelationship, use ",(0,r.kt)("inlineCode",{parentName:"p"},"load_relationship")," first."),(0,r.kt)("h4",{id:"load-1"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def load(db: "Database") -> "Relationship"\n')),(0,r.kt)("p",null,"Returns a relationship loaded from Memgraph.\nIf the relationship._id is not None it fetches the relationship from\nMemgraph that has the same internal id.\nOtherwise it returns the relationship whose relationship._start_node_id\nand relationship._end_node_id and all relationship properties that\nare not None match the relationship in Memgraph.\nIf there is no relationship like that in Memgraph, or if there are\nmultiple relationships like that in Memgraph, throws GQLAlchemyError."))}d.isMDXComponent=!0}}]);