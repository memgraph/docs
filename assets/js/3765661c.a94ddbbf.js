"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8916],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return d}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),u=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=u(a),d=n,h=m["".concat(i,".").concat(d)]||m[d]||c[d]||l;return a?r.createElement(h,o(o({ref:t},s),{},{components:a})):r.createElement(h,o({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var u=2;u<l;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},54751:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return d}});var r=a(87462),n=a(63366),l=(a(67294),a(3905)),o=a(9877),p=a(58215),i=["components"],u={id:"filter-data",title:"How to filter data",sidebar_label:"Filter data"},s=void 0,c={unversionedId:"how-to-guides/query-builder/filter-data",id:"how-to-guides/query-builder/filter-data",title:"How to filter data",description:"You can use where(), wherenot(), orwhere(), ornotwhere(),",source:"@site/gqlalchemy/how-to-guides/query-builder/filter-data.md",sourceDirName:"how-to-guides/query-builder",slug:"/how-to-guides/query-builder/filter-data",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/filter-data",editUrl:"https://github.com/memgraph/docs/tree/master/gqlalchemy/how-to-guides/query-builder/filter-data.md",tags:[],version:"current",frontMatter:{id:"filter-data",title:"How to filter data",sidebar_label:"Filter data"},sidebar:"gqlalchemy",previous:{title:"Return results",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/return-results"},next:{title:"Call procedures",permalink:"/docs/gqlalchemy/how-to-guides/query-builder/call-procedures"}},m={},d=[{value:"Filter data by property comparison",id:"filter-data-by-property-comparison",level:2},{value:"Filter data by property value",id:"filter-data-by-property-value",level:2},{value:"Filter data by label",id:"filter-data-by-label",level:2}],h={toc:d};function y(e){var t=e.components,a=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"where()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"where_not()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"or_where()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"or_not_where()"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"and_where()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"and_not_where()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"xor_where()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"xor_not_where()")," methods to\nconstruct queries that will filter data."),(0,l.kt)("p",null,"In this guide, you'll learn how to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#filter-data-by-property-comparison"},"Filter data by property comparison")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#filter-data-by-property-value"},"Filter data by property value")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#filter-data-by-label"},"Filter data by label"))),(0,l.kt)("h2",{id:"filter-data-by-property-comparison"},"Filter data by property comparison"),(0,l.kt)("p",null,"You can filter data by comparing properties of graph objects. Below you can see\nhow to compare ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," properties of two nodes."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(p.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nquery = match()\n        .node(labels="Person", variable="p1")\n        .to(edge_label="FRIENDS_WITH")\n        .node(labels="Person", variable="p2")\n        .where(item="p1.name", operator="=", expression="p2.name")\n        .return_()\n        .execute()\n'))),(0,l.kt)(p.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE p1.name = p2.name RETURN *;\n")))),(0,l.kt)("p",null,"Here the ",(0,l.kt)("inlineCode",{parentName:"p"},"expression")," keyword argument is used because the property shouldn't be\nquoted in the Cypher query."),(0,l.kt)("p",null,"Standard boolean operators like ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"AND"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"OR")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"XOR")," are used in the\nCypher query language. To have ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT")," within ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause, you need to use\n",(0,l.kt)("inlineCode",{parentName:"p"},"where_not()")," method."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(p.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nquery = match()\n        .node(labels="Person", variable="p1")\n        .to(edge_label="FRIENDS_WITH")\n        .node(labels="Person", variable="p2")\n        .where_not(item="p1.name", operator="=", expression="p2.name")\n        .return_()\n        .execute()\n'))),(0,l.kt)(p.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE NOT p1.name = p2.name RETURN *;\n")))),(0,l.kt)("p",null,"In a similar way, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"AND")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"AND NOT")," clauses, which correspond to\nthe methods ",(0,l.kt)("inlineCode",{parentName:"p"},"and_where()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"and_not_where()"),". Using the query below you can\nfind all persons with the same ",(0,l.kt)("inlineCode",{parentName:"p"},"first_name")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"last_name"),", but different\n",(0,l.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(p.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nquery = match()\n        .node(labels="Person", variable="p1")\n        .to(edge_label="FRIENDS_WITH")\n        .node(labels="Person", variable="p2")\n        .where(item="p1.first_name", operator="=", expression="p2.first_name")\n        .and_where(item="p1.last_name", operator="=", expression="p2.last_name")\n        .and_not_where(item="p1.address", operator="=", expression="p2.address")\n        .return_()\n        .execute()\n'))),(0,l.kt)(p.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p1:Person)-[:FRIENDS_WITH]->(p2:Person) WHERE p1.name = p2.name AND p1.last_name = p2.last_name AND NOT p1.address = p2.address RETURN *;\n")))),(0,l.kt)("p",null,"The same goes for the ",(0,l.kt)("inlineCode",{parentName:"p"},"OR"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"OR NOT"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"XOR")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"XOR NOT")," clauses, which\ncorrespond to the methods ",(0,l.kt)("inlineCode",{parentName:"p"},"or_where()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"or_not_where()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"xor_where()")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"xor_not_where()"),"."),(0,l.kt)("h2",{id:"filter-data-by-property-value"},"Filter data by property value"),(0,l.kt)("p",null,"You can filter data by comparing the property of a graph object to some value (a\nliteral). Below you can see how to compare ",(0,l.kt)("inlineCode",{parentName:"p"},"age")," property of a node to the\ninteger."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(p.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nquery = match()\n        .node(labels="Person", variable="p")\n        .where(item="p.age", operator=">", literal=18)\n        .return_()\n        .execute()\n'))),(0,l.kt)(p.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p:Person) WHERE p.age > 18 RETURN *;\n")))),(0,l.kt)("p",null,"It's important that the third keyword argument is ",(0,l.kt)("inlineCode",{parentName:"p"},"literal"),", since then, it will\nbe of the correct type."),(0,l.kt)("p",null,"Just like in ",(0,l.kt)("a",{parentName:"p",href:"#filter-data-by-property-comparison"},"property comparison"),", you can\nuse different boolean operators to further filter the data."),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(p.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nquery = match()\n        .node(labels="Person", variable="p")\n        .where(item="p.age", operator=">", literal=18)\n        .or_where(item="p.name", operator="=", literal="John")\n        .return_()\n        .execute()\n'))),(0,l.kt)(p.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},'MATCH (p:Person) WHERE p.age > 18 OR p.name = "John" RETURN *;\n')))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"literal")," keyword is used again since you want ",(0,l.kt)("inlineCode",{parentName:"p"},"John")," to be quoted in the\nCypher query."),(0,l.kt)("h2",{id:"filter-data-by-label"},"Filter data by label"),(0,l.kt)("p",null,"Nodes can be filtered by their label using the ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause instead of\nspecifying it directly in the ",(0,l.kt)("inlineCode",{parentName:"p"},"MATCH")," clause. You have to use ",(0,l.kt)("inlineCode",{parentName:"p"},"expression")," as\nthe third keyword argument again since you don't want the quotes surrounding the\nlabel in the Cypher clause."),(0,l.kt)("p",null,"Below you can see an example of how to filter data by label:"),(0,l.kt)(o.Z,{defaultValue:"gqlalchemy",values:[{label:"GQLAlchemy",value:"gqlalchemy"},{label:"Cypher",value:"cypher"}],mdxType:"Tabs"},(0,l.kt)(p.Z,{value:"gqlalchemy",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from gqlalchemy import match\n\nquery = match()\n        .node(variable="p")\n        .where(item="p", operator=":", expression="Person")\n        .return_()\n        .execute()\n'))),(0,l.kt)(p.Z,{value:"cypher",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (p) WHERE p:Person RETURN *;\n")))),(0,l.kt)("p",null,"Just like in ",(0,l.kt)("a",{parentName:"p",href:"#filter-data-by-property-comparison"},"property comparison"),", you can\nuse different boolean operators to further filter the data."))}y.isMDXComponent=!0},58215:function(e,t,a){a.d(t,{Z:function(){return n}});var r=a(67294);function n(e){var t=e.children,a=e.hidden,n=e.className;return r.createElement("div",{role:"tabpanel",hidden:a,className:n},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return s}});var r=a(87462),n=a(67294),l=a(72389),o=a(5979),p=a(86010),i="tabItem_LplD";function u(e){var t,a,l,u=e.lazy,s=e.block,c=e.defaultValue,m=e.values,d=e.groupId,h=e.className,y=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,o.lx)(b,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===c?c:null!=(t=null!=c?c:null==(a=y.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=y[0])?void 0:l.props.value;if(null!==k&&!b.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,o.UB)(),g=v.tabGroupChoices,N=v.setTabGroupChoices,w=(0,n.useState)(k),T=w[0],C=w[1],q=[],_=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var x=g[d];null!=x&&x!==T&&b.some((function(e){return e.value===x}))&&C(x)}var E=function(e){var t=e.currentTarget,a=q.indexOf(t),r=b[a].value;r!==T&&(_(t),C(r),null!=d&&N(d,r))},O=function(e){var t,a=null;switch(e.key){case"ArrowRight":var r=q.indexOf(e.currentTarget)+1;a=q[r]||q[0];break;case"ArrowLeft":var n=q.indexOf(e.currentTarget)-1;a=q[n]||q[q.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":s},h)},b.map((function(e){var t=e.value,a=e.label,l=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return q.push(e)},onKeyDown:O,onFocus:E,onClick:E},l,{className:(0,p.Z)("tabs__item",i,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),u?(0,n.cloneElement)(y.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function s(e){var t=(0,l.Z)();return n.createElement(u,(0,r.Z)({key:String(t)},e))}}}]);