"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41629],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},46347:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const l={id:"create",title:"CREATE clause",sidebar_label:"CREATE"},i=void 0,o={unversionedId:"clauses/create",id:"clauses/create",title:"CREATE clause",description:"The CREATE clause is used to create nodes and relationships in a graph.",source:"@site/cypher-manual/clauses/create.md",sourceDirName:"clauses",slug:"/clauses/create",permalink:"/docs/cypher-manual/clauses/create",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/cypher-manual/clauses/create.md",tags:[],version:"current",frontMatter:{id:"create",title:"CREATE clause",sidebar_label:"CREATE"},sidebar:"cypher_manual",previous:{title:"CALL",permalink:"/docs/cypher-manual/clauses/call"},next:{title:"DELETE",permalink:"/docs/cypher-manual/clauses/delete"}},p={},c=[{value:"1. Creating nodes",id:"1-creating-nodes",level:2},{value:"1.1. Creating a single node",id:"11-creating-a-single-node",level:3},{value:"1.2. Creating a node with properties",id:"12-creating-a-node-with-properties",level:3},{value:"1.3. Creating multiple nodes",id:"13-creating-multiple-nodes",level:3},{value:"2. Creating relationships",id:"2-creating-relationships",level:2},{value:"2.1. Creating a relationship between two nodes",id:"21-creating-a-relationship-between-two-nodes",level:3},{value:"2.2. Creating a relationship with properties",id:"22-creating-a-relationship-with-properties",level:3},{value:"3. Creating a path",id:"3-creating-a-path",level:2}],s={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE")," clause is used to create nodes and relationships in a graph."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Indexing can increase performance when executing queries. Please take a look at\nour ",(0,r.kt)("a",{parentName:"p",href:"/docs/memgraph/reference-guide/indexing"},"documentation on indexing")," for\nmore details.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#1-creating-nodes"},"Creating nodes")," ",(0,r.kt)("br",null),"\n1.1. ",(0,r.kt)("a",{parentName:"li",href:"#11-creating-a-single-node"},"Creating a single node"),(0,r.kt)("br",null),"\n1.2. ",(0,r.kt)("a",{parentName:"li",href:"#12-creating-a-node-with-properties"},"Creating a node with properties"),(0,r.kt)("br",null),"\n1.3. ",(0,r.kt)("a",{parentName:"li",href:"#13-creating-multiple-nodes"},"Creating multiple nodes"),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#2-creating-relationships"},"Creating relationships"),(0,r.kt)("br",null),"\n2.1. ",(0,r.kt)("a",{parentName:"li",href:"#21-creating-a-relationship-between-two-nodes"},"Creating a relationship between two nodes"),(0,r.kt)("br",null),"\n2.2. ",(0,r.kt)("a",{parentName:"li",href:"#22-creating-a-relationship-with-properties"},"Creating a relationship with properties"),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#3-creating-a-path"},"Creating a path"))),(0,r.kt)("h2",{id:"1-creating-nodes"},"1. Creating nodes"),(0,r.kt)("h3",{id:"11-creating-a-single-node"},"1.1. Creating a single node"),(0,r.kt)("p",null,"Use the following query to create a single node.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," clause is used to return results. A newly created node can be returned in the same query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n)\nRETURN n;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+----+\n| n  |\n+----+\n| () |\n+----+\n")),(0,r.kt)("p",null,"You can also specify a label while creating a node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country)\nRETURN n;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------------+\n| n          |\n+------------+\n| (:Country) |\n+------------+\n")),(0,r.kt)("p",null,"If you wish to add multiple labels to a node, use the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country:City)\nRETURN n;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+-----------------+\n| n               |\n+-----------------+\n| (:Country:City) |\n+-----------------+\n")),(0,r.kt)("h3",{id:"12-creating-a-node-with-properties"},"1.2. Creating a node with properties"),(0,r.kt)("p",null,"A node can be created with initial properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country {name: 'San Marino', continent: 'Europe'})\nRETURN n;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+------------------------------------------------------+\n| n                                                    |\n+------------------------------------------------------+\n| (:Country {continent: "Europe", name: "San Marino"}) |\n+------------------------------------------------------+\n')),(0,r.kt)("h3",{id:"13-creating-multiple-nodes"},"1.3. Creating multiple nodes"),(0,r.kt)("p",null,"To create multiple nodes, separate them with a comma."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (n:Country), (m:City)\nRETURN n,m;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+------------+------------+\n| n          | m          |\n+------------+------------+\n| (:Country) | (:City)    |\n+------------+------------+\n")),(0,r.kt)("h2",{id:"2-creating-relationships"},"2. Creating relationships"),(0,r.kt)("h3",{id:"21-creating-a-relationship-between-two-nodes"},"2.1. Creating a relationship between two nodes"),(0,r.kt)("p",null,"To create a relationship between two nodes, we need to specify which nodes\neither by creating them or filtering them with the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE (c1:Country {name: 'Belgium'}), (c2:Country {name: 'Netherlands'})\nCREATE (c1)-[r:BORDERS_WITH]->(c2)\nRETURN r;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+----------------+\n| r              |\n+----------------+\n| [BORDERS_WITH] |\n+----------------+\n")),(0,r.kt)("p",null,"If the nodes already exist, the query would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country),(c2:Country)\nWHERE c1.name = 'Belgium' AND c2.name = 'Netherlands'\nCREATE (c1)-[r:NEIGHBOURS]->(c2)\nRETURN r;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},"+--------------+\n| r            |\n+--------------+\n| [NEIGHBOURS] |\n+--------------+\n")),(0,r.kt)("h3",{id:"22-creating-a-relationship-with-properties"},"2.2. Creating a relationship with properties"),(0,r.kt)("p",null,"You can add properties to a relationship at the time of creation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"MATCH (c1:Country),(c2:Country)\nWHERE c1.name = 'Belgium' AND c2.name = 'Netherlands'\nCREATE (c1)-[r:BORDERS_WITH {length: '30KM'}]->(c2)\nRETURN r;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+---------------------------------+\n| r                               |\n+---------------------------------+\n| [BORDERS_WITH {length: "30KM"}] |\n+---------------------------------+\n')),(0,r.kt)("h2",{id:"3-creating-a-path"},"3. Creating a path"),(0,r.kt)("p",null,"When creating a path all the entities of the pattern will be created."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cypher"},"CREATE p=((n:Country {name: 'Belgium'})-[r:BORDERS_WITH {length: '30KM'}]->(m:Country {name: 'Netherlands'}))\nRETURN p;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nocopy"},'+------------------------------------------------------------------------------------------------+\n| p                                                                                              |\n+------------------------------------------------------------------------------------------------+\n| (:Country {name: "Belgium"})-[BORDERS_WITH {length: "30KM"}]->(:Country {name: "Netherlands"}) |\n+------------------------------------------------------------------------------------------------+\n')))}u.isMDXComponent=!0}}]);