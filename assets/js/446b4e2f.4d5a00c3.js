"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92490],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=m(n),c=a,g=s["".concat(l,".").concat(c)]||s[c]||u[c]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},97210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={id:"create-a-new-module-python",title:"How to create a query module in Python",sidebar_label:"Create a Python query module"},i=void 0,p={unversionedId:"how-to-guides/create-a-new-module-python",id:"how-to-guides/create-a-new-module-python",title:"How to create a query module in Python",description:"Query modules can be implemented using the [Python",source:"@site/mage/how-to-guides/create-a-new-module-python.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/create-a-new-module-python",permalink:"/docs/mage/how-to-guides/create-a-new-module-python",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/mage/how-to-guides/create-a-new-module-python.md",tags:[],version:"current",frontMatter:{id:"create-a-new-module-python",title:"How to create a query module in Python",sidebar_label:"Create a Python query module"},sidebar:"mage",previous:{title:"weakly_connected_components",permalink:"/docs/mage/query-modules/cpp/weakly-connected-components"},next:{title:"Create a C++ query module",permalink:"/docs/mage/how-to-guides/create-a-new-module-cpp"}},l={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Developing a module",id:"developing-a-module",level:2},{value:"Importing, querying and testing a module",id:"importing-querying-and-testing-a-module",level:2}],d={toc:m};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Query modules can be implemented using the ",(0,a.kt)("a",{parentName:"p",href:"/memgraph/reference-guide/query-modules/api/python-api"},"Python\nAPI")," provided by\nMemgraph. In this tutorial, we will learn how to develop a query module in\nPython on the example of the ",(0,a.kt)("strong",{parentName:"p"},"random walk algorithm"),"."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"There are three options for installing and working with Memgraph MAGE:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Pulling the ",(0,a.kt)("inlineCode",{parentName:"strong"},"memgraph/memgraph-mage")," image"),": check the ",(0,a.kt)("inlineCode",{parentName:"li"},"Docker Hub"),(0,a.kt)("a",{parentName:"li",href:"/docs/mage/installation/docker-hub"},"installation guide"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Building a Docker image from the MAGE repository"),": check the ",(0,a.kt)("inlineCode",{parentName:"li"},"Docker\nbuild")," ",(0,a.kt)("a",{parentName:"li",href:"/docs/mage/installation/docker-build"},"installation guide"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Building MAGE from source"),": check the ",(0,a.kt)("inlineCode",{parentName:"li"},"Build from source on Linux"),(0,a.kt)("a",{parentName:"li",href:"/docs/mage/installation/source"},"installation guide"),".")),(0,a.kt)("h2",{id:"developing-a-module"},"Developing a module"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"These steps are the same for every type of MAGE installation: ",(0,a.kt)("em",{parentName:"p"},"Docker Hub"),",\n",(0,a.kt)("em",{parentName:"p"},"Docker build")," and ",(0,a.kt)("em",{parentName:"p"},"Build from source on Linux"),".")),(0,a.kt)("p",null,"Position yourself in the ",(0,a.kt)("strong",{parentName:"p"},"MAGE repository")," you cloned earlier. Specifically,\ngo in the ",(0,a.kt)("inlineCode",{parentName:"p"},"python")," subdirectory and create a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"random_walk.py"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"python\n\u2514\u2500\u2500 mage\n    random_walk.py\n\n")),(0,a.kt)("p",null,"For this part, we will import ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mgp"},(0,a.kt)("inlineCode",{parentName:"a"},"mgp")),",\nMemgraph's internal data structure module. Among others, it contains definitions\nfor ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mgp/blob/main/mgp.py#L260"},(0,a.kt)("strong",{parentName:"a"},"Vertex"))," and\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mgp/blob/main/mgp.py#L182"},(0,a.kt)("strong",{parentName:"a"},"Edge")," "),"data\nstructures."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"mgp")," Python module so your editor can use typing annotations\nproperly and suggest methods and classes it contains. You can install the module\nby running ",(0,a.kt)("inlineCode",{parentName:"p"},"pip install mgp"),".")),(0,a.kt)("p",null,"Here's the code for the random walk algorithm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import mgp\nimport random\n\n\n@mgp.read_proc\ndef get_path(\n    start: mgp.Vertex,\n    length: int = 10,\n) -> mgp.Record(path=mgp.Path):\n    """Generates a random path of length `length` or less starting\n    from the `start` vertex.\n\n    :param mgp.Vertex start: The starting node of the walk.\n    :param int length: The number of edges to traverse.\n    :return: Random path.\n    :rtype: mgp.Record(mgp.Path)\n    """\n    path = mgp.Path(start)\n    vertex = start\n    for _ in range(length):\n        try:\n            edge = random.choice(list(vertex.out_edges))\n            path.expand(edge)\n            vertex = edge.to_vertex\n        except IndexError:\n            break\n\n    return mgp.Record(path=path)\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"get_path")," is decorated with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@mgp.read_proc")," decorator, which tells\nMemgraph it's a ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," procedure, meaning it won't make changes to the graph.\nThe path is created from the ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," node, and edges are appended to it\niteratively."),(0,a.kt)("h2",{id:"importing-querying-and-testing-a-module"},"Importing, querying and testing a module"),(0,a.kt)("p",null,"Now in order to import, query and test a module, check out the ",(0,a.kt)("a",{parentName:"p",href:"/mage/how-to-guides/run-a-query-module"},"following\npage"),"."),(0,a.kt)("p",null,"Feel free to create an issue or open a pull request on our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage"},"GitHub\nrepo")," to speed up the development.",(0,a.kt)("br",null),"\nAlso, don't forget to throw us a star on GitHub. \u2b50"))}u.isMDXComponent=!0}}]);